<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BackendBiblioMate</name>
    </assembly>
    <members>
        <member name="T:BackendBiblioMate.Configuration.MappingProfile">
            <summary>
            Defines AutoMapper configuration profiles for mapping 
            between domain entities and Data Transfer Objects (DTOs).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Configuration.MappingProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Configuration.MappingProfile"/> class
            and configures all mappings used in the application.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Configuration.MongoSettings">
            <summary>
            Represents the configuration settings required to connect to MongoDB.
            </summary>
            <remarks>
            These settings are typically bound from the "Mongo" section of <c>appsettings.json</c>.
            They can be injected into services via <c>IOptions&lt;MongoSettings&gt;</c>.
            </remarks>
        </member>
        <member name="P:BackendBiblioMate.Configuration.MongoSettings.ConnectionString">
            <summary>
            Gets or sets the MongoDB connection string.
            </summary>
            <value>
            A valid MongoDB connection string including credentials and host
            (e.g. <c>mongodb://user:pass@host:27017</c>).
            </value>
        </member>
        <member name="P:BackendBiblioMate.Configuration.MongoSettings.DatabaseName">
            <summary>
            Gets or sets the name of the MongoDB database to use.
            </summary>
            <value>
            The database name where collections are stored.
            </value>
        </member>
        <member name="P:BackendBiblioMate.Configuration.MongoSettings.LogCollectionName">
            <summary>
            Gets or sets the name of the MongoDB collection where notification logs are stored.
            </summary>
            <value>
            The collection name that stores <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> records.
            Defaults to <c>"logEntries"</c> if not explicitly configured.
            </value>
        </member>
        <member name="T:BackendBiblioMate.Controllers.AuditsController">
            <summary>
            API controller for retrieving user activity audit logs.
            </summary>
            <remarks>
            All endpoints in this controller are protected and require the caller
            to be authenticated with either the <see cref="F:BackendBiblioMate.Models.Enums.UserRoles.Admin"/> 
            or <see cref="F:BackendBiblioMate.Models.Enums.UserRoles.Librarian"/> role.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuditsController.#ctor(BackendBiblioMate.Interfaces.IUserActivityLogService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.AuditsController"/> class.
            </summary>
            <param name="activityLog">
            The service used to query user activity log entries from MongoDB.
            </param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuditsController.GetUserActivityLogs(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all recorded activity logs for a specific user.
            </summary>
            <param name="userId">The unique identifier of the user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            Returns:
            <list type="bullet">
              <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> objects.</description></item>
              <item><description><c>404 NotFound</c> if no activity logs are available for the given user.</description></item>
            </list>
            </returns>
            <response code="200">Activity logs successfully retrieved.</response>
            <response code="404">No activity logs found for the specified user.</response>
        </member>
        <member name="T:BackendBiblioMate.Controllers.AuthorsController">
            <summary>
            API controller for managing authors.
            Provides CRUD and utility endpoints for author resources.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.#ctor(BackendBiblioMate.Interfaces.IAuthorService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.AuthorsController"/> class.
            </summary>
            <param name="service">The service used to handle business logic for authors.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.GetAuthors(System.Threading.CancellationToken)">
            <summary>
            Retrieves all authors.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of authors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.GetAuthor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single author by its identifier.
            </summary>
            <param name="id">The author identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the author data,  
            <c>404 NotFound</c> if the author does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.CreateAuthor(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new author.
            </summary>
            <param name="dto">The data required to create the author.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with a location header pointing to the new author,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if the caller lacks permissions.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.UpdateAuthor(System.Int32,BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing author.
            </summary>
            <param name="id">The author identifier.</param>
            <param name="dto">The updated author data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success,  
            <c>404 NotFound</c> if the author does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.DeleteAuthor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an author.
            </summary>
            <param name="id">The author identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success,  
            <c>404 NotFound</c> if the author does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.SearchAuthors(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches authors by a query string.
            </summary>
            <param name="search">Optional search term to filter authors by name.</param>
            <param name="take">Maximum number of results to return. Defaults to 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a filtered list of authors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.EnsureAuthor(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures an author exists by name.
            </summary>
            <param name="dto">The data required to check or create the author.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the existing author if found,  
            <c>201 Created</c> with the new author if it was created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.AuthsController">
            <summary>
            Provides API endpoints for user authentication and account management,
            including registration, login, email confirmation, password reset, and admin approval.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.#ctor(BackendBiblioMate.Interfaces.IAuthService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.AuthsController"/> class.
            </summary>
            <param name="authService">The authentication service handling all user-related auth logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.Register(BackendBiblioMate.DTOs.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Registers a new user account.
            </summary>
            <param name="dto">The registration data including name, email, password, address, and phone.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> on success,  
            <c>400 Bad Request</c> if validation fails.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.Login(BackendBiblioMate.DTOs.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user and returns a JWT token if credentials are valid.
            </summary>
            <param name="dto">The login data including email and password.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with JWT and user info on success,  
            <c>401 Unauthorized</c> if credentials are invalid.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ConfirmEmail(System.String,System.Threading.CancellationToken)">
            <summary>
            Confirms the user's email address using a confirmation token.
            </summary>
            <param name="token">The email confirmation token provided in the verification link.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if the email is confirmed,  
            <c>400 Bad Request</c> if the token is invalid or expired.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.RequestPasswordReset(BackendBiblioMate.DTOs.RequestPasswordResetDto,System.Threading.CancellationToken)">
            <summary>
            Sends a password reset email to the specified address.
            </summary>
            <param name="dto">Contains the email address of the user requesting a password reset.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if the email was sent,  
            <c>404 Not Found</c> if the email is not associated with any account.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ResetPassword(BackendBiblioMate.DTOs.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets the user's password using a reset token and new password.
            </summary>
            <param name="dto">Contains the reset token and new password information.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> on successful reset,  
            <c>400 Bad Request</c> if the token is invalid or expired.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ApproveUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Approves a pending user account. Only accessible to administrators.
            </summary>
            <param name="id">The identifier of the user account to approve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if the user is approved,  
            <c>404 Not Found</c> if the user is not found or not pending,  
            <c>403 Forbidden</c> if the caller is not an administrator.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ResendConfirmation(BackendBiblioMate.DTOs.ResendEmailConfirmationDto,System.Threading.CancellationToken)">
            <summary>
            Resends the email confirmation link to the given email address.
            </summary>
            <param name="dto">The email of the user requesting confirmation.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> if the confirmation email was successfully sent.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.RejectUser(System.Int32,BackendBiblioMate.DTOs.RejectUserDto,System.Threading.CancellationToken)">
            <summary>
            Rejects a pending user account.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.BooksController">
            <summary>
            API controller for managing books.
            Provides endpoints for retrieval, creation, update, deletion, and search with filters.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.#ctor(BackendBiblioMate.Interfaces.IBookService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.BooksController"/> class.
            </summary>
            <param name="service">The service used to manage book entities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="service"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.GetBooks(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged and sorted list of books.
            Supports ETag-based conditional requests to optimize performance.
            </summary>
            <param name="pageNumber">The current page number. Defaults to 1.</param>
            <param name="pageSize">The number of items per page. Defaults to 20.</param>
            <param name="sortBy">The property name used for sorting. Defaults to "Title".</param>
            <param name="ascending">Whether the sorting order is ascending. Defaults to true.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a paged result of <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>,  
            <c>304 Not Modified</c> if the ETag matches and the data has not changed.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.GetBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single book by its unique identifier.
            </summary>
            <param name="id">The book identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> if found,  
            <c>404 Not Found</c> if the book does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.CreateBook(BackendBiblioMate.DTOs.BookCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new book entry. Requires Librarian or Admin role.
            </summary>
            <param name="dto">The data required to create the book.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> and its location.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.UpdateBook(System.Int32,BackendBiblioMate.DTOs.BookUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing book entry. Requires Librarian or Admin role.
            </summary>
            <param name="id">The identifier of the book to update.</param>
            <param name="dto">The updated book data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if the update was successful,  
            <c>404 Not Found</c> if the book does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.DeleteBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a book entry by its unique identifier. Requires Librarian or Admin role.
            </summary>
            <param name="id">The identifier of the book to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if the deletion was successful,  
            <c>404 Not Found</c> if the book does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.SearchBooks(BackendBiblioMate.DTOs.BookSearchDto,System.Threading.CancellationToken)">
            <summary>
            Searches books with multiple optional filters.
            If the user is authenticated, the user ID is included for personalized results.
            </summary>
            <param name="dto">The search criteria (title, author, genre, etc.).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with the list of matching books.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.GetGenres(System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of all available genre names.
            </summary>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of genre names.</returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.EditorsController">
            <summary>
            API controller for managing editors (publishers).
            Provides CRUD operations and utility endpoints for editor resources.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.#ctor(BackendBiblioMate.Interfaces.IEditorService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.EditorsController"/> class.
            </summary>
            <param name="service">The service used to encapsulate business logic for editors.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.GetEditors(System.Threading.CancellationToken)">
            <summary>
            Retrieves all editors.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of editors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.GetEditor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single editor by its unique identifier.
            </summary>
            <param name="id">The editor identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the editor,  
            <c>404 Not Found</c> if the editor does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.CreateEditor(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new editor. Requires Admin or Librarian role.
            </summary>
            <param name="dto">The data required to create the editor.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created editor,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.UpdateEditor(System.Int32,BackendBiblioMate.DTOs.EditorUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing editor. Requires Admin or Librarian role.
            </summary>
            <param name="id">The editor identifier.</param>
            <param name="dto">The updated editor data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if update was successful,  
            <c>404 Not Found</c> if the editor does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.DeleteEditor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an editor by its unique identifier. Requires Admin or Librarian role.
            </summary>
            <param name="id">The editor identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if deletion was successful,  
            <c>404 Not Found</c> if the editor does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.SearchEditors(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches editors by a query string.
            </summary>
            <param name="search">Optional search term to filter editors by name.</param>
            <param name="take">Maximum number of results to return. Defaults to 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a filtered list of editors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.EnsureEditor(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures an editor exists by name. If not, creates a new one. Requires Admin or Librarian role.
            </summary>
            <param name="dto">The data used to check or create the editor.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the existing editor,  
            <c>201 Created</c> with the new editor if it was created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.GenresController">
            <summary>
            API controller for managing genres.
            Provides CRUD operations and utility endpoints for genres.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.#ctor(BackendBiblioMate.Interfaces.IGenreService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.GenresController"/> class.
            </summary>
            <param name="service">The service encapsulating genre-related business logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.GetGenres(System.Threading.CancellationToken)">
            <summary>
            Retrieves all genres.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of genres.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.GetGenre(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single genre by its unique identifier.
            </summary>
            <param name="id">The genre identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the genre,  
            <c>404 Not Found</c> if the genre does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.CreateGenre(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new genre. Requires Librarian or Admin role.
            </summary>
            <param name="dto">The data required to create the genre.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created genre,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.UpdateGenre(System.Int32,BackendBiblioMate.DTOs.GenreUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing genre. Requires Librarian or Admin role.
            </summary>
            <param name="id">The genre identifier.</param>
            <param name="dto">The updated genre data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if update was successful,  
            <c>404 Not Found</c> if the genre does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.DeleteGenre(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a genre by its unique identifier. Requires Librarian or Admin role.
            </summary>
            <param name="id">The genre identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if deletion was successful,  
            <c>404 Not Found</c> if the genre does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.Search(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches genres by a query string. Supports autocomplete scenarios.
            </summary>
            <param name="search">Optional search term to filter genres by name.</param>
            <param name="take">Maximum number of results to return. Defaults to 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with the filtered list of genres.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.Ensure(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures a genre exists by name. If not, creates a new one. Requires Librarian or Admin role.
            </summary>
            <param name="dto">The data used to check or create the genre.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the existing genre,  
            <c>201 Created</c> with the new genre if it was created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.HistoriesController">
            <summary>
            API controller for retrieving a user’s history of domain events.
            Accessible only to authenticated users.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.HistoriesController.#ctor(BackendBiblioMate.Interfaces.IHistoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.HistoriesController"/> class.
            </summary>
            <param name="historyService">The service responsible for logging and retrieving history events.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.HistoriesController.GetUserHistory(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged list of history events for a specific user.
            </summary>
            <param name="userId">The identifier of the user whose history is requested.</param>
            <param name="page">The page number (1-based). Default is <c>1</c>.</param>
            <param name="pageSize">The number of items per page. Default is <c>20</c>.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.HistoryReadDto"/>,  
            <c>403 Forbidden</c> if the current user is neither the owner nor has Librarian/Admin role.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.LoanActiveRowDto">
            <summary>
            Represents a simplified row of an active loan returned by <c>GET /api/v1/loans/active/me</c>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.LoansController">
            <summary>
            API controller for managing book loans.
            Provides endpoints for creating, retrieving, updating, returning, extending, and deleting loans.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.LocationsController">
            <summary>
            Controller for managing library locations such as floors, aisles, shelves, and levels.
            Provides endpoints for retrieving and ensuring complete location hierarchies.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.#ctor(BackendBiblioMate.Interfaces.ILocationService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.LocationsController"/>.
            </summary>
            <param name="svc">The location service handling location logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetFloors(System.Threading.CancellationToken)">
            <summary>
            Retrieves all floors.
            </summary>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.FloorReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetAisles(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all aisles for a given floor.
            </summary>
            <param name="floor">The floor number.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.AisleReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetShelves(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves for a given floor and aisle.
            </summary>
            <param name="floor">The floor number.</param>
            <param name="aisle">The aisle code or name.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.ShelfMiniReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetLevels(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all levels for a given shelf.
            </summary>
            <param name="shelfId">The shelf identifier.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.LevelReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.Ensure(BackendBiblioMate.DTOs.LocationEnsureDto,System.Threading.CancellationToken)">
            <summary>
            Ensures a complete location exists (floor, aisle, shelf, and level).
            If missing, creates it atomically.
            </summary>
            <param name="dto">The location details.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>The ensured <see cref="T:BackendBiblioMate.DTOs.LocationReadDto"/>.</returns>
            <remarks>Only accessible to Admins and Librarians.</remarks>
        </member>
        <member name="T:BackendBiblioMate.Controllers.NotificationsController">
            <summary>
            API controller for managing user notifications.
            Provides CRUD operations on <see cref="T:BackendBiblioMate.Models.Notification"/> entities,
            dispatches real-time SignalR notifications, and logs each dispatch.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Controllers.NotificationsController.CurrentUserId">
            <summary>Gets the current authenticated user's identifier.</summary>
        </member>
        <member name="P:BackendBiblioMate.Controllers.NotificationsController.IsPrivileged">
            <summary>Indicates whether the current user has librarian or admin rights.</summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.FindNotificationAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>Finds a notification entity by its primary key.</summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.GetNotifications(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notifications visible to the current user.
            </summary>
            <remarks>
            - Admins/Librarians see all notifications.  
            - Regular users only see their own notifications.
            </remarks>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.NotificationReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.GetNotification(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific notification by its identifier.
            </summary>
            <remarks>
            - Only the owner of the notification, Librarians, or Admins may access this endpoint.
            </remarks>
            <param name="id">The notification identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the notification;  
            <c>404 Not Found</c> if not found;  
            <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.CreateNotification(BackendBiblioMate.DTOs.NotificationCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new notification, dispatches it in real time via SignalR, and logs the event.
            </summary>
            <remarks>
            - Only Librarians and Admins may call this endpoint.  
            - Automatically logs the notification dispatch and sends a real-time message.
            </remarks>
            <param name="dto">Notification data to create.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>201 Created</c> with the created notification.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.UpdateNotification(System.Int32,BackendBiblioMate.DTOs.NotificationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing notification’s title, message, and owner.
            </summary>
            <remarks>
            - Only Librarians and Admins may call this endpoint.  
            - The <paramref name="id"/> must match <see cref="P:BackendBiblioMate.DTOs.NotificationUpdateDto.NotificationId"/>.
            </remarks>
            <param name="id">The identifier of the notification to update.</param>
            <param name="dto">The updated notification data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if updated;  
            <c>400 Bad Request</c> if IDs mismatch;  
            <c>404 Not Found</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.DeleteNotification(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a notification record.
            </summary>
            <remarks>
            - Only Librarians and Admins may call this endpoint.  
            - Removes the notification permanently from the database.
            </remarks>
            <param name="id">The identifier of the notification to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if deleted;  
            <c>404 Not Found</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.ToDto(BackendBiblioMate.Models.Notification)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.Notification"/> entity to its DTO.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.NotificationsLogsController">
            <summary>
            API controller for managing notification log entries.
            Provides endpoints to retrieve and create <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> entries
            stored in the MongoDB collection.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.#ctor(BackendBiblioMate.Interfaces.IMongoLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.NotificationsLogsController"/>.
            </summary>
            <param name="mongoLogService">Service for handling notification log persistence.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.GetAll(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log entries.
            </summary>
            <param name="cancellationToken">Cancellation token for request abortion.</param>
            <returns>
            <c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.GetById(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a notification log entry by its identifier.
            </summary>
            <param name="id">The ObjectId of the log entry as a string.</param>
            <param name="cancellationToken">Cancellation token for request abortion.</param>
            <returns>
            <c>200 OK</c> with the <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>,
            or <c>404 Not Found</c> if no matching document exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.Create(BackendBiblioMate.DTOs.NotificationLogCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new notification log entry.
            </summary>
            <param name="dto">The data transfer object containing log details.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>
            and a Location header pointing to <see cref="M:BackendBiblioMate.Controllers.NotificationsLogsController.GetById(System.String,System.Threading.CancellationToken)"/>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.RecommendationsController">
            <summary>
            Controller for managing book recommendations for users.
            Provides endpoints to retrieve personalized book suggestions.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.RecommendationsController.#ctor(BackendBiblioMate.Interfaces.IRecommendationService)">
            <summary>
            Constructs a new <see cref="T:BackendBiblioMate.Controllers.RecommendationsController"/>.
            </summary>
            <param name="service">Service providing recommendation logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.RecommendationsController.GetRecommendations(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves up to 10 recommended books for the specified user based on their preferred genres.
            </summary>
            <param name="userId">Identifier of the user to get recommendations for.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.RecommendationReadDto"/>.</description></item>
            <item><description><c>403 Forbidden</c> if a non-admin attempts to access another user's recommendations.</description></item>
            <item><description><c>401 Unauthorized</c> if the request does not contain valid authentication.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ReportsController">
            <summary>
            API controller for managing analytical reports.
            Provides CRUD endpoints for <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/> entities
            and enforces user ownership rules.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.#ctor(BackendBiblioMate.Interfaces.IReportService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.ReportsController"/> class.
            </summary>
            <param name="service">Service for report operations.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.GetReports(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not an Admin or Librarian.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.GetReport(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific report by its identifier.
            </summary>
            <param name="id">The report identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</description></item>
            <item><description><c>404 NotFound</c> if the report does not exist.</description></item>
            <item><description><c>403 Forbidden</c> if the user is not the owner and not an Admin.</description></item>
            <item><description><c>401 Unauthorized</c> if the request is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.CreateReport(BackendBiblioMate.DTOs.ReportCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new report for the current user.
            </summary>
            <param name="dto">The report creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</description></item>
            <item><description><c>400 BadRequest</c> if the payload is invalid.</description></item>
            <item><description><c>401 Unauthorized</c> if the request is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.UpdateReport(System.Int32,BackendBiblioMate.DTOs.ReportUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing report.
            </summary>
            <param name="id">The report identifier.</param>
            <param name="dto">The updated report data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> on success.</description></item>
            <item><description><c>400 BadRequest</c> if IDs mismatch.</description></item>
            <item><description><c>404 NotFound</c> if the report does not exist.</description></item>
            <item><description><c>403 Forbidden</c> if the user is not the owner and not an Admin.</description></item>
            <item><description><c>401 Unauthorized</c> if the request is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.DeleteReport(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a specific report.
            </summary>
            <param name="id">The report identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> on success.</description></item>
            <item><description><c>404 NotFound</c> if the report does not exist.</description></item>
            <item><description><c>403 Forbidden</c> if the user is not the owner and not an Admin.</description></item>
            <item><description><c>401 Unauthorized</c> if the request is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ReservationsController">
            <summary>
            API controller for managing book reservations.
            Users may create and manage their own reservations,
            while Librarians and Admins have broader access.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetReservations(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reservations.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not Admin or Librarian.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetUserReservations(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves active reservations for a specific user.
            </summary>
            <param name="id">The user identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.</description></item>
            <item><description><c>401 Unauthorized</c> if the caller has no valid identity.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not the owner, Librarian, or Admin.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetPendingForBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves pending reservations for a specific book.
            </summary>
            <param name="id">The book identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not Admin or Librarian.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetReservation(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single reservation by its identifier.
            </summary>
            <param name="id">The reservation identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with the reservation details.</description></item>
            <item><description><c>401 Unauthorized</c> if the caller has no valid identity.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not the owner, Librarian, or Admin.</description></item>
            <item><description><c>404 NotFound</c> if the reservation does not exist.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.CreateReservation(BackendBiblioMate.DTOs.ReservationCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new reservation.
            </summary>
            <param name="dto">The reservation creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>201 Created</c> with the created reservation.</description></item>
            <item><description><c>400 BadRequest</c> if the request is invalid.</description></item>
            <item><description><c>401 Unauthorized</c> if the caller has no valid identity.</description></item>
            <item><description><c>403 Forbidden</c> if the caller tries to create a reservation for another user.</description></item>
            <item><description><c>409 Conflict</c> if an active reservation already exists.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.UpdateReservation(System.Int32,BackendBiblioMate.DTOs.ReservationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing reservation.
            </summary>
            <param name="id">The reservation identifier.</param>
            <param name="dto">The updated reservation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> if the reservation was updated successfully.</description></item>
            <item><description><c>400 BadRequest</c> if IDs mismatch.</description></item>
            <item><description><c>404 NotFound</c> if the reservation does not exist.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.DeleteReservation(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a reservation.
            </summary>
            <param name="id">The reservation identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> if the reservation was deleted successfully.</description></item>
            <item><description><c>401 Unauthorized</c> if the caller has no valid identity.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not the owner, Librarian, or Admin.</description></item>
            <item><description><c>404 NotFound</c> if the reservation does not exist.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.CleanupExpiredReservations(System.Threading.CancellationToken)">
            <summary>
            Purges expired reservations (>48h after availability), restores stock, and logs each removal.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with the number of expired reservations removed.</description></item>
            <item><description><c>403 Forbidden</c> if the caller is not Admin or Librarian.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ShelfLevelsController">
            <summary>
            API controller for managing shelf levels.
            Provides CRUD operations and paginated queries on <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.#ctor(BackendBiblioMate.Interfaces.IShelfLevelService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.ShelfLevelsController"/> class.
            </summary>
            <param name="svc">Service for shelf level operations.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.GetShelfLevels(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelf levels with optional shelf filtering and pagination.
            </summary>
            <param name="shelfId">Optional shelf identifier used to filter results.</param>
            <param name="page">Page index (1-based). Default is <c>1</c>.</param>
            <param name="pageSize">Number of items per page. Default is <c>10</c>.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a collection of <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.</description></item>
            <item><description><c>401 Unauthorized</c> if the request is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.GetShelfLevel(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific shelf level by its identifier.
            </summary>
            <param name="id">The shelf-level identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with the requested <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.</description></item>
            <item><description><c>404 NotFound</c> if the shelf level does not exist.</description></item>
            <item><description><c>401 Unauthorized</c> if the request is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.CreateShelfLevel(BackendBiblioMate.DTOs.ShelfLevelCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf level.
            Accessible only to Librarians and Admins.
            </summary>
            <param name="dto">The shelf-level DTO to create.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/> and its URI.</description></item>
            <item><description><c>400 BadRequest</c> if the payload is invalid.</description></item>
            <item><description><c>403 Forbidden</c> if the user is not Librarian or Admin.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.UpdateShelfLevel(System.Int32,BackendBiblioMate.DTOs.ShelfLevelUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf level.
            Accessible only to Librarians and Admins.
            </summary>
            <param name="id">The identifier of the shelf level to update.</param>
            <param name="dto">The modified shelf-level DTO.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> when the update succeeds.</description></item>
            <item><description><c>400 BadRequest</c> if the route ID and body ID do not match.</description></item>
            <item><description><c>404 NotFound</c> if the shelf level does not exist.</description></item>
            <item><description><c>403 Forbidden</c> if the user is not Librarian or Admin.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.DeleteShelfLevel(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf level.
            Accessible only to Librarians and Admins.
            </summary>
            <param name="id">The identifier of the shelf level to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> when deletion succeeds.</description></item>
            <item><description><c>404 NotFound</c> if the shelf level does not exist.</description></item>
            <item><description><c>403 Forbidden</c> if the user is not Librarian or Admin.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ShelvesController">
            <summary>
            API controller for managing shelves.
            Provides CRUD and paginated, zone-filtered endpoints for <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.#ctor(BackendBiblioMate.Interfaces.IShelfService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.ShelvesController"/> class.
            </summary>
            <param name="service">Service encapsulating shelf logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.GetShelves(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves with optional zone filtering and pagination.
            </summary>
            <param name="zoneId">Optional zone identifier to filter results.</param>
            <param name="page">Page index (1-based). Default is <c>1</c>.</param>
            <param name="pageSize">Number of items per page. Default is <c>10</c>.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.</description></item>
            <item><description><c>401 Unauthorized</c> if the user is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.GetShelf(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific shelf by its identifier.
            </summary>
            <param name="id">The shelf identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>200 OK</c> with the shelf data.</description></item>
            <item><description><c>404 NotFound</c> if the shelf does not exist.</description></item>
            <item><description><c>401 Unauthorized</c> if the user is not authenticated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.CreateShelf(BackendBiblioMate.DTOs.ShelfCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf.
            Accessible only to Librarians and Admins.
            </summary>
            <param name="dto">The shelf data to create.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.</description></item>
            <item><description><c>401 Unauthorized</c> if the user is not authenticated.</description></item>
            <item><description><c>403 Forbidden</c> if the user lacks required roles.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.UpdateShelf(System.Int32,BackendBiblioMate.DTOs.ShelfUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf.
            Accessible only to Librarians and Admins.
            </summary>
            <param name="id">The shelf identifier.</param>
            <param name="dto">The updated shelf data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> on success.</description></item>
            <item><description><c>400 BadRequest</c> if the IDs do not match.</description></item>
            <item><description><c>404 NotFound</c> if the shelf does not exist.</description></item>
            <item><description><c>401 Unauthorized</c> if the user is not authenticated.</description></item>
            <item><description><c>403 Forbidden</c> if the user lacks required roles.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.DeleteShelf(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf.
            Accessible only to Librarians and Admins.
            </summary>
            <param name="id">The shelf identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <list type="bullet">
            <item><description><c>204 NoContent</c> when deletion succeeds.</description></item>
            <item><description><c>404 NotFound</c> if the shelf does not exist.</description></item>
            <item><description><c>401 Unauthorized</c> if the user is not authenticated.</description></item>
            <item><description><c>403 Forbidden</c> if the user lacks required roles.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.StocksController">
            <summary>
            API controller for managing stock entries (inventory).
            Provides CRUD operations and quantity adjustments for <see cref="T:BackendBiblioMate.DTOs.StockReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IStockService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.StocksController"/>.
            </summary>
            <param name="context">EF Core database context.</param>
            <param name="stockService">Service encapsulating stock domain logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.GetStocks(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all stock entries with optional pagination.
            </summary>
            <remarks>
            - Accessible to authenticated users.  
            - Supports pagination using <paramref name="page"/> and <paramref name="pageSize"/>.  
            </remarks>
            <param name="page">Page index (1-based). Default is 1.</param>
            <param name="pageSize">Number of items per page. Default is 10.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.StockReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.GetStock(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific stock entry by its identifier.
            </summary>
            <remarks>
            - Accessible to authenticated users.  
            - Returns <c>404 Not Found</c> if the stock entry does not exist.  
            </remarks>
            <param name="id">The stock entry identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the stock entry.  
            <c>404 Not Found</c> if the stock entry does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.CreateStock(BackendBiblioMate.DTOs.StockCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new stock entry.
            </summary>
            <remarks>
            - Accessible to <c>Librarian</c> and <c>Admin</c> roles.  
            - A stock entry for a given book must be unique.  
            </remarks>
            <param name="dto">The stock creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created stock entry.  
            <c>409 Conflict</c> if a stock entry already exists for the specified book.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.UpdateStock(System.Int32,BackendBiblioMate.DTOs.StockUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing stock entry.
            </summary>
            <remarks>
            - Accessible to <c>Librarian</c> and <c>Admin</c> roles.  
            - The <paramref name="id"/> must match <see cref="P:BackendBiblioMate.DTOs.StockUpdateDto.StockId"/>.  
            </remarks>
            <param name="id">The stock entry identifier.</param>
            <param name="dto">The updated stock data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if updated successfully.  
            <c>400 Bad Request</c> if IDs mismatch.  
            <c>404 Not Found</c> if the stock entry does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.AdjustStockQuantity(System.Int32,BackendBiblioMate.DTOs.StockAdjustmentDto,System.Threading.CancellationToken)">
            <summary>
            Adjusts the quantity of a stock entry.
            </summary>
            <remarks>
            - Accessible to <c>Librarian</c> and <c>Admin</c> roles.  
            - Adjustment must not result in a negative quantity.  
            - Adjustment value cannot be zero.  
            </remarks>
            <param name="id">The stock entry identifier.</param>
            <param name="dto">The adjustment data (positive or negative integer).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the new quantity.  
            <c>400 Bad Request</c> if adjustment is invalid.  
            <c>404 Not Found</c> if the stock entry does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.DeleteStock(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a stock entry.
            </summary>
            <remarks>
            - Accessible to <c>Librarian</c> and <c>Admin</c> roles.  
            - Permanently removes the stock record from the database.  
            </remarks>
            <param name="id">The stock entry identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if successfully deleted.  
            <c>404 Not Found</c> if the stock entry does not exist.  
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.TagsController">
            <summary>
            API controller for managing tags.
            Provides CRUD endpoints and utility operations
            that support catalog-wide tagging and autocomplete features.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.#ctor(BackendBiblioMate.Interfaces.ITagService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.TagsController"/>.
            </summary>
            <param name="service">The tag service handling data access and business logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.GetTags(System.Threading.CancellationToken)">
            <summary>
            Retrieves all tags.
            </summary>
            <remarks>
            - Accessible anonymously.  
            - Returns the full list of tags.  
            </remarks>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.GetTag(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific tag by its identifier.
            </summary>
            <remarks>
            - Accessible anonymously.  
            - Returns <c>404 Not Found</c> if the tag does not exist.  
            </remarks>
            <param name="id">The identifier of the tag.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the tag details.  
            <c>404 Not Found</c> if the tag does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.CreateTag(BackendBiblioMate.DTOs.TagCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new tag.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> and <c>Librarian</c> roles.  
            - On success, the <c>Location</c> header points to the created resource.  
            </remarks>
            <param name="dto">The tag creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.UpdateTag(System.Int32,BackendBiblioMate.DTOs.TagUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing tag.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> and <c>Librarian</c> roles.  
            - The <paramref name="id"/> route parameter must match <see cref="P:BackendBiblioMate.DTOs.TagUpdateDto.TagId"/>.  
            - Returns <c>404 Not Found</c> if the tag does not exist.  
            </remarks>
            <param name="id">The identifier of the tag to update.</param>
            <param name="dto">The updated tag data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if successfully updated.  
            <c>400 Bad Request</c> if IDs mismatch.  
            <c>404 Not Found</c> if the tag does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.DeleteTag(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a tag.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> and <c>Librarian</c> roles.  
            - Permanently removes the tag from the system.  
            </remarks>
            <param name="id">The identifier of the tag to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if successfully deleted.  
            <c>404 Not Found</c> if the tag does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.Search(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches tags by name (for autocomplete).
            </summary>
            <remarks>
            - Accessible anonymously.  
            - Used primarily for UI autocomplete and quick lookups.  
            </remarks>
            <param name="search">Optional search term. If <c>null</c>, returns top tags.</param>
            <param name="take">Maximum number of results to return (1..100). Default: 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a filtered list of <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.Ensure(BackendBiblioMate.DTOs.TagCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures a tag exists: creates it if it does not already exist.
            </summary>
            <remarks>
            - Accessible to <c>Librarian</c> and <c>Admin</c> roles.  
            - Idempotent: returns existing tag if found, otherwise creates a new one.  
            </remarks>
            <param name="dto">The tag creation data (only the name is required).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the new <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> if created.  
            <c>200 OK</c> with the existing <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> if already present.  
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.UsersController">
            <summary>
            API controller for managing application users.
            - Administrative operations (list, create, update others, delete others, change role) are restricted to <c>Admin</c> role.  
            - Authenticated users may view and update their own profile via <c>/me</c> endpoints.  
            - Provides full CRUD functionality plus role management and self-service profile operations.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.#ctor(BackendBiblioMate.Interfaces.IUserService,BackendBiblioMate.Interfaces.IUserActivityLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.UsersController"/>.
            </summary>
            <param name="service">The service handling business logic and persistence for users.</param>
            <param name="log">The service responsible for recording user activity logs.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.GetUsers(System.Threading.CancellationToken)">
            <summary>
            Retrieves all users.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> only.  
            - Returns the complete list of registered users.  
            </remarks>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.UserReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.GetUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a user by its identifier.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> only.  
            - Returns <c>404 Not Found</c> if the user does not exist.  
            </remarks>
            <param name="id">The unique identifier of the user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the user details.  
            <c>404 Not Found</c> if the user does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.PostUser(BackendBiblioMate.DTOs.UserCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new user.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> only.  
            - Logs the creation event in user activity logs.  
            </remarks>
            <param name="dto">The user data used to create the account.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.UserReadDto"/>.  
            <c>400 Bad Request</c> if validation fails.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.UpdateUser(System.Int32,BackendBiblioMate.DTOs.UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates basic information of an existing user.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> only.  
            - Does <b>not</b> allow password or role updates.  
            - Logs the update in user activity logs.  
            </remarks>
            <param name="id">The identifier of the user to update.</param>
            <param name="dto">The updated user data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if successfully updated.  
            <c>404 Not Found</c> if the user does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.UpdateCurrentUser(BackendBiblioMate.DTOs.UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the currently authenticated user's profile.
            </summary>
            <remarks>
            - Accessible to any authenticated user.  
            - Logs the update action.  
            </remarks>
            <param name="dto">The updated user data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if successfully updated.  
            <c>404 Not Found</c> if the user does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.GetCurrentUser(System.Threading.CancellationToken)">
            <summary>
            Retrieves the profile of the currently authenticated user.
            </summary>
            <remarks>
            - Accessible to any authenticated user.  
            </remarks>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the current user's profile.  
            <c>404 Not Found</c> if the user does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.UpdateUserRole(System.Int32,BackendBiblioMate.DTOs.UserRoleUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates a user's role.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> only.  
            - Returns <c>400 Bad Request</c> if the role value is invalid.  
            - Logs the role change in user activity logs.  
            </remarks>
            <param name="id">The identifier of the user whose role will be updated.</param>
            <param name="dto">The new role information.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if successfully updated.  
            <c>400 Bad Request</c> if the role is invalid.  
            <c>404 Not Found</c> if the user does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.DeleteUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a user account.
            </summary>
            <remarks>
            - Accessible to <c>Admin</c> only.  
            - An admin cannot delete their own account.  
            - Logs the deletion event.  
            </remarks>
            <param name="id">The identifier of the user to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if successfully deleted.  
            <c>400 Bad Request</c> if attempting to delete own account.  
            <c>404 Not Found</c> if the user does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.DeleteCurrentUser(System.Threading.CancellationToken)">
            <summary>
            Deletes the currently authenticated user's account.
            </summary>
            <remarks>
            - Accessible to any authenticated user.  
            - Logs the deletion action.  
            </remarks>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>204 No Content</c> if successfully deleted.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.DebugToken">
            <summary>
            Debug endpoint returning the raw claims contained in the current user's authentication token.
            </summary>
            <remarks>
            - Accessible to any authenticated user.  
            - Intended for debugging and inspection purposes only.  
            </remarks>
            <returns>
            <c>200 OK</c> with the claims as a collection of key-value pairs.  
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ZonesController">
            <summary>
            API controller responsible for managing library zones.
            Zones represent physical areas in which shelves are organized.
            Provides full CRUD operations and supports pagination on read operations.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.#ctor(BackendBiblioMate.Interfaces.IZoneService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.ZonesController"/>.
            </summary>
            <param name="service">
            The service handling business logic and data access for zones.
            </param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.GetZones(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all zones with optional pagination.
            </summary>
            <remarks>
            - This endpoint requires authentication.  
            - The response is paginated based on <paramref name="page"/> and <paramref name="pageSize"/>.
            </remarks>
            <param name="page">The page number to retrieve (default: 1).</param>
            <param name="pageSize">The number of items per page (default: 10).</param>
            <param name="cancellationToken">Token to observe for request cancellation.</param>
            <returns>
            <c>200 OK</c> with a collection of <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/> instances.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.GetZone(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific zone by its identifier.
            </summary>
            <remarks>
            - This endpoint requires authentication.  
            - Returns <c>404 Not Found</c> if the zone does not exist.
            </remarks>
            <param name="id">The unique identifier of the zone.</param>
            <param name="cancellationToken">Token to observe for request cancellation.</param>
            <returns>
            <c>200 OK</c> with the requested <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.  
            <c>404 Not Found</c> if the zone does not exist.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.CreateZone(BackendBiblioMate.DTOs.ZoneCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new zone.
            </summary>
            <remarks>
            - Accessible only to Librarians and Admins.  
            - On success, the created resource is returned and the
              <c>Location</c> header points to the new resource.
            </remarks>
            <param name="dto">The data used to create the new zone.</param>
            <param name="cancellationToken">Token to observe for request cancellation.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.  
            <c>401 Unauthorized</c> if the user is not authenticated.  
            <c>403 Forbidden</c> if the user lacks required roles.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.UpdateZone(System.Int32,BackendBiblioMate.DTOs.ZoneUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing zone.
            </summary>
            <remarks>
            - Accessible only to Librarians and Admins.  
            - The route <paramref name="id"/> must match <see cref="P:BackendBiblioMate.DTOs.ZoneUpdateDto.ZoneId"/> in the payload.  
            - Returns <c>404 Not Found</c> if the zone does not exist.  
            </remarks>
            <param name="id">The identifier of the zone to update.</param>
            <param name="dto">The updated zone data.</param>
            <param name="cancellationToken">Token to observe for request cancellation.</param>
            <returns>
            <c>204 No Content</c> if successfully updated.  
            <c>400 Bad Request</c> if the IDs do not match.  
            <c>404 Not Found</c> if the zone does not exist.  
            <c>401 Unauthorized</c> if the user is not authenticated.  
            <c>403 Forbidden</c> if the user lacks required roles.  
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.DeleteZone(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a zone.
            </summary>
            <remarks>
            - Accessible only to Librarians and Admins.  
            - Permanently removes the zone from the system.  
            </remarks>
            <param name="id">The identifier of the zone to delete.</param>
            <param name="cancellationToken">Token to observe for request cancellation.</param>
            <returns>
            <c>204 No Content</c> if successfully deleted.  
            <c>404 Not Found</c> if the zone does not exist.  
            <c>401 Unauthorized</c> if the user is not authenticated.  
            <c>403 Forbidden</c> if the user lacks required roles.  
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Data.BiblioMateDbContext">
            <summary>
            Entity Framework Core database context for BiblioMate.
            Manages entity sets, relationships, indexes, constraints,
            and encryption of sensitive fields using <see cref="T:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BackendBiblioMate.Data.BiblioMateDbContext},BackendBiblioMate.Services.Infrastructure.Security.EncryptionService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Data.BiblioMateDbContext"/> class.
            </summary>
            <param name="options">EF Core DbContext configuration options.</param>
            <param name="encryptionService">Service responsible for encrypting sensitive data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BackendBiblioMate.Data.BiblioMateDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" -->
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.ConfigureIndexes(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures unique indexes across entities to enforce data integrity.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.CreateEncryptionConverter">
            <summary>
            Builds a value converter that encrypts/decrypts non-null string properties.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.CreateNullableEncryptionConverter">
            <summary>
            Builds a value converter that encrypts/decrypts nullable string properties.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.AuthorCreateDto">
            <summary>
            Data Transfer Object used when creating a new author.
            Contains the minimal required information for author creation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AuthorCreateDto.Name">
            <summary>
            Gets or sets the full name of the author.
            </summary>
            <remarks>
            - Required field.  
            - Must be between 2 and 100 characters.  
            </remarks>
            <example>J.K. Rowling</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.AuthorReadDto">
            <summary>
            Data Transfer Object returned when retrieving author information.
            Provides the identifier and full name of the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AuthorReadDto.AuthorId">
            <summary>
            Gets or sets the unique identifier of the author.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AuthorReadDto.Name">
            <summary>
            Gets or sets the full name of the author.
            </summary>
            <example>J.K. Rowling</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoginDto">
            <summary>
            Data Transfer Object used for user authentication during login.
            Contains the user’s credentials for obtaining a JWT token.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoginDto.Email">
            <summary>
            Gets or sets the registered email address of the user.
            </summary>
            <example>user@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoginDto.Password">
            <summary>
            Gets or sets the password of the user.
            </summary>
            <remarks>
            Must be at least 6 characters long.
            </remarks>
            <example>P@ssw0rd!</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RegisterDto">
            <summary>
            Data Transfer Object used to register a new user.
            Contains all fields required by the signup form.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.FirstName">
            <summary>
            Gets or sets the user's given name.
            </summary>
            <remarks>
            Must be between 2 and 60 characters.
            </remarks>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.LastName">
            <summary>
            Gets or sets the user's family name.
            </summary>
            <remarks>
            Must be between 2 and 60 characters.
            </remarks>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Email">
            <summary>
            Gets or sets the email address of the user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Phone">
            <summary>
            Gets or sets the phone number of the user.
            </summary>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Address1">
            <summary>
            Gets or sets the primary address line of the user.
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Address2">
            <summary>
            Gets or sets the secondary address line of the user (optional).
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.DateOfBirth">
            <summary>
            Gets or sets the user's date of birth (optional).
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Password">
            <summary>
            Gets or sets the password for the user account.
            </summary>
            <remarks>
            Must be between 6 and 100 characters.
            </remarks>
            <example>P@ssw0rd!</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.ProfileImage">
            <summary>
            Gets or sets the profile image payload or path (optional).
            </summary>
            <remarks>
            Can be a URL/path or a Base64-encoded string depending on the storage strategy.
            </remarks>
            <example>https://cdn.example.com/u/42/profile.png</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.FavoriteGenreIds">
            <summary>
            Gets or sets the list of preferred genre identifiers (optional).
            </summary>
            <example>[1, 3, 7]</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RejectUserDto">
            <summary>
            DTO for rejecting a user account.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RejectUserDto.Reason">
            <summary>
            Optional reason for rejection.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RequestPasswordResetDto">
            <summary>
            Data Transfer Object used to initiate a password reset request.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RequestPasswordResetDto.Email">
            <summary>
            Gets or sets the email address of the user requesting password reset.
            </summary>
            <example>user@example.com</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ResendEmailConfirmationDto">
            <summary>
            Data Transfer Object used to resend the email confirmation message.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ResendEmailConfirmationDto.Email">
            <summary>
            Gets or sets the email address of the user.
            </summary>
            <example>user@example.com</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ResetPasswordDto">
            <summary>
            Data Transfer Object used to reset a user's password using a valid reset token.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ResetPasswordDto.Token">
            <summary>
            Gets or sets the password reset token sent to the user's email.
            </summary>
            <example>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ResetPasswordDto.NewPassword">
            <summary>
            Gets or sets the new password for the user's account.
            </summary>
            <remarks>
            Must be between 6 and 100 characters.
            </remarks>
            <example>NewP@ssw0rd!</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookCreateDto">
            <summary>
            Data Transfer Object used to create a new book entry.
            Either an existing <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.ShelfLevelId"/> or a semantic <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.Location"/> must be provided.
            Optionally, an initial <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.StockQuantity"/> can be set and a stock row will be created.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Title">
            <summary>
            Gets or sets the title of the book.
            </summary>
            <example>Harry Potter and the Philosopher's Stone</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Isbn">
            <summary>
            Gets or sets the International Standard Book Number (ISBN).
            </summary>
            <remarks>Must be 10 to 13 characters long.</remarks>
            <example>9780747532743</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Description">
            <summary>
            Gets or sets the description or synopsis of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.PublicationDate">
            <summary>
            Gets or sets the publication date of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.AuthorId">
            <summary>
            Gets or sets the identifier of the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.GenreId">
            <summary>
            Gets or sets the identifier of the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.EditorId">
            <summary>
            Gets or sets the identifier of the editor.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.ShelfLevelId">
            <summary>
            Gets or sets the identifier of an existing shelf level.
            If not provided, the <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.Location"/> will be ensured and used.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Location">
            <summary>
            Gets or sets the semantic location of the book (Zone/Shelf/ShelfLevel).
            Used when <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.ShelfLevelId"/> is not provided.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.CoverUrl">
            <summary>
            Gets or sets the URL of the book’s cover image.
            </summary>
            <example>https://cdn.example.com/books/hp1.jpg</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.TagIds">
            <summary>
            Gets or sets the list of tag identifiers associated with the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.StockQuantity">
            <summary>
            Gets or sets the optional initial stock quantity for the book.
            If provided, a stock entry will be created or updated.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookReadDto">
            <summary>
            Data Transfer Object returned when retrieving book information.
            Contains metadata, availability and location.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.BookId">
            <summary>Gets or sets the unique identifier of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Title">
            <summary>Gets or sets the title of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Isbn">
            <summary>Gets or sets the ISBN of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.PublicationYear">
            <summary>Gets or sets the year of publication.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.AuthorName">
            <summary>Gets or sets the name of the author.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.GenreName">
            <summary>Gets or sets the genre name.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.EditorName">
            <summary>Gets or sets the editor/publisher name.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.IsAvailable">
            <summary>Gets or sets whether the book is available in stock.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.StockQuantity">
            <summary>Gets or sets the current stock quantity.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.CoverUrl">
            <summary>Gets or sets the URL of the book’s cover image.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Description">
            <summary>Gets or sets the description of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Tags">
            <summary>Gets or sets the list of tag names associated with the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Floor">
            <summary>Gets or sets the floor where the book is located.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Aisle">
            <summary>Gets or sets the aisle identifier.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Rayon">
            <summary>Gets or sets the rayon/section name.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookReadDto.Shelf">
            <summary>Gets or sets the shelf number.</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookSearchDto">
            <summary>
            Data Transfer Object used for advanced filtering when searching for books.
            All fields are optional.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Title">
            <summary>Gets or sets the title filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Author">
            <summary>Gets or sets the author filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Publisher">
            <summary>Gets or sets the publisher filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Genre">
            <summary>Gets or sets the genre filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Isbn">
            <summary>Gets or sets the ISBN filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.YearMin">
            <summary>Gets or sets the minimum publication year filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.YearMax">
            <summary>Gets or sets the maximum publication year filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.IsAvailable">
            <summary>Gets or sets whether to filter by availability.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.TagIds">
            <summary>Gets or sets the list of tag identifiers to filter by.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.TagNames">
            <summary>Gets or sets the list of tag names to filter by.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Description">
            <summary>Gets or sets a description keyword filter.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookSearchDto.Exclude">
            <summary>Gets or sets words to exclude from search results.</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookUpdateDto">
            <summary>
            Data Transfer Object used to update an existing book record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.BookId">
            <summary>Gets or sets the unique identifier of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.Title">
            <summary>Gets or sets the title of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.Isbn">
            <summary>Gets or sets the ISBN of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.Description">
            <summary>Gets or sets the description of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.PublicationDate">
            <summary>Gets or sets the publication date of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.AuthorId">
            <summary>Gets or sets the identifier of the author.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.GenreId">
            <summary>Gets or sets the identifier of the genre.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.EditorId">
            <summary>Gets or sets the identifier of the editor.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.ShelfLevelId">
            <summary>Gets or sets the identifier of the shelf level.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.CoverUrl">
            <summary>Gets or sets the URL of the book’s cover image.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.TagIds">
            <summary>Gets or sets the list of tag identifiers associated with the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookUpdateDto.StockQuantity">
            <summary>
            Gets or sets the optional stock quantity of the book.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.EditorCreateDto">
            <summary>
            Data Transfer Object used to create a new editor (publisher).
            Contains the minimal required information for editor creation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorCreateDto.Name">
            <summary>
            Gets or sets the name of the editor or publisher.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>Penguin Random House</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.EditorReadDto">
            <summary>
            Data Transfer Object returned when retrieving editor (publisher) data.
            Contains the unique identifier and name of the editor.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorReadDto.EditorId">
            <summary>
            Gets or sets the unique identifier of the editor.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorReadDto.Name">
            <summary>
            Gets or sets the name of the editor or publisher.
            </summary>
            <example>Penguin Random House</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.EditorUpdateDto">
            <summary>
            Data Transfer Object used to update an existing editor (publisher).
            Contains the editable information for an editor record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorUpdateDto.Name">
            <summary>
            Gets or sets the new name of the editor or publisher.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>HarperCollins</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.GenreCreateDto">
            <summary>
            Data Transfer Object used to create a new genre.
            Contains the minimal required information for genre creation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreCreateDto.Name">
            <summary>
            Gets or sets the name of the genre.
            </summary>
            <remarks>
            Must be between 2 and 50 characters.
            </remarks>
            <example>Science Fiction</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.GenreReadDto">
            <summary>
            Data Transfer Object returned when retrieving genre information.
            Provides the identifier and name of the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreReadDto.GenreId">
            <summary>
            Gets or sets the unique identifier of the genre.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreReadDto.Name">
            <summary>
            Gets or sets the name of the genre.
            </summary>
            <example>Science Fiction</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.GenreUpdateDto">
            <summary>
            Data Transfer Object used to update an existing genre.
            Contains the editable information for a genre record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreUpdateDto.Name">
            <summary>
            Gets or sets the new name of the genre.
            </summary>
            <remarks>
            Must be between 2 and 50 characters.
            </remarks>
            <example>Fantasy</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.HistoryReadDto">
            <summary>
            Data Transfer Object returned when querying a user's history of events.
            Contains details about each historical action related to a user account.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.HistoryId">
            <summary>
            Gets or sets the unique identifier of the history record.
            </summary>
            <example>123</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.EventType">
            <summary>
            Gets or sets the type of event that occurred.
            </summary>
            <remarks>
            Common values include:
            - <c>Loan</c> (book borrowed)  
            - <c>Return</c> (book returned)  
            - <c>Reservation</c> (reservation placed)  
            - <c>Cancel</c> (reservation canceled)  
            </remarks>
            <example>Loan</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.EventDate">
            <summary>
            Gets or sets the date and time when the event occurred, in UTC.
            </summary>
            <example>2025-06-23T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.LoanId">
            <summary>
            Gets or sets the identifier of the related loan, if applicable.
            Returns <c>null</c> if the event is not linked to a loan.
            </summary>
            <example>45</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.ReservationId">
            <summary>
            Gets or sets the identifier of the related reservation, if applicable.
            Returns <c>null</c> if the event is not linked to a reservation.
            </summary>
            <example>78</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanCreatedResult">
            <summary>
            Data Transfer Object returned by the loan creation workflow.
            </summary>
            <remarks>
            <para>
            This DTO is produced when a loan is successfully created (e.g., by <c>ILoanService.CreateAsync</c>).
            It is a lightweight response containing only the information the client needs immediately after
            creation—specifically, the computed due date.
            </para>
            <para>
            This type is not an entity and is not persisted by itself. It is designed for API responses
            and client consumption.
            </para>
            </remarks>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanCreatedResult.DueDate">
            <summary>
            Gets the date and time when the borrowed item is due to be returned.
            </summary>
            <remarks>
            The value is expressed in Coordinated Universal Time (UTC). Clients should convert
            to the appropriate local time zone for display purposes.
            </remarks>
            <example>2025-06-15T10:30:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanCreateDto">
            <summary>
            Data Transfer Object used to create a new loan (book borrowing).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanCreateDto.UserId">
            <summary>
            Gets or sets the identifier of the borrowing user.
            </summary>
            <remarks>
            - Optional: if omitted, it is inferred from the authenticated token (standard user).  
            - Required only when staff members create loans for other users.  
            </remarks>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanCreateDto.BookId">
            <summary>
            Gets or sets the identifier of the book to be borrowed.
            </summary>
            <example>42</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanReadDto">
            <summary>
            Data Transfer Object returned when retrieving loan information.
            Contains user, book, and lifecycle details for a loan.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.LoanId">
            <summary>
            Gets or sets the unique identifier of the loan.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.UserId">
            <summary>
            Gets or sets the identifier of the user who borrowed the book.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.UserName">
            <summary>
            Gets or sets the full name of the user who borrowed the book.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.BookId">
            <summary>
            Gets or sets the identifier of the borrowed book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.BookTitle">
            <summary>
            Gets or sets the title of the borrowed book.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.LoanDate">
            <summary>
            Gets or sets the date when the loan started, in UTC.
            </summary>
            <example>2025-06-01T10:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.DueDate">
            <summary>
            Gets or sets the due date for returning the book, in UTC.
            </summary>
            <example>2025-06-15T10:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.ReturnDate">
            <summary>
            Gets or sets the date when the book was actually returned, if applicable, in UTC.
            </summary>
            <example>2025-06-14T16:45:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.Fine">
            <summary>
            Gets or sets the fine amount charged for late return, if any.
            </summary>
            <example>0.00</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanReturnedResult">
            <summary>
            Data Transfer Object returned after processing a loan return.
            Includes fine information and reservation notification status.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReturnedResult.ReservationNotified">
            <summary>
            Gets or sets whether a reservation notification was sent for the returned book.
            </summary>
            <example>true</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReturnedResult.Fine">
            <summary>
            Gets or sets the fine amount charged for late return, if any.
            </summary>
            <example>5.00</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanUpdateDto">
            <summary>
            Data Transfer Object used to update the due date of an existing loan.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanUpdateDto.DueDate">
            <summary>
            Gets or sets the new due date for the loan, in UTC.
            </summary>
            <example>2025-07-15T10:30:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.FloorReadDto">
            <summary>
            Data Transfer Object representing a floor number in the library.
            Typically used for populating dropdowns or lists in the UI.
            </summary>
            <param name="FloorNumber">The floor number (0–100).</param>
        </member>
        <member name="M:BackendBiblioMate.DTOs.FloorReadDto.#ctor(System.Int32)">
            <summary>
            Data Transfer Object representing a floor number in the library.
            Typically used for populating dropdowns or lists in the UI.
            </summary>
            <param name="FloorNumber">The floor number (0–100).</param>
        </member>
        <member name="P:BackendBiblioMate.DTOs.FloorReadDto.FloorNumber">
            <summary>The floor number (0–100).</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.AisleReadDto">
            <summary>
            Data Transfer Object representing an aisle code in the library.
            Typically used for populating dropdowns or lists in the UI.
            </summary>
            <param name="AisleCode">The aisle code (1–20 characters).</param>
        </member>
        <member name="M:BackendBiblioMate.DTOs.AisleReadDto.#ctor(System.String)">
            <summary>
            Data Transfer Object representing an aisle code in the library.
            Typically used for populating dropdowns or lists in the UI.
            </summary>
            <param name="AisleCode">The aisle code (1–20 characters).</param>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AisleReadDto.AisleCode">
            <summary>The aisle code (1–20 characters).</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfMiniReadDto">
            <summary>
            Data Transfer Object representing a simplified shelf view.
            Typically used for lightweight selection lists in the UI.
            </summary>
            <param name="ShelfId">The unique identifier of the shelf.</param>
            <param name="Name">The human-readable name of the shelf.</param>
        </member>
        <member name="M:BackendBiblioMate.DTOs.ShelfMiniReadDto.#ctor(System.Int32,System.String)">
            <summary>
            Data Transfer Object representing a simplified shelf view.
            Typically used for lightweight selection lists in the UI.
            </summary>
            <param name="ShelfId">The unique identifier of the shelf.</param>
            <param name="Name">The human-readable name of the shelf.</param>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfMiniReadDto.ShelfId">
            <summary>The unique identifier of the shelf.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfMiniReadDto.Name">
            <summary>The human-readable name of the shelf.</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LevelReadDto">
            <summary>
            Data Transfer Object representing a shelf level number.
            Typically used for populating dropdowns or lists in the UI.
            </summary>
            <param name="LevelNumber">The shelf level number (1 = bottom, increasing upwards).</param>
        </member>
        <member name="M:BackendBiblioMate.DTOs.LevelReadDto.#ctor(System.Int32)">
            <summary>
            Data Transfer Object representing a shelf level number.
            Typically used for populating dropdowns or lists in the UI.
            </summary>
            <param name="LevelNumber">The shelf level number (1 = bottom, increasing upwards).</param>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LevelReadDto.LevelNumber">
            <summary>The shelf level number (1 = bottom, increasing upwards).</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LocationEnsureDto">
            <summary>
            Data Transfer Object used to request an "ensure" operation for a semantic location.
            The system will create or retrieve the matching zone, shelf, and shelf level
            based on these values.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationEnsureDto.FloorNumber">
            <summary>
            Gets or sets the floor number where the location is found.
            </summary>
            <remarks>Valid values range from 0 to 100.</remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationEnsureDto.AisleCode">
            <summary>
            Gets or sets the aisle code for the location.
            </summary>
            <remarks>Must be between 1 and 20 characters.</remarks>
            <example>A1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationEnsureDto.ShelfName">
            <summary>
            Gets or sets the name of the shelf.
            </summary>
            <remarks>Must be between 1 and 100 characters.</remarks>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationEnsureDto.LevelNumber">
            <summary>
            Gets or sets the level number of the shelf (1 = bottom).
            </summary>
            <remarks>Valid values range from 1 to 100.</remarks>
            <example>2</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LocationReadDto">
            <summary>
            Data Transfer Object returned after an "ensure" operation on a semantic location.
            Contains the identifiers of the created or matched zone, shelf, and shelf level,
            as well as a reminder of the semantic values used.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.ZoneId">
            <summary>
            Gets or sets the identifier of the zone.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.ShelfId">
            <summary>
            Gets or sets the identifier of the shelf.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.ShelfLevelId">
            <summary>
            Gets or sets the identifier of the shelf level.
            </summary>
            <example>25</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.FloorNumber">
            <summary>
            Gets or sets the floor number of the location.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.AisleCode">
            <summary>
            Gets or sets the aisle code of the location.
            </summary>
            <example>A1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.ShelfName">
            <summary>
            Gets or sets the name of the shelf.
            </summary>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationReadDto.LevelNumber">
            <summary>
            Gets or sets the level number of the shelf.
            </summary>
            <example>2</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationCreateDto">
            <summary>
            Data Transfer Object used to request the creation of a new notification.
            Contains the details needed to send a notification to a user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationCreateDto.UserId">
            <summary>
            Gets or sets the identifier of the user who will receive the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationCreateDto.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
            <remarks>
            Must contain between 1 and 200 characters.
            </remarks>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationCreateDto.Message">
            <summary>
            Gets or sets the body message of the notification.
            </summary>
            <remarks>
            Must contain between 1 and 1000 characters.
            </remarks>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationLogCreateDto">
            <summary>
            Data Transfer Object used to create a new notification log entry.
            Contains all necessary information to log a notification dispatch.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.UserId">
            <summary>
            Gets or sets the identifier of the user who received the notification.
            </summary>
            <example>123</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.Type">
            <summary>
            Gets or sets the type of the notification.
            </summary>
            <remarks>
            Common values include:
            - <c>LoanReminder</c>  
            - <c>ReservationAvailable</c>  
            - <c>OverdueAlert</c>  
            </remarks>
            <example>LoanReminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.Message">
            <summary>
            Gets or sets the content of the notification message.
            </summary>
            <example>Your loan for “The Hobbit” is due tomorrow.</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.SentAt">
            <summary>
            Gets or sets the UTC timestamp when the notification was sent.
            </summary>
            <remarks>
            Defaults to the current UTC time if not explicitly provided.
            </remarks>
            <example>2025-06-30T14:25:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationReadDto">
            <summary>
            Data Transfer Object returned when retrieving notification information.
            Contains details of a sent notification and its recipient.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.NotificationId">
            <summary>
            Gets or sets the unique identifier of the notification.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.UserId">
            <summary>
            Gets or sets the identifier of the user who received the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.UserName">
            <summary>
            Gets or sets the full name of the user who received the notification.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.Message">
            <summary>
            Gets or sets the body message of the notification.
            </summary>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.Timestamp">
            <summary>
            Gets or sets the UTC timestamp when the notification was created.
            </summary>
            <example>2025-07-04T15:30:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationUpdateDto">
            <summary>
            Data Transfer Object used to update an existing notification.
            Contains the editable fields of a notification record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.NotificationId">
            <summary>
            Gets or sets the unique identifier of the notification to update.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.UserId">
            <summary>
            Gets or sets the identifier of the user who will receive the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.Title">
            <summary>
            Gets or sets the updated title of the notification.
            </summary>
            <remarks>
            Must contain between 1 and 200 characters.
            </remarks>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.Message">
            <summary>
            Gets or sets the updated body message of the notification.
            </summary>
            <remarks>
            Must contain between 1 and 1000 characters.
            </remarks>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RecommendationReadDto">
            <summary>
            Data Transfer Object returned when retrieving recommended books for a user.
            Contains essential details for display in recommendation lists.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.BookId">
            <summary>
            Gets or sets the unique identifier of the recommended book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.Title">
            <summary>
            Gets or sets the title of the recommended book.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.Genre">
            <summary>
            Gets or sets the name of the genre of the recommended book.
            </summary>
            <example>Fantasy</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.Author">
            <summary>
            Gets or sets the name of the author of the recommended book.
            </summary>
            <example>J.R.R. Tolkien</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.CoverUrl">
            <summary>
            Gets or sets the URL of the recommended book’s cover image.
            </summary>
            <remarks>
            Must be a valid absolute URL.
            </remarks>
            <example>https://example.com/covers/the-hobbit.jpg</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReportCreateDto">
            <summary>
            Data Transfer Object used to request the creation of a new analytical report.
            Only the <see cref="P:BackendBiblioMate.DTOs.ReportCreateDto.Title"/> is provided by the client; the <c>Content</c> is generated on the server.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportCreateDto.Title">
            <summary>
            Gets or sets the title for the new report.
            </summary>
            <remarks>
            Must contain between 1 and 200 characters.
            </remarks>
            <example>Monthly Loan Statistics</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReportReadDto">
            <summary>
            Data Transfer Object returned when retrieving report information.
            Contains metadata and generated content of an analytical report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.ReportId">
            <summary>
            Gets or sets the unique identifier of the report.
            </summary>
            <example>8</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.Title">
            <summary>
            Gets or sets the title of the report.
            </summary>
            <example>Monthly Usage Statistics</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.Content">
            <summary>
            Gets or sets the detailed content of the report.
            </summary>
            <remarks>
            This may include narrative sections, tables, or summary points generated by the system.
            </remarks>
            <example>The number of loans increased by 15% compared to the previous month...</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.GeneratedDate">
            <summary>
            Gets or sets the date and time when the report was generated, in UTC.
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.UserId">
            <summary>
            Gets or sets the identifier of the user who generated the report.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.UserName">
            <summary>
            Gets or sets the full name of the user who generated the report.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReportUpdateDto">
            <summary>
            Data Transfer Object used to update an existing report.
            Contains the fields that can be modified on a report record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportUpdateDto.ReportId">
            <summary>
            Gets or sets the unique identifier of the report to update.
            </summary>
            <example>8</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportUpdateDto.Title">
            <summary>
            Gets or sets the updated title of the report.
            </summary>
            <remarks>
            Must contain between 1 and 200 characters.
            </remarks>
            <example>Monthly Usage Summary</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportUpdateDto.Content">
            <summary>
            Gets or sets the updated detailed content of the report.
            </summary>
            <remarks>
            Must contain between 1 and 4000 characters.
            </remarks>
            <example>The number of loans increased by 20% compared to the previous month...</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReservationCreateDto">
            <summary>
            Data Transfer Object used to request the creation of a new reservation.
            Contains identifiers of the user and the book to reserve.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationCreateDto.BookId">
            <summary>
            Gets or sets the identifier of the book to reserve.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationCreateDto.UserId">
            <summary>
            Gets or sets the identifier of the user making the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReservationReadDto">
            <summary>
            Data Transfer Object returned when retrieving reservation information,
            including book and user details. Contains all relevant fields to display
            reservation status and metadata.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.ReservationId">
            <summary>
            Gets or sets the unique identifier of the reservation.
            </summary>
            <example>23</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.UserId">
            <summary>
            Gets or sets the identifier of the user who made the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.UserName">
            <summary>
            Gets or sets the full name of the user who made the reservation.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.BookId">
            <summary>
            Gets or sets the identifier of the reserved book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.BookTitle">
            <summary>
            Gets or sets the title of the reserved book.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.ReservationDate">
            <summary>
            Gets or sets the date and time when the reservation was created, in UTC.
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.Status">
            <summary>
            Gets or sets the current status of the reservation.
            </summary>
            <remarks>
            Possible values include:
            - <c>Pending</c> (waiting for availability)  
            - <c>Completed</c> (fulfilled by a loan)  
            - <c>Cancelled</c> (manually cancelled or expired)  
            </remarks>
            <example>Pending</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.ExpirationDate">
            <summary>
            Gets or sets the expiration date of the reservation (UTC), if applicable.
            Returns <c>null</c> if the reservation has no expiration date.
            </summary>
            <example>2025-07-01T23:59:59Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReservationUpdateDto">
            <summary>
            Data Transfer Object used to update an existing reservation.
            Contains all fields that can be modified on a reservation record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.ReservationId">
            <summary>
            Gets or sets the unique identifier of the reservation to update.
            </summary>
            <example>23</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.BookId">
            <summary>
            Gets or sets the identifier of the book associated with the reservation.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.UserId">
            <summary>
            Gets or sets the identifier of the user who made the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.ReservationDate">
            <summary>
            Gets or sets the date and time when the reservation was created, in UTC.
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.Status">
            <summary>
            Gets or sets the updated status of the reservation.
            </summary>
            <remarks>
            Must be one of the defined <see cref="T:BackendBiblioMate.Models.Enums.ReservationStatus"/> values.
            </remarks>
            <example>Cancelled</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfLevelCreateDto">
            <summary>
            Data Transfer Object used to create a new shelf level.
            Contains the level details and optional capacity constraints.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.LevelNumber">
            <summary>
            Gets or sets the level number on the shelf.
            </summary>
            <remarks>
            <c>1</c> corresponds to the bottom level, increasing upwards.
            </remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.ShelfId">
            <summary>
            Gets or sets the identifier of the shelf to which this level belongs.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.MaxHeight">
            <summary>
            Gets or sets the optional maximum height capacity in centimeters.
            </summary>
            <remarks>
            If not provided, there is no height constraint.
            </remarks>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.Capacity">
            <summary>
            Gets or sets the optional maximum number of books this level can hold.
            </summary>
            <remarks>
            If not provided, capacity is considered unlimited.
            </remarks>
            <example>50</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.CurrentLoad">
            <summary>
            Gets or sets the optional current number of books on this level.
            </summary>
            <remarks>
            Used to track real-time occupancy. Typically managed by the system, not by clients.
            </remarks>
            <example>12</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfLevelReadDto">
            <summary>
            Data Transfer Object returned when retrieving shelf level information.
            Contains details about a specific level within a shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.ShelfLevelId">
            <summary>
            Gets or sets the unique identifier of the shelf level.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.LevelNumber">
            <summary>
            Gets or sets the numeric level on the shelf (e.g., <c>1</c> for bottom).
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.ShelfId">
            <summary>
            Gets or sets the identifier of the parent shelf.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.ShelfName">
            <summary>
            Gets or sets the name of the parent shelf.
            </summary>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.MaxHeight">
            <summary>
            Gets or sets the maximum height in centimeters of books that can fit on this level.
            </summary>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.Capacity">
            <summary>
            Gets or sets the maximum number of books this level can hold.
            </summary>
            <example>20</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.CurrentLoad">
            <summary>
            Gets or sets the current number of books stored on this level.
            </summary>
            <example>12</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfLevelUpdateDto">
            <summary>
            Data Transfer Object used to update an existing shelf level.
            Contains the fields that can be modified on a shelf level record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.ShelfLevelId">
            <summary>
            Gets or sets the unique identifier of the shelf level to update.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.LevelNumber">
            <summary>
            Gets or sets the updated numeric level on the shelf (e.g., <c>1</c> for bottom).
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.ShelfId">
            <summary>
            Gets or sets the identifier of the shelf to which this level belongs.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.MaxHeight">
            <summary>
            Gets or sets the maximum height in centimeters of books that can fit on this level.
            </summary>
            <remarks>
            If not provided, there is no height constraint.
            </remarks>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.Capacity">
            <summary>
            Gets or sets the maximum number of books this level can hold.
            </summary>
            <remarks>
            If not provided, capacity is considered unlimited.
            </remarks>
            <example>20</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.CurrentLoad">
            <summary>
            Gets or sets the current number of books stored on this level.
            </summary>
            <remarks>
            Used to track real-time occupancy. Typically managed by the system, not by clients.
            </remarks>
            <example>12</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfCreateDto">
            <summary>
            Data Transfer Object used to create a new shelf.
            Contains required zone and genre identifiers, shelf name, and optional capacity.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.ZoneId">
            <summary>
            Gets or sets the identifier of the zone where the shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.GenreId">
            <summary>
            Gets or sets the identifier of the genre associated with the shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.Name">
            <summary>
            Gets or sets the name of the shelf.
            </summary>
            <remarks>
            Maximum length of 100 characters.
            </remarks>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.Capacity">
            <summary>
            Gets or sets the maximum number of books the shelf can hold.
            </summary>
            <remarks>
            If set to <c>0</c>, the shelf is considered to have no capacity limit.
            </remarks>
            <example>50</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfReadDto">
            <summary>
            Data Transfer Object returned when retrieving shelf information,
            including related zone and genre data.
            Contains all fields necessary to display shelf details and status.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.ShelfId">
            <summary>
            Gets or sets the unique identifier of the shelf.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.Name">
            <summary>
            Gets or sets the name of the shelf.
            </summary>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.ZoneId">
            <summary>
            Gets or sets the identifier of the zone where the shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.ZoneName">
            <summary>
            Gets or sets the name of the zone where the shelf is located.
            </summary>
            <example>Main Hall</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.GenreId">
            <summary>
            Gets or sets the identifier of the genre associated with the shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.GenreName">
            <summary>
            Gets or sets the name of the genre associated with the shelf.
            </summary>
            <example>Science Fiction</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.Capacity">
            <summary>
            Gets or sets the maximum number of books the shelf can hold.
            </summary>
            <example>50</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.CurrentLoad">
            <summary>
            Gets or sets the current number of books stored on the shelf.
            </summary>
            <example>34</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfUpdateDto">
            <summary>
            Data Transfer Object used to update an existing shelf.
            Contains the fields that can be modified on a shelf record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.ShelfId">
            <summary>
            Gets or sets the unique identifier of the shelf to update.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.ZoneId">
            <summary>
            Gets or sets the identifier of the zone where the shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.GenreId">
            <summary>
            Gets or sets the identifier of the genre associated with the shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.Name">
            <summary>
            Gets or sets the updated name of the shelf.
            </summary>
            <remarks>
            Maximum length of 100 characters.
            </remarks>
            <example>Fantasy Shelf A - Updated</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.Capacity">
            <summary>
            Gets or sets the updated maximum number of books the shelf can hold.
            </summary>
            <remarks>
            If set to <c>0</c>, the shelf is considered to have no capacity limit.
            </remarks>
            <example>60</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockAdjustmentDto">
            <summary>
            Data Transfer Object used to adjust the quantity of a specific stock entry.
            Contains the delta to apply to the current stock level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockAdjustmentDto.Adjustment">
            <summary>
            Gets or sets the number of units to adjust the stock by.
            </summary>
            <remarks>
            Positive values increase stock; negative values decrease stock.  
            A value of <c>0</c> is not allowed.
            </remarks>
            <example>-1</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockCreateDto">
            <summary>
            Data Transfer Object used to initialize stock for a book.
            Contains the book identifier and the initial quantity to set.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockCreateDto.BookId">
            <summary>
            Gets or sets the identifier of the book for which stock is being created.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockCreateDto.Quantity">
            <summary>
            Gets or sets the initial quantity of the book to add to stock.
            </summary>
            <remarks>
            Must be zero or a positive integer.
            </remarks>
            <example>10</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockReadDto">
            <summary>
            Data Transfer Object returned when retrieving stock details, including the related book title.
            Contains the current quantity and availability status.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.StockId">
            <summary>
            Gets or sets the unique identifier of the stock entry.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.BookId">
            <summary>
            Gets or sets the identifier of the book associated with this stock entry.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.BookTitle">
            <summary>
            Gets or sets the title of the book associated with this stock entry.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.Quantity">
            <summary>
            Gets or sets the current quantity available in stock.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.IsAvailable">
            <summary>
            Gets or sets a value indicating whether at least one copy is currently available.
            </summary>
            <example>true</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockUpdateDto">
            <summary>
            Data Transfer Object used to update existing stock information.
            Contains all fields that can be modified on a stock record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.StockId">
            <summary>
            Gets or sets the unique identifier of the stock entry to update.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.BookId">
            <summary>
            Gets or sets the identifier of the book associated with this stock entry.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.Quantity">
            <summary>
            Gets or sets the updated quantity available in stock.
            </summary>
            <remarks>
            Must be zero or a positive integer.
            </remarks>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.IsAvailable">
            <summary>
            Gets or sets a value indicating whether at least one copy is currently available.
            </summary>
            <example>true</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.TagCreateDto">
            <summary>
            Data Transfer Object used to create a new tag.
            Contains the name of the tag to be added to the system.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagCreateDto.Name">
            <summary>
            Gets or sets the name of the tag.
            </summary>
            <remarks>
            Must be between 1 and 50 characters.
            </remarks>
            <example>Classic</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.TagReadDto">
            <summary>
            Data Transfer Object returned when retrieving tag information.
            Contains the unique identifier and name of the tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagReadDto.TagId">
            <summary>
            Gets or sets the unique identifier of the tag.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagReadDto.Name">
            <summary>
            Gets or sets the name of the tag.
            </summary>
            <example>Classic</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.TagUpdateDto">
            <summary>
            Data Transfer Object used to update an existing tag.
            Contains the identifier and the new name for the tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagUpdateDto.TagId">
            <summary>
            Gets or sets the unique identifier of the tag to update.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagUpdateDto.Name">
            <summary>
            Gets or sets the updated name of the tag.
            </summary>
            <remarks>
            Must be between 1 and 50 characters.
            </remarks>
            <example>Classic</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserCreateDto">
            <summary>
            Data Transfer Object used by administrators or librarians to manually create a new user account.
            Contains all fields required for user creation, with optional address and phone.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.FirstName">
            <summary>
            Gets or sets the given name of the user.
            </summary>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.LastName">
            <summary>
            Gets or sets the family name of the user.
            </summary>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Email">
            <summary>
            Gets or sets the email address for the new user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Password">
            <summary>
            Gets or sets the initial password for the new user account.
            </summary>
            <remarks>
            Must be between 6 and 100 characters.
            </remarks>
            <example>P@ssw0rd!</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Address1">
            <summary>
            Gets or sets the primary address line of the user (optional).
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Address2">
            <summary>
            Gets or sets the secondary address line of the user, if any (optional).
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Phone">
            <summary>
            Gets or sets the phone number of the user (optional).
            </summary>
            <remarks>
            Must be a valid phone number.
            </remarks>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.DateOfBirth">
            <summary>
            Gets or sets the date of birth of the user (optional).
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Role">
            <summary>
            Gets or sets the role assigned to the new user.
            </summary>
            <remarks>
            Must be one of the defined roles: User, Librarian, Admin.
            </remarks>
            <example>User</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserReadDto">
            <summary>
            Data Transfer Object returned when retrieving user account information.
            Contains identifier, personal details, assigned role, and profile data.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.UserId">
            <summary>
            Gets or sets the unique identifier of the user.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.FirstName">
            <summary>
            Gets or sets the given name of the user.
            </summary>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.LastName">
            <summary>
            Gets or sets the family name of the user.
            </summary>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Email">
            <summary>
            Gets or sets the email address of the user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Role">
            <summary>
            Gets or sets the role assigned to the user.
            </summary>
            <remarks>
            Possible values: User, Librarian, Admin.
            </remarks>
            <example>User</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Address1">
            <summary>
            Gets or sets the primary address line of the user.
            </summary>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Address2">
            <summary>
            Gets or sets the secondary address line of the user, if any.
            </summary>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Phone">
            <summary>
            Gets or sets the phone number of the user.
            </summary>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.DateOfBirth">
            <summary>
            Gets or sets the date of birth of the user, if provided.
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.ProfileImagePath">
            <summary>
            Gets or sets the profile image path or URL of the user, if provided.
            </summary>
            <example>https://cdn.example.com/u/42/profile.png</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.FavoriteGenreIds">
            <summary>
            Gets or sets the list of preferred genre identifiers for the user.
            </summary>
            <example>[1, 3, 7]</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserRoleUpdateDto">
            <summary>
            Data Transfer Object used to update a user's role.
            Contains the new role assignment for an existing user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserRoleUpdateDto.Role">
            <summary>
            Gets or sets the new role to assign to the user.
            </summary>
            <remarks>
            Must be one of the defined roles: User, Librarian, Admin.
            </remarks>
            <example>Admin</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserUpdateDto">
            <summary>
            Data Transfer Object used to update an existing user's personal details.
            Contains editable fields such as name, email, address, phone, and date of birth.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.FirstName">
            <summary>
            Gets or sets the given name of the user.
            </summary>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.LastName">
            <summary>
            Gets or sets the family name of the user.
            </summary>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.Email">
            <summary>
            Gets or sets the email address of the user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.Phone">
            <summary>
            Gets or sets the phone number of the user (optional).
            </summary>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.Address1">
            <summary>
            Gets or sets the primary address line of the user (optional).
            </summary>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.Address2">
            <summary>
            Gets or sets the secondary address line of the user, if any (optional).
            </summary>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserUpdateDto.DateOfBirth">
            <summary>
            Gets or sets the date of birth of the user (optional).
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ZoneCreateDto">
            <summary>
            Data Transfer Object used to create a new library zone.
            Contains the zone name, floor number, aisle code, and optional description.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.Name">
            <summary>
            Gets or sets the human-readable name of the zone.
            </summary>
            <example>Archives</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.FloorNumber">
            <summary>
            Gets or sets the floor number where the zone is located.
            </summary>
            <remarks>
            Value must be between 0 and 100.
            </remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.AisleCode">
            <summary>
            Gets or sets the code of the aisle for quick identification.
            </summary>
            <remarks>
            Must be between 1 and 5 characters.
            </remarks>
            <example>A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.Description">
            <summary>
            Gets or sets the optional description of the zone (e.g., thematic section).
            </summary>
            <remarks>
            Maximum length of 200 characters. May be null if not provided.
            </remarks>
            <example>Children’s literature and picture books</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ZoneReadDto">
            <summary>
            Data Transfer Object returned when retrieving library zone information.
            Contains the ID, name, floor, aisle, and optional description details.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.ZoneId">
            <summary>
            Gets or sets the unique identifier of the zone.
            </summary>
            <example>4</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.Name">
            <summary>
            Gets or sets the human-readable name of the zone.
            </summary>
            <example>Archives</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.FloorNumber">
            <summary>
            Gets or sets the floor number where the zone is located.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.AisleCode">
            <summary>
            Gets or sets the code of the aisle for quick identification.
            </summary>
            <example>A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.Description">
            <summary>
            Gets or sets the optional description of the zone (e.g., thematic section).
            </summary>
            <remarks>
            May be null if no description was provided.
            </remarks>
            <example>Children’s literature and picture books</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ZoneUpdateDto">
            <summary>
            Data Transfer Object used to update an existing library zone.
            Contains the fields that can be modified on a zone record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.ZoneId">
            <summary>
            Gets or sets the unique identifier of the zone to update.
            </summary>
            <example>4</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.Name">
            <summary>
            Gets or sets the updated human-readable name of the zone.
            </summary>
            <remarks>
            Must be between 1 and 100 characters.
            </remarks>
            <example>Main Hall</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.FloorNumber">
            <summary>
            Gets or sets the updated floor number where the zone is located.
            </summary>
            <remarks>
            Value must be between 0 and 100.
            </remarks>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.AisleCode">
            <summary>
            Gets or sets the updated code of the aisle for quick identification.
            </summary>
            <remarks>
            Must be between 1 and 5 characters.
            </remarks>
            <example>B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.Description">
            <summary>
            Gets or sets the updated optional description of the zone (e.g., thematic section).
            </summary>
            <remarks>
            Maximum length of 200 characters. May be null if not provided.
            </remarks>
            <example>Historical archives section</example>
        </member>
        <member name="T:BackendBiblioMate.Helpers.PagedResult`1">
            <summary>
            Represents a paged result set, including both the items and pagination metadata.
            Useful for returning paginated results from repositories or API endpoints.
            </summary>
            <typeparam name="T">The type of items contained in the paginated result.</typeparam>
        </member>
        <member name="M:BackendBiblioMate.Helpers.PagedResult`1.Create(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int64)">
            <summary>
            Factory method to create a new <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/>.
            </summary>
            <param name="items">The collection of items for the current page.</param>
            <param name="pageNumber">The index of the current page (1-based).</param>
            <param name="pageSize">The maximum number of items per page.</param>
            <param name="totalCount">The total number of items in the full data set.</param>
            <returns>A new <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="pageNumber"/> or <paramref name="pageSize"/> are less than 1,
            or if <paramref name="totalCount"/> is negative.
            </exception>
        </member>
        <member name="P:BackendBiblioMate.Helpers.PagedResult`1.PageNumber">
            <summary>
            Gets the current page index (1-based).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Helpers.PagedResult`1.PageSize">
            <summary>
            Gets the maximum number of items per page.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Helpers.PagedResult`1.TotalCount">
            <summary>
            Gets the total number of items in the full queryable data set.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Helpers.PagedResult`1.TotalPages">
            <summary>
            Gets the total number of pages based on <see cref="P:BackendBiblioMate.Helpers.PagedResult`1.TotalCount"/> and <see cref="P:BackendBiblioMate.Helpers.PagedResult`1.PageSize"/>.
            Returns <c>0</c> if <see cref="P:BackendBiblioMate.Helpers.PagedResult`1.PageSize"/> is invalid.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Helpers.PagedResult`1.Items">
            <summary>
            Gets the items contained in the current page.
            Defaults to an empty collection if none are provided.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Helpers.PagedResultExtensions">
            <summary>
            Provides extension methods for transforming queryable collections into paginated results.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Helpers.PagedResultExtensions.ToPagedResultAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/> from the given queryable source.
            Falls back to synchronous LINQ operations when the underlying provider does not support async queries.
            </summary>
            <typeparam name="T">The type of items in the queryable source.</typeparam>
            <param name="source">The queryable data source to paginate.</param>
            <param name="pageNumber">The index of the page to retrieve (1-based).</param>
            <param name="pageSize">The maximum number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/> containing the requested page of items.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="pageNumber"/> or <paramref name="pageSize"/> are less than 1.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Helpers.SwaggerDefaultValues">
            <summary>
            Swagger operation filter that fills in default values for versioned routes
            and ensures unique operation identifiers for the Swagger/OpenAPI specification.
            </summary>
            <remarks>
            - Replaces the <c>{version}</c> placeholder in route parameters with the actual API version.
            - Ensures that each <see cref="T:Microsoft.OpenApi.Models.OpenApiOperation"/> has a unique <c>operationId</c>,
              preventing collisions in Swagger UI and client code generation.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Helpers.SwaggerDefaultValues.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies default values to the given Swagger operation.
            </summary>
            <param name="operation">The Swagger <see cref="T:Microsoft.OpenApi.Models.OpenApiOperation"/> being processed.</param>
            <param name="context">The current <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext"/> containing metadata about the API action.</param>
            <remarks>
            This method will:
            <list type="bullet">
            <item><description>Generate a unique <c>operationId</c> using the declaring type and method name.</description></item>
            <item><description>Mark the <c>version</c> parameter as required and give it a default value.</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:BackendBiblioMate.Helpers.TokenHelper">
            <summary>
            Provides extension methods for working with <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instances,
            typically representing authenticated users from JWT tokens.
            </summary>
            <remarks>
            This helper centralizes logic for extracting the user identifier from claims,
            avoiding duplication and ensuring consistent error handling across the codebase.
            </remarks>
        </member>
        <member name="F:BackendBiblioMate.Helpers.TokenHelper.UserIdClaimType">
            <summary>
            The claim type used to store the unique user identifier.
            Defaults to <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Helpers.TokenHelper.TryGetUserId(System.Security.Claims.ClaimsPrincipal,System.Int32@)">
            <summary>
            Attempts to safely parse the user identifier from the given claims principal.
            </summary>
            <param name="user">
            The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance containing authentication claims
            (for example, extracted from a JWT or cookie).
            </param>
            <param name="userId">
            When this method returns, contains the parsed user identifier if successful;
            otherwise <c>0</c>.
            </param>
            <returns>
            <c>true</c> if the user ID claim was found and parsed successfully; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="user"/> is <c>null</c>.
            </exception>
            <example>
            Example usage in a controller:
            <code>
            if (User.TryGetUserId(out var userId))
            {
                // Use userId for query
            }
            else
            {
                return Unauthorized();
            }
            </code>
            </example>
        </member>
        <member name="M:BackendBiblioMate.Helpers.TokenHelper.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Retrieves the user identifier from the given claims principal.
            </summary>
            <param name="user">
            The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance containing authentication claims
            (for example, extracted from a JWT or cookie).
            </param>
            <returns>
            The user identifier parsed from the <c>NameIdentifier</c> claim.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="user"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <c>NameIdentifier</c> claim is missing from <paramref name="user"/>.
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the claim value exists but cannot be parsed as a valid integer.
            </exception>
            <example>
            Example usage in a controller:
            <code>
            var userId = User.GetUserId(); // Will throw if claim is missing or invalid
            var reports = await _reportService.GetByUserIdAsync(userId, ct);
            </code>
            </example>
        </member>
        <member name="T:BackendBiblioMate.Hubs.NotificationHub">
            <summary>
            SignalR Hub responsible for handling real-time notification delivery.
            </summary>
            <remarks>
            This hub allows the server to broadcast messages to:
            <list type="bullet">
              <item><description>All connected clients</description></item>
              <item><description>A specific authenticated user</description></item>
              <item><description>A logical group of clients (e.g., librarians, admins, or a book club)</description></item>
            </list>
            It also exposes helper methods to join and leave groups dynamically.
            
            Clients must implement a handler for <see cref="F:BackendBiblioMate.Hubs.NotificationHub.ReceiveMethod"/> to process incoming notifications.
            Example in JavaScript:
            <code>
            connection.on("ReceiveNotification", message => {
                console.log("New notification:", message);
            });
            </code>
            </remarks>
        </member>
        <member name="F:BackendBiblioMate.Hubs.NotificationHub.ReceiveMethod">
            <summary>
            Name of the client-side method that receives notifications.
            Clients must subscribe to this method to process notifications.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.SendNotificationToAll(System.String)">
            <summary>
            Broadcasts a notification to all connected clients.
            </summary>
            <param name="message">The notification payload (e.g., text message, JSON string).</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous broadcast operation.</returns>
            <example>
            Server usage:
            <code>
            await _hubContext.Clients.All.SendAsync(NotificationHub.ReceiveMethod, "System maintenance at 10 PM.");
            </code>
            </example>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.SendNotificationToUser(System.String,System.String)">
            <summary>
            Sends a notification to a single user.
            </summary>
            <param name="userId">
            The identifier of the target user (must match <c>Context.UserIdentifier</c> on the client).
            </param>
            <param name="message">The notification payload to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous send operation.</returns>
            <example>
            Server usage:
            <code>
            await _hubContext.Clients.User(userId).SendAsync(NotificationHub.ReceiveMethod, "You have a new loan.");
            </code>
            </example>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.SendNotificationToGroup(System.String,System.String)">
            <summary>
            Sends a notification to all clients belonging to a specific group.
            </summary>
            <param name="groupName">The logical group name (e.g., "Admins" or "Zone42").</param>
            <param name="message">The notification payload to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous send operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.JoinGroup(System.String)">
            <summary>
            Adds the current connection to a specified group.
            Useful for organizing users into roles, zones, or custom topics.
            </summary>
            <param name="groupName">The group name to join.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous group-add operation.</returns>
            <remarks>
            Groups are dynamic and do not need prior registration.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.LeaveGroup(System.String)">
            <summary>
            Removes the current connection from a specified group.
            </summary>
            <param name="groupName">The group name to leave.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous group-remove operation.</returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IAuthorService">
            <summary>
            Defines business logic for managing <see cref="!:Author"/> entities.
            Provides CRUD operations and additional helpers such as search and ensure.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all authors in the system.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific author by its identifier.
            </summary>
            <param name="id">The identifier of the author.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description>The <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> if found, otherwise <c>null</c>.</description></item>
              <item><description>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> if an error occurred (e.g. NotFound), otherwise <c>null</c>.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.CreateAsync(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new author record.
            </summary>
            <param name="dto">The author creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description>The created <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/>.</description></item>
              <item><description>A <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> including a Location header pointing to the new resource.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing author.
            </summary>
            <param name="id">The identifier of the author to update.</param>
            <param name="dto">The updated author data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing <c>true</c> if the update succeeded, or <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an author by its identifier.
            </summary>
            <param name="id">The identifier of the author to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing <c>true</c> if the deletion succeeded, or <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches authors by a partial name or keyword.
            </summary>
            <param name="search">The search term (can be <c>null</c> to retrieve all).</param>
            <param name="take">The maximum number of results to return.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.EnsureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Ensures an author with the given name exists.
            If the author does not exist, creates it.
            </summary>
            <param name="name">The name of the author to find or create.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description>The matching or newly created <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/>.</description></item>
              <item><description><c>true</c> if the author was created, <c>false</c> if it already existed.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IAuthService">
            <summary>
            Defines authentication and user account management operations.
            Includes registration, login, email confirmation, password reset,
            user approval, and related workflows.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.RegisterAsync(BackendBiblioMate.DTOs.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="dto">Registration data transfer object containing user details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if registration succeeded; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>BadRequest</c>, <c>Created</c>).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.LoginAsync(BackendBiblioMate.DTOs.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user with credentials and issues a JWT or equivalent token.
            </summary>
            <param name="dto">Login data transfer object with email/username and password.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if credentials are valid; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>Unauthorized</c>, <c>Ok</c> with token).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ConfirmEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Confirms a user’s email address using a confirmation token.
            </summary>
            <param name="token">The unique email confirmation token.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if email confirmation succeeded; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>BadRequest</c>, <c>Ok</c>).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.RequestPasswordResetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a password reset process by sending a reset link to the given email.
            </summary>
            <param name="email">The user’s registered email address.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if the reset email was sent; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>NotFound</c>, <c>Ok</c>).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ResetPasswordAsync(BackendBiblioMate.DTOs.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets the user’s password using a reset token and new password.
            </summary>
            <param name="dto">Data transfer object containing the token and the new password.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if the password reset succeeded; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>BadRequest</c>, <c>Ok</c>).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ApproveUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Approves a newly registered user, enabling their account for login.
            </summary>
            <param name="userId">The identifier of the user to approve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if the user was approved; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>NotFound</c>, <c>NoContent</c>).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ResendConfirmationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resends an email confirmation message to the specified address.
            </summary>
            <param name="email">The user’s email address.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if the confirmation email was resent; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>NotFound</c>, <c>Ok</c>).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.RejectUserAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Rejects a pending user account.
            </summary>
            <param name="userId">The identifier of the user to reject.</param>
            <param name="reason">Optional reason for rejection.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task producing a tuple:
            <list type="bullet">
              <item><description><c>Success</c>: <c>true</c> if the user was rejected; otherwise <c>false</c>.</description></item>
              <item><description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IBookService">
            <summary>
            Defines operations for querying, retrieving and mutating book data,
            including paging, sorting, ETag support, and search activity logging.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.GetPagedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a paged list of books, sorted and projected to <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>,
            including an ETag value and an optional 304 Not Modified result.
            </summary>
            <param name="pageNumber">Page number (1-based) to retrieve.</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="sortBy">Field name to sort by (e.g. "Title", "PublicationYear").</param>
            <param name="ascending"><c>true</c> for ascending order; <c>false</c> for descending.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding a tuple:
            <list type="bullet">
              <item><description>A <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/> with the requested page.</description></item>
              <item><description>A <c>string</c> ETag value for the page.</description></item>
              <item><description>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> with <c>304 Not Modified</c> if unchanged; otherwise <c>null</c>.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a single book by its identifier.
            </summary>
            <param name="id">Identifier of the book to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding the <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.CreateAsync(BackendBiblioMate.DTOs.BookCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new book record.
            </summary>
            <param name="dto">Data transfer object containing book properties.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding the created <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.BookUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing book.
            </summary>
            <param name="id">Identifier of the book to update.</param>
            <param name="dto">Data transfer object with updated values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding <c>true</c> if the update succeeded; <c>false</c> if the book was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a book by its identifier.
            </summary>
            <param name="id">Identifier of the book to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding <c>true</c> if deletion succeeded; <c>false</c> if the book was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.SearchAsync(BackendBiblioMate.DTOs.BookSearchDto,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Performs a filtered search over books based on optional criteria.
            </summary>
            <param name="dto">Search criteria DTO (title, author, genre, etc.).</param>
            <param name="userId">Optional identifier of the performing user, used for logging.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding the collection of matching <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> items.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.GetAllGenresAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of all distinct book genres.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding a read-only list of genre names.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IEditorService">
            <summary>
            Defines CRUD and utility operations for <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> entities,
            providing consistent service responses.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all editors.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding all <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> items.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves an editor by its identifier.
            </summary>
            <param name="id">The identifier of the editor to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding a tuple:
            <list type="bullet">
              <item><description>The <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> if found; otherwise <c>null</c>.</description></item>
              <item><description>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> error response (e.g. <c>NotFound</c>), or <c>null</c> if successful.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.CreateAsync(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new editor.
            </summary>
            <param name="dto">Data transfer object containing new editor details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding a tuple:
            <list type="bullet">
              <item><description>The created <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/>.</description></item>
              <item><description>A <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> pointing to the new resource.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.EditorUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing editor.
            </summary>
            <param name="id">Identifier of the editor to update.</param>
            <param name="dto">Data transfer object with updated editor values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding <c>true</c> if the update succeeded; <c>false</c> if the editor was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an editor by its identifier.
            </summary>
            <param name="id">Identifier of the editor to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding <c>true</c> if the deletion succeeded; <c>false</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches editors by name.
            </summary>
            <param name="search">Optional search term to match editor names.</param>
            <param name="take">Maximum number of results to return.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding the matching <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> items.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.EnsureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Ensures that an editor exists with the given name.
            If the editor does not exist, creates it.
            </summary>
            <param name="name">The name of the editor to ensure.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A task yielding a tuple:
            <list type="bullet">
              <item><description>The existing or newly created <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/>.</description></item>
              <item><description><c>true</c> if the editor was created; <c>false</c> if it already existed.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IEmailService">
            <summary>
            Defines a contract for sending email messages,
            typically used for account verification, password reset,
            notifications, and system alerts.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEmailService.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            Sends an email message asynchronously to a single recipient.
            </summary>
            <param name="toEmail">
            The recipient’s email address. Must be a valid email format.
            </param>
            <param name="subject">
            The subject line of the email.
            </param>
            <param name="htmlContent">
            The HTML body content of the email.  
            Supports inline formatting and links.
            </param>
            <returns>
            A task that completes when the email has been sent.  
            May throw exceptions if delivery fails (e.g. SMTP connection issues).
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IGenreService">
            <summary>
            Defines CRUD operations for <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/> entities,
            including search and ensure functionality for maintaining genre consistency.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all genres.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A collection of <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/> items representing all genres.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a genre by its identifier.
            </summary>
            <param name="id">The identifier of the genre.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
              <item><description><see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/> if found; otherwise <c>null</c>.</description></item>
              <item><description>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> representing an error response (e.g. <c>NotFound</c>), or <c>null</c> on success.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.CreateAsync(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new genre.
            </summary>
            <param name="dto">The DTO containing the genre’s creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
              <item><description>The created <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/>.</description></item>
              <item><description>A <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> with the location header pointing to the new resource.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.GenreUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing genre.
            </summary>
            <param name="id">The identifier of the genre to update.</param>
            <param name="dto">The DTO containing updated values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update succeeded; <c>false</c> if the genre does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a genre by its identifier.
            </summary>
            <param name="id">The identifier of the genre to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion succeeded; <c>false</c> if the genre does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Performs a search for genres by name.
            </summary>
            <param name="search">Optional search string to filter by name.</param>
            <param name="take">Maximum number of results to return.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A collection of matching <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/> items.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IGenreService.EnsureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Ensures that a genre with the given name exists.
            Creates it if it does not already exist.
            </summary>
            <param name="name">The name of the genre to check or create.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
              <item><description>The existing or newly created <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/>.</description></item>
              <item><description><c>true</c> if the genre was created; <c>false</c> if it already existed.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IHistoryService">
            <summary>
            Defines operations for recording and retrieving user history events,
            such as book loans, returns, and reservations.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IHistoryService.LogEventAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Records a new history event for a user.
            </summary>
            <param name="userId">
            Identifier of the user who generated the event.
            </param>
            <param name="eventType">
            Type or name of the event (e.g., <c>"Loan"</c>, <c>"Return"</c>, <c>"Reservation"</c>).
            </param>
            <param name="loanId">
            Optional identifier of the related loan, if the event is loan-related.
            </param>
            <param name="reservationId">
            Optional identifier of the related reservation, if the event is reservation-related.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation
            of persisting the history event.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IHistoryService.GetHistoryForUserAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paginated list of history events for a specific user.
            </summary>
            <param name="userId">
            Identifier of the user whose history is requested.
            </param>
            <param name="page">
            Page number (1-based). Defaults to <c>1</c>.
            </param>
            <param name="pageSize">
            Number of events per page. Defaults to <c>20</c>.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed,
            yields a <see cref="T:System.Collections.Generic.List`1"/> containing
            the requested page of history events in chronological order.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ILoanService">
            <summary>
            Defines business operations related to book loans,
            including creation, return handling, retrieval, update, and deletion.
            </summary>
            <remarks>
            This contract abstracts the loan domain logic from the persistence layer.
            It enforces validation rules (e.g., loan policies, stock availability) and
            ensures consistent domain behavior across implementations.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.CreateAsync(BackendBiblioMate.DTOs.LoanCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new loan for a given book and user.
            </summary>
            <param name="dto">
            Data transfer object containing loan details (user identifier, book identifier, etc.).
            </param>
            <param name="cancellationToken">
            Token to observe for cancellation requests.
            </param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> where:
            <list type="bullet">
              <item><description><c>Value</c>: <see cref="T:BackendBiblioMate.DTOs.LoanCreatedResult"/> with the due date if successful.</description></item>
              <item><description><c>Error</c>: a descriptive error message if creation fails (e.g., invalid user, no stock available).</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.ReturnAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks an existing loan as returned.
            Updates stock availability and may trigger reservation notifications.
            </summary>
            <param name="loanId">The unique identifier of the loan to return.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> where:
            <list type="bullet">
              <item><description><c>Value</c>: <see cref="T:BackendBiblioMate.DTOs.LoanReturnedResult"/> with fine and notification status if successful.</description></item>
              <item><description><c>Error</c>: an error message if the loan was not found or already returned.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all existing loans in the system.
            </summary>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> where:
            <list type="bullet">
              <item><description><c>Value</c>: an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all loans.</description></item>
              <item><description><c>Error</c>: an error message if retrieval fails.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a loan by its unique identifier.
            </summary>
            <param name="loanId">The identifier of the loan to retrieve.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> where:
            <list type="bullet">
              <item><description><c>Value</c>: the <see cref="T:BackendBiblioMate.Models.Loan"/> if found.</description></item>
              <item><description><c>Error</c>: an error message if the loan was not found.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.LoanUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing loan (e.g., changes to due date).
            </summary>
            <param name="loanId">The identifier of the loan to update.</param>
            <param name="dto">Data transfer object containing updated loan details.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> where:
            <list type="bullet">
              <item><description><c>Value</c>: the updated <see cref="T:BackendBiblioMate.Models.Loan"/> if successful.</description></item>
              <item><description><c>Error</c>: an error message if the loan could not be updated.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Permanently deletes a loan by its identifier.
            </summary>
            <param name="loanId">The identifier of the loan to delete.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> where:
            <list type="bullet">
              <item><description><c>Value</c>: <c>true</c> if the loan was successfully deleted.</description></item>
              <item><description><c>Error</c>: an error message if the loan was not found or could not be deleted.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.Result`2">
            <summary>
            Represents the result of an operation that can either succeed with a value
            or fail with an error.
            </summary>
            <typeparam name="TSuccess">Type of the value returned on success.</typeparam>
            <typeparam name="TError">Type of the error returned on failure.</typeparam>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.Result`2.Value">
            <summary>
            Gets the value if the operation succeeded; otherwise <c>default</c>.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.Result`2.Error">
            <summary>
            Gets the error if the operation failed; otherwise <c>default</c>.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.Result`2.IsError">
            <summary>
            Gets a value indicating whether this result represents an error.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.Result`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> class.
            </summary>
            <param name="value">The success value (if any).</param>
            <param name="error">The error value (if any).</param>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.Result`2.Ok(`0)">
            <summary>
            Creates a successful result containing the specified value.
            </summary>
            <param name="value">The success value.</param>
            <returns>A new <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> in success state.</returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.Result`2.Fail(`1)">
            <summary>
            Creates a failed result containing the specified error.
            </summary>
            <param name="error">The error value.</param>
            <returns>A new <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> in error state.</returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ILocationService">
            <summary>
            Defines operations for retrieving and ensuring library location data,
            including floors, aisles, shelves, and shelf levels.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILocationService.GetFloorsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all floors in the library.
            </summary>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing all floor metadata.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILocationService.GetAislesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all aisles for a specific floor.
            </summary>
            <param name="floorNumber">The floor number where aisles are located.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing aisle metadata for the specified floor.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILocationService.GetShelvesAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves in a given aisle on a specific floor.
            </summary>
            <param name="floorNumber">The floor number containing the aisle.</param>
            <param name="aisleCode">The unique code of the aisle.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing shelf metadata for the specified aisle.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILocationService.GetLevelsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelf levels for a given shelf.
            </summary>
            <param name="shelfId">Identifier of the shelf.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing all levels for the given shelf.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILocationService.EnsureAsync(BackendBiblioMate.DTOs.LocationEnsureDto,System.Threading.CancellationToken)">
            <summary>
            Ensures that a complete location hierarchy exists
            (Zone → Shelf → ShelfLevel).
            Creates missing entities if they do not already exist
            and returns the full resolved location.
            </summary>
            <param name="dto">Location definition DTO specifying floor, aisle, shelf, and level.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding the fully created or resolved location.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IMongoLogService">
            <summary>
            Defines CRUD operations for managing <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> entries
            stored in MongoDB.  
            Provides methods for inserting new logs, retrieving all logs,
            and fetching a specific log by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IMongoLogService.AddAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log document into the collection.
            </summary>
            <param name="log">
            The <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> instance containing
            the notification details to be persisted.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the log has been successfully inserted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IMongoLogService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log documents, ordered by their
            <see cref="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt"/> property in descending order.
            </summary>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding a <see cref="T:System.Collections.Generic.List`1"/>
            containing all log entries, with the most recent first.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IMongoLogService.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific notification log document by its unique identifier.
            </summary>
            <param name="id">
            The unique string identifier of the notification log document
            (typically a MongoDB ObjectId).
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding the matching
            <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> if found;
            otherwise <c>null</c>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.INotificationLogCollection">
            <summary>
            Abstraction over the underlying MongoDB collection 
            responsible for storing <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> entries.
            Provides low-level data access methods that are typically wrapped by higher-level services.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogCollection.InsertOneAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log document into the collection.
            </summary>
            <param name="doc">
            The <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> instance to insert.
            This parameter must not be <c>null</c>.
            </param>
            <param name="cancellationToken">
            A token used to observe cancellation requests while the operation is executing.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes once the document has been persisted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogCollection.GetAllSortedAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification logs, ordered by 
            <see cref="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt"/> in descending order 
            (most recent first).
            </summary>
            <param name="cancellationToken">
            A token used to observe cancellation requests while the operation is executing.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a 
            <see cref="T:System.Collections.Generic.List`1"/> containing all log entries.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogCollection.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a notification log document by its unique identifier.
            </summary>
            <param name="id">
            The unique identifier of the log entry (typically the MongoDB ObjectId as a string).
            </param>
            <param name="cancellationToken">
            A token used to observe cancellation requests while the operation is executing.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding the matching 
            <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.INotificationLogService">
            <summary>
            High-level service contract for logging and retrieving notification events.
            This service abstracts persistence details and ensures that all notification-related
            events are recorded consistently.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogService.LogAsync(System.Int32,BackendBiblioMate.Models.Enums.NotificationType,System.String,System.Threading.CancellationToken)">
            <summary>
            Persists a new notification log entry for a user.
            </summary>
            <param name="userId">
            The identifier of the user who received the notification. 
            This must correspond to an existing user in the system.
            </param>
            <param name="type">
            </param>
            <param name="message">
            The content of the notification message to store in the log.
            </param>
            <param name="cancellationToken">
            A token to observe cancellation requests during the operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes once the log entry has been persisted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification logs associated with a specific user,
            ordered by <see cref="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt"/> in descending order (newest first).
            </summary>
            <param name="userId">
            The identifier of the user whose logs should be retrieved.
            </param>
            <param name="cancellationToken">
            A token to observe cancellation requests during the operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a 
            <see cref="T:System.Collections.Generic.List`1"/> containing the user’s notification history.
            The list will be empty if no logs exist for the user.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.INotificationService">
            <summary>
            High-level contract for sending notifications to users.
            This service abstracts the delivery mechanism (e.g. email, SMS, in-app, SignalR)
            and ensures messages are dispatched reliably.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationService.NotifyUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification message to a specific user.
            The implementation may decide the delivery channel(s)
            based on user preferences or system configuration.
            </summary>
            <param name="userId">
            The identifier of the user to notify.
            Must correspond to a valid user in the system.
            </param>
            <param name="message">
            The notification content to send.
            This may be plain text or a structured message, 
            depending on the implementation.
            </param>
            <param name="cancellationToken">
            A token used to observe cancellation requests during the operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous send operation.
            The task completes successfully once the notification has been dispatched,
            or faults if delivery fails.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IRecommendationService">
            <summary>
            Defines operations to generate and retrieve personalized book recommendations for users.
            Recommendations are typically based on user preferences such as favorite genres,
            reading history, or system-wide popularity.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IRecommendationService.GetRecommendationsForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a curated list of recommended books for the specified user.
            The recommendation algorithm selects up to 10 titles that best match
            the user's preferred genres or other configured criteria.
            </summary>
            <param name="userId">
            The identifier of the user for whom to generate recommendations.
            Must correspond to a valid user in the system.
            </param>
            <param name="cancellationToken">
            A token to observe cancellation requests during the operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed successfully, yields a
            <see cref="T:System.Collections.Generic.List`1"/> containing up to ten recommended books.
            The list may be empty if no suitable matches are found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IReportService">
            <summary>
            Defines operations for managing analytical reports, including
            creation, retrieval, update, and deletion.
            Reports typically contain computed statistics derived from loans,
            books, and other related entities.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports across all users.
            Intended primarily for administrative or librarian use.
            </summary>
            <param name="cancellationToken">
            A token to observe while waiting for the task to complete.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a
            <see cref="T:System.Collections.Generic.List`1"/> containing all reports.
            The list may be empty if no reports exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.GetAllForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports created by a specific user.
            </summary>
            <param name="userId">The identifier of the user whose reports are requested.</param>
            <param name="cancellationToken">
            A token to observe while waiting for the task to complete.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding a
            <see cref="T:System.Collections.Generic.List`1"/> containing all reports
            owned by the specified user. The list may be empty if the
            user has not created any reports.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single report by its unique identifier.
            </summary>
            <param name="reportId">The identifier of the report to retrieve.</param>
            <param name="cancellationToken">
            A token to observe while waiting for the task to complete.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding the matching
            <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>, or <c>null</c> if no report
            with the specified identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.CreateAsync(BackendBiblioMate.DTOs.ReportCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates and persists a new analytical report for the specified user.
            The report content is automatically computed from loan and book data.
            </summary>
            <param name="dto">
            The <see cref="T:BackendBiblioMate.DTOs.ReportCreateDto"/> containing metadata such as the report <c>Title</c>.
            </param>
            <param name="userId">The identifier of the user requesting the report.</param>
            <param name="cancellationToken">
            A token to observe while waiting for the task to complete.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding the created <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>,
            including the computed statistics and metadata.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.UpdateAsync(BackendBiblioMate.DTOs.ReportUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing report's title and/or content.
            </summary>
            <param name="dto">
            The <see cref="T:BackendBiblioMate.DTOs.ReportUpdateDto"/> containing updated values.
            </param>
            <param name="cancellationToken">
            A token to observe while waiting for the task to complete.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no report with the specified identifier was found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Permanently deletes a report by its identifier.
            </summary>
            <param name="reportId">The identifier of the report to delete.</param>
            <param name="cancellationToken">
            A token to observe while waiting for the task to complete.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the report was deleted;
            <c>false</c> if the report was not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IReservationCleanupService">
            <summary>
            Defines a service responsible for cleaning up expired reservations.
            Expired reservations are those that remain unclaimed after the allowed
            availability window (e.g., 48 hours after notification).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationCleanupService.CleanupExpiredReservationsAsync(System.Threading.CancellationToken)">
            <summary>
            Removes all reservations that have exceeded their expiration window,
            restores the associated stock to availability, logs each expiration
            event for audit purposes, and returns the number of reservations removed.
            </summary>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the number of expired
            reservations successfully removed from the system.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IReservationService">
            <summary>
            Defines operations for managing book reservations,
            including creation, retrieval, update, and deletion.
            Enforces ownership rules and supports librarian/admin access.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reservations in the system.
            Intended for use by Librarians and Admins only.
            </summary>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all reservations.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all active reservations for a given user.
            </summary>
            <param name="userId">The unique identifier of the user.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the user's active reservations.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetPendingForBookAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all pending reservations for a specific book.
            Pending reservations are those waiting to be fulfilled when a copy becomes available.
            </summary>
            <param name="bookId">The unique identifier of the book.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing pending reservations for the book.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a reservation by its identifier.
            </summary>
            <param name="reservationId">The unique identifier of the reservation.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching
            <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.CreateAsync(BackendBiblioMate.DTOs.ReservationCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new reservation for a user.
            </summary>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.ReservationCreateDto"/> containing reservation details.</param>
            <param name="userId">The identifier of the user creating the reservation.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created
            <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> with its identifier and metadata.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.UpdateAsync(BackendBiblioMate.DTOs.ReservationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing reservation.
            </summary>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.ReservationUpdateDto"/> containing updated reservation data.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no reservation with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a reservation by its identifier.
            </summary>
            <param name="reservationId">The unique identifier of the reservation to delete.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no reservation with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ISearchActivityLogService">
            <summary>
            Defines operations for recording and retrieving user search activity logs.
            Used for analytics, personalization, and auditing purposes.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ISearchActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.SearchActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Persists a new search activity log entry into the underlying data store.
            </summary>
            <param name="doc">
            The <see cref="T:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument"/> containing:
            <list type="bullet">
              <item><description><c>UserId</c>: The identifier of the user performing the search.</description></item>
              <item><description><c>QueryText</c>: The search string entered by the user.</description></item>
              <item><description><c>Timestamp</c>: The UTC time at which the search was performed.</description></item>
            </list>
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes once the log entry has been successfully stored.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ISearchActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all search activity logs for a specific user, ordered from most recent to oldest.
            </summary>
            <param name="userId">
            The identifier of the user whose search history is to be retrieved.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the operation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a 
            <see cref="T:System.Collections.Generic.List`1"/> containing the user's search history.
            If the user has no logged searches, an empty list is returned.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IShelfLevelService">
            <summary>
            Defines CRUD and query operations for shelf levels within the library system.
            Shelf levels represent the physical subdivisions (levels/étages) of a shelf.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged list of shelf levels, optionally filtered by a specific shelf.
            </summary>
            <param name="shelfId">
            Optional identifier of the parent shelf. 
            If <c>null</c>, all shelf levels across all shelves are returned.
            </param>
            <param name="page">
            Page index (1-based). Must be greater than or equal to <c>1</c>.
            </param>
            <param name="pageSize">
            Maximum number of items per page. Must be greater than or equal to <c>1</c>.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing the requested shelf levels.
            If no shelf levels match the filter, the result is an empty sequence.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf level by its unique identifier.
            </summary>
            <param name="id">
            Identifier of the shelf level to retrieve.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>,
            or <c>null</c> if no shelf level with the specified identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.CreateAsync(BackendBiblioMate.DTOs.ShelfLevelCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf level within a specified shelf.
            </summary>
            <param name="dto">
            Data transfer object containing details of the new shelf level
            (e.g., label, order/index, parent shelf reference).
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the newly created <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.UpdateAsync(BackendBiblioMate.DTOs.ShelfLevelUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf level.
            </summary>
            <param name="dto">
            Data transfer object containing updated values for the shelf level.
            The identifier inside the DTO must correspond to an existing entity.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no shelf level with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Permanently deletes a shelf level.
            </summary>
            <param name="id">
            Identifier of the shelf level to delete.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no shelf level with the given identifier was found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IShelfService">
            <summary>
            Defines CRUD and query operations for shelves.
            Shelves represent physical storage units within a library zone,
            and can contain multiple shelf levels.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged list of shelves, optionally filtered by zone.
            </summary>
            <param name="zoneId">
            Optional identifier of the parent zone. 
            If <c>null</c>, shelves across all zones are returned.
            </param>
            <param name="page">
            Page index (1-based). Must be greater than or equal to <c>1</c>.
            </param>
            <param name="pageSize">
            Maximum number of items per page. Must be greater than or equal to <c>1</c>.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing the shelves for the requested page.
            If no shelves match the filter, the result is an empty sequence.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf by its unique identifier.
            </summary>
            <param name="id">
            Identifier of the shelf to retrieve.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>,
            or <c>null</c> if no shelf with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.CreateAsync(BackendBiblioMate.DTOs.ShelfCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf within a specified zone.
            </summary>
            <param name="dto">
            Data transfer object containing details of the new shelf
            (e.g., label, code, parent zone reference).
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the newly created <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.UpdateAsync(BackendBiblioMate.DTOs.ShelfUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf.
            </summary>
            <param name="dto">
            Data transfer object containing updated values for the shelf.
            The identifier inside the DTO must correspond to an existing entity.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no shelf with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Permanently deletes a shelf.
            </summary>
            <param name="id">
            Identifier of the shelf to delete.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no shelf with the given identifier was found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IStockService">
            <summary>
            Defines domain operations for managing book stock levels
            and the availability status of a given <see cref="T:BackendBiblioMate.Models.Stock"/>.
            A stock entry represents the number of physical copies
            available for a specific book in the library.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.UpdateAvailability(BackendBiblioMate.Models.Stock)">
            <summary>
            Recalculates and sets the <see cref="P:BackendBiblioMate.Models.Stock.IsAvailable"/> flag
            based on the current <see cref="P:BackendBiblioMate.Models.Stock.Quantity"/>.
            </summary>
            <param name="stock">
            The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to update.
            </param>
            <remarks>
            - If <c>Quantity &gt; 0</c>, <c>IsAvailable</c> is set to <c>true</c>.  
            - Otherwise, <c>IsAvailable</c> is set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.AdjustQuantity(BackendBiblioMate.Models.Stock,System.Int32)">
            <summary>
            Adjusts the stock <see cref="P:BackendBiblioMate.Models.Stock.Quantity"/> by a given amount
            and updates <see cref="P:BackendBiblioMate.Models.Stock.IsAvailable"/> accordingly.
            </summary>
            <param name="stock">
            The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to adjust.
            </param>
            <param name="adjustment">
            The amount to change the quantity by.  
            Use a positive value to add copies, or a negative value to remove copies.  
            </param>
            <remarks>
            Quantity is prevented from going below zero.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.Decrease(BackendBiblioMate.Models.Stock)">
            <summary>
            Decreases the <see cref="P:BackendBiblioMate.Models.Stock.Quantity"/> by one and updates availability.
            </summary>
            <param name="stock">
            The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to decrement.
            </param>
            <remarks>
            If <c>Quantity</c> is already zero, the method should prevent it from going negative.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.Increase(BackendBiblioMate.Models.Stock)">
            <summary>
            Increases the <see cref="P:BackendBiblioMate.Models.Stock.Quantity"/> by one and updates availability.
            </summary>
            <param name="stock">
            The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to increment.
            </param>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ITagService">
            <summary>
            Defines CRUD and query operations for <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> entities.
            Tags are keywords associated with books that allow
            thematic classification, filtering, and advanced search.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all tags in the system.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A collection of <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> representing all tags.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific tag by its identifier.
            </summary>
            <param name="id">The identifier of the tag to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The matching <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.CreateAsync(BackendBiblioMate.DTOs.TagCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new tag.
            </summary>
            <param name="dto">The data transfer object containing tag details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The created <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.UpdateAsync(BackendBiblioMate.DTOs.TagUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing tag.
            </summary>
            <param name="dto">The DTO containing the updated tag values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update succeeded; <c>false</c> if the tag was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a tag by its identifier.
            </summary>
            <param name="id">The identifier of the tag to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion succeeded; <c>false</c> if the tag was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches for tags matching a given term.
            </summary>
            <param name="search">The optional search string (partial match supported).</param>
            <param name="take">The maximum number of results to return.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A collection of <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> that match the search criteria.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ITagService.EnsureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Ensures that a tag with the specified name exists.
            If the tag already exists, returns it; otherwise, creates a new one.
            </summary>
            <param name="name">The name of the tag to find or create.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
              <item><see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> — the existing or newly created tag.</item>
              <item><c>Created</c> — <c>true</c> if the tag was newly created; <c>false</c> if it already existed.</item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IUserActivityLogService">
            <summary>
            Defines operations for recording and retrieving user activity logs.
            These logs capture significant user actions (e.g., login, book search, reservation)
            for audit trails, analytics, and behavior tracking.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.UserActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Records a new user activity log entry in the data store.
            </summary>
            <param name="doc">
            The <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> containing:
            <list type="bullet">
              <item><c>UserId</c> — the identifier of the user.</item>
              <item><c>Action</c> — the type of activity performed (e.g. "Login", "Search").</item>
              <item><c>Details</c> — optional descriptive metadata about the action.</item>
              <item><c>Timestamp</c> — when the action occurred.</item>
            </list>
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the activity has been persisted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all activity logs for a specific user, ordered from most recent to oldest.
            </summary>
            <param name="userId">
            The identifier of the user whose logs are requested.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a list of <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/>,
            sorted by descending <c>Timestamp</c>, representing the user’s activity history.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IUserService">
            <summary>
            Defines operations for managing application users, including
            CRUD actions, role assignment, and profile management.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all registered users in the system.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            representing all users.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single user by its identifier.
            </summary>
            <param name="id">The unique identifier of the user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the corresponding <see cref="T:BackendBiblioMate.DTOs.UserReadDto"/>,
            or <c>null</c> if the user does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.CreateAsync(BackendBiblioMate.DTOs.UserCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new user account.
            </summary>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.UserCreateDto"/> containing user data (email, name, role, etc.).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding the created <see cref="T:BackendBiblioMate.DTOs.UserReadDto"/> entity.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates general information of an existing user (excluding role and password).
            </summary>
            <param name="id">The unique identifier of the user to update.</param>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.UserUpdateDto"/> containing updated information.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the user was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.UpdateRoleAsync(System.Int32,BackendBiblioMate.DTOs.UserRoleUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the role of an existing user (e.g., User → Librarian, Librarian → Admin).
            </summary>
            <param name="id">The unique identifier of the user whose role will be changed.</param>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.UserRoleUpdateDto"/> specifying the new role.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            <c>true</c> if the role update was successful; <c>false</c> if the user was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a user account permanently.
            </summary>
            <param name="id">The unique identifier of the user to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            <c>true</c> if deletion succeeded; <c>false</c> if the user was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.GetCurrentUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the profile of the currently authenticated user.
            </summary>
            <param name="currentUserId">The identifier of the currently authenticated user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:BackendBiblioMate.DTOs.UserReadDto"/> representing the profile of the current user,
            or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.UpdateCurrentUserAsync(System.Int32,BackendBiblioMate.DTOs.UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the profile of the currently authenticated user (self-service).
            </summary>
            <param name="currentUserId">The identifier of the current user.</param>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.UserUpdateDto"/> containing updated profile details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            <c>true</c> if the profile update was successful; <c>false</c> if the user was not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IZoneService">
            <summary>
            Defines the contract for managing library <c>Zone</c> entities.
            A zone typically represents a physical section of the library
            (e.g., floor, aisle, or dedicated thematic area).
            Provides standard CRUD operations with support for pagination.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.GetAllAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paginated list of zones.
            Results are typically ordered by their unique identifier.
            </summary>
            <param name="page">1-based page index (must be &gt;= 1).</param>
            <param name="pageSize">Number of items per page (must be &gt;= 1).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing the requested subset of zones.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single zone by its identifier.
            </summary>
            <param name="id">The unique identifier of the zone.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>
            if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.CreateAsync(BackendBiblioMate.DTOs.ZoneCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new zone in the library catalog.
            </summary>
            <param name="dto">The data transfer object containing zone details (e.g. name, location info).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the newly created <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>
            including its generated identifier.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.ZoneUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing zone.
            </summary>
            <param name="id">The identifier of the zone to update.</param>
            <param name="dto">The updated zone data transfer object.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding <c>true</c> if the update succeeded;
            <c>false</c> if no zone with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a zone from the system.
            </summary>
            <param name="id">The identifier of the zone to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests (optional).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding <c>true</c> if deletion succeeded;
            <c>false</c> if no zone with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            Middleware for global exception handling.
            Catches unhandled exceptions in the request pipeline and returns standardized JSON error responses.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware"/> class.
            </summary>
            <param name="next">The next middleware delegate in the pipeline.</param>
            <param name="logger">The logger used to record exception details.</param>
        </member>
        <member name="M:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the current HTTP request, invoking the next middleware in the pipeline,
            and catches exceptions to handle them centrally.
            </summary>
            <param name="context">The current HTTP context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Handles an exception by logging its details and writing a structured JSON response.
            </summary>
            <param name="context">The current HTTP context in which the exception occurred.</param>
            <param name="exception">The exception to handle.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation of writing the response.</returns>
            <remarks>
            Maps exceptions to standard HTTP status codes:
            <list type="bullet">
              <item><see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> → 400 Bad Request</item>
              <item><see cref="T:System.Collections.Generic.KeyNotFoundException"/> → 404 Not Found</item>
              <item>Any other exception → 500 Internal Server Error</item>
            </list>
            </remarks>
        </member>
        <member name="T:BackendBiblioMate.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.AddSecurityStampToUser">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddSecurityStampToUser.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddSecurityStampToUser.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddSecurityStampToUser.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.AddBookDescriptionToBook">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddBookDescriptionToBook.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddBookDescriptionToBook.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddBookDescriptionToBook.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.UpdateUserEntity">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.UpdateUserEntity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.UpdateUserEntity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.UpdateUserEntity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.AddExtensionsCountToLoan">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddExtensionsCountToLoan.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddExtensionsCountToLoan.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddExtensionsCountToLoan.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.CheckNoChanges">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.CheckNoChanges.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.CheckNoChanges.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.CheckNoChanges.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.TentativeDébug">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.TentativeDébug.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.TentativeDébug.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.TentativeDébug.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Models.Author">
            <summary>
            Represents an author of a book in the system.
            Contains primary identification and navigation to related books.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Author.AuthorId">
            <summary>
            Gets or sets the unique identifier of the author.
            </summary>
            <remarks>
            This value is generated by the database as an identity column.
            </remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Author.Name">
            <summary>
            Gets or sets the full name of the author.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>J.K. Rowling</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Author.Books">
            <summary>
            Gets the collection of books written by this author.
            </summary>
            <remarks>
            Navigation property used by Entity Framework Core for relationships.
            Initialized to an empty list by default.
            </remarks>
        </member>
        <member name="T:BackendBiblioMate.Models.Book">
            <summary>
            Represents a book in the library catalog, including its metadata,
            relationships to other entities, and availability information.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.BookId">
            <summary>
            Gets or sets the unique identifier of the book.
            </summary>
            <remarks>
            This value is generated by the database as an identity column.
            </remarks>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Title">
            <summary>
            Gets or sets the title of the book.
            </summary>
            <remarks>
            Must be between 1 and 255 characters.
            </remarks>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Isbn">
            <summary>
            Gets or sets the International Standard Book Number (ISBN).
            </summary>
            <remarks>
            Must be between 10 and 13 characters.
            </remarks>
            <example>9780261102217</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Description">
            <summary>
            Gets or sets the description or synopsis of the book.
            </summary>
            <example>A fantasy novel about the journey of Bilbo Baggins.</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.PublicationDate">
            <summary>
            Gets or sets the date when the book was published.
            </summary>
            <example>1937-09-21</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.AuthorId">
            <summary>
            Gets or sets the foreign key referencing the author of the book.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Author">
            <summary>
            Gets or sets the navigation property for the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.GenreId">
            <summary>
            Gets or sets the foreign key referencing the genre of the book.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Genre">
            <summary>
            Gets or sets the navigation property for the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.EditorId">
            <summary>
            Gets or sets the foreign key referencing the editor/publisher.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Editor">
            <summary>
            Gets or sets the navigation property for the editor/publisher.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.ShelfLevelId">
            <summary>
            Gets or sets the foreign key referencing the shelf level where the book is located.
            </summary>
            <example>12</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.ShelfLevel">
            <summary>
            Gets or sets the navigation property for the shelf level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.CoverUrl">
            <summary>
            Gets or sets the URL of the book’s cover image.
            </summary>
            <example>https://cdn.example.com/covers/the-hobbit.jpg</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Loans">
            <summary>
            Gets the collection of loan records associated with this book.
            </summary>
            <remarks>
            Navigation property used by EF Core to represent many-to-one relationships.
            </remarks>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Reservations">
            <summary>
            Gets the collection of reservation records associated with this book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.BookTags">
            <summary>
            Gets the junction table entries linking this book to its tags.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Stock">
            <summary>
            Gets or sets the stock entry associated with this book.
            </summary>
            <remarks>
            May be null if stock has not been initialized.
            </remarks>
        </member>
        <member name="T:BackendBiblioMate.Models.BookTag">
            <summary>
            Junction entity linking books and tags in a many-to-many relationship.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.BookId">
            <summary>
            Gets or sets the foreign key of the associated book.
            </summary>
            <remarks>
            Part of the composite key with <see cref="P:BackendBiblioMate.Models.BookTag.TagId"/>.
            </remarks>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.Book">
            <summary>
            Gets or sets the navigation property for the related book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.TagId">
            <summary>
            Gets or sets the foreign key of the associated tag.
            </summary>
            <remarks>
            Part of the composite key with <see cref="P:BackendBiblioMate.Models.BookTag.BookId"/>.
            </remarks>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.Tag">
            <summary>
            Gets or sets the navigation property for the related tag.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Editor">
            <summary>
            Represents a publisher or editor of books within the system.
            Contains identification details and navigation to associated books.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Editor.EditorId">
            <summary>
            Gets or sets the unique identifier of the editor.
            </summary>
            <remarks>
            This value is generated by the database as an identity column.
            </remarks>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Editor.Name">
            <summary>
            Gets or sets the name of the editor or publishing house.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>Penguin Random House</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Editor.Books">
            <summary>
            Gets the collection of books published by this editor.
            </summary>
            <remarks>
            Navigation property used by Entity Framework Core for relationships.
            Initialized to an empty list by default.
            </remarks>
        </member>
        <member name="T:BackendBiblioMate.Models.Enums.NotificationType">
            <summary>
            Defines the categories of notifications that can be issued to users,
            such as reservation updates, reminders, penalties, and custom messages.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.ReservationAvailable">
            <summary>
            Indicates that a reserved item has become available for pickup.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.ReturnReminder">
            <summary>
            A reminder that an item is due to be returned soon.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.OverduePenalty">
            <summary>
            Notification that a penalty has been applied for an overdue item.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.OverdueNotice">
            <summary>
            Notice that an item is currently overdue.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Custom">
            <summary>
            A custom, application-defined notification.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Error">
            <summary>
            Indicates an error occurred in the system or process.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Warning">
            <summary>
            A warning about a non-critical issue or potential problem.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Info">
            <summary>
            General informational message to the user.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Enums.ReservationStatus">
            <summary>
            Defines the possible states of a reservation in the library system.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Pending">
            <summary>
            Reservation has been created and is awaiting availability of the item.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Available">
            <summary>
            The reserved item is available for the user to collect.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Completed">
            <summary>
            The reservation process is completed; the user has collected and returned the item.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Cancelled">
            <summary>
            The reservation has been cancelled either by the user or due to expiration.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Enums.UserRoles">
            <summary>
            Defines application roles used for authorization checks.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.UserRoles.Admin">
            <summary>
            Role for administrators with full access.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.UserRoles.Librarian">
            <summary>
            Role for librarians with permissions to manage library resources.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.UserRoles.User">
            <summary>
            Role for general users with standard borrowing privileges.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Genre">
            <summary>
            Represents a literary genre (e.g., Science Fiction, Romance) in the system.
            Contains identification details and navigation to related books and shelves.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.GenreId">
            <summary>
            Gets or sets the unique identifier of the genre.
            </summary>
            <remarks>
            This value is generated by the database as an identity column.
            </remarks>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.Name">
            <summary>
            Gets or sets the name of the genre.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>Science Fiction</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.Books">
            <summary>
            Gets the collection of books that belong to this genre.
            </summary>
            <remarks>
            Navigation property used by Entity Framework Core for relationships.
            Initialized to an empty list by default.
            </remarks>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.Shelves">
            <summary>
            Gets the collection of shelves designated for this genre.
            </summary>
            <remarks>
            Navigation property used by Entity Framework Core for relationships.
            Initialized to an empty list by default.
            </remarks>
        </member>
        <member name="T:BackendBiblioMate.Models.History">
            <summary>
            Records a user-centric event (loan, return, reservation, cancellation, etc.)
            for audit and history purposes.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.HistoryId">
            <summary>
            Gets or sets the unique identifier of the history record.
            </summary>
            <remarks>
            This value is generated by the database as an identity column.
            </remarks>
            <example>123</example>
        </member>
        <member name="P:BackendBiblioMate.Models.History.UserId">
            <summary>
            Gets or sets the identifier of the user associated with this event.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.History.LoanId">
            <summary>
            Gets or sets the optional identifier of the related loan, if applicable.
            </summary>
            <example>45</example>
        </member>
        <member name="P:BackendBiblioMate.Models.History.ReservationId">
            <summary>
            Gets or sets the optional identifier of the related reservation, if applicable.
            </summary>
            <example>78</example>
        </member>
        <member name="P:BackendBiblioMate.Models.History.EventDate">
            <summary>
            Gets or sets the exact date and time when the event occurred (UTC).
            </summary>
            <example>2025-06-23T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.History.EventType">
            <summary>
            Gets or sets the type of event.
            </summary>
            <remarks>
            Possible values include: "Loan", "Return", "Reservation", "Cancel".
            </remarks>
            <example>Loan</example>
        </member>
        <member name="P:BackendBiblioMate.Models.History.User">
            <summary>
            Gets or sets the navigation property to the user who triggered the event.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.Loan">
            <summary>
            Gets or sets the navigation property to the related loan, if applicable.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.Reservation">
            <summary>
            Gets or sets the navigation property to the related reservation, if applicable.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Loan">
            <summary>
            Represents a loan of a book by a user, including loan and due dates,
            potential return date, applicable fines, and extension count.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.LoanId">
            <summary>
            Gets or sets the unique identifier of the loan.
            </summary>
            <remarks>
            This value is generated by the database as an identity column.
            </remarks>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.BookId">
            <summary>
            Gets or sets the identifier of the borrowed book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.Book">
            <summary>
            Gets or sets the navigation property to the borrowed book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.UserId">
            <summary>
            Gets or sets the identifier of the user who borrowed the book.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.User">
            <summary>
            Gets or sets the navigation property to the user who borrowed the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.LoanDate">
            <summary>
            Gets or sets the date and time when the loan started (UTC).
            </summary>
            <example>2025-06-01T10:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.DueDate">
            <summary>
            Gets or sets the due date for returning the book (UTC).
            </summary>
            <example>2025-06-15T10:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.ReturnDate">
            <summary>
            Gets or sets the date when the book was actually returned, if applicable (UTC).
            </summary>
            <example>2025-06-14T16:45:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.Fine">
            <summary>
            Gets or sets the fine charged for late return.
            </summary>
            <remarks>
            Value is stored as a decimal with precision (10,2).
            </remarks>
            <example>2.50</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.StockId">
            <summary>
            Gets or sets the identifier of the stock entry associated with this loan.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.Stock">
            <summary>
            Gets or sets the navigation property to the stock entry.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.ExtensionsCount">
            <summary>
            Gets or sets the number of times this loan has been extended.
            </summary>
            <remarks>
            Maximum allowed extensions is 10. Defaults to 0.
            </remarks>
            <example>1</example>
        </member>
        <member name="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument">
            <summary>
            Represents a MongoDB document logging each notification event sent to users.
            Provides details about the notification type, recipient, message content, and timestamp.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.Id">
            <summary>
            Gets or sets the MongoDB ObjectId string that uniquely identifies this document.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.UserId">
            <summary>
            Gets or sets the identifier of the user who received the notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.Type">
            <summary>
            Gets or sets the type of notification sent (e.g., ReservationAvailable, ReturnReminder).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.Message">
            <summary>
            Gets or sets the content text of the notification message.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt">
            <summary>
            Gets or sets the UTC timestamp indicating when the notification was sent.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument">
            <summary>
            Represents a MongoDB document logging user search activities within the application.
            Captures information about who performed the search, the query text, and when it occurred.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.Id">
            <summary>
            Gets the MongoDB ObjectId string that uniquely identifies this document.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.UserId">
            <summary>
            Gets the identifier of the user who executed the search query.
            Null indicates an anonymous search.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.QueryText">
            <summary>
            Gets the text of the search query entered by the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.Timestamp">
            <summary>
            Gets the UTC timestamp indicating when the search query was executed.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument">
            <summary>
            Represents a MongoDB document logging various user activities within the application.
            Captures the user, action performed, optional details, and timestamp of the activity.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Id">
            <summary>
            Gets the MongoDB ObjectId string that uniquely identifies this document.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.UserId">
            <summary>
            Gets the identifier of the user who performed the logged action.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Action">
            <summary>
            Gets the action type performed by the user (e.g., "CreateUser", "DeleteLoan").
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Details">
            <summary>
            Gets optional metadata or details about the action. Null if none provided.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Timestamp">
            <summary>
            Gets the UTC timestamp indicating when the action was performed.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Notification">
            <summary>
            Represents a notification sent to a user, either via email or real-time push.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.NotificationId">
            <summary>
            Gets or sets the unique identifier of the notification.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.UserId">
            <summary>
            Gets or sets the identifier of the user who will receive the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.Message">
            <summary>
            Gets or sets the body message of the notification.
            </summary>
            <remarks>
            Maximum length of 1000 characters.
            </remarks>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.Timestamp">
            <summary>
            Gets or sets the UTC timestamp when the notification was created.
            </summary>
            <example>2025-07-04T15:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.User">
            <summary>
            Gets or sets the navigation property for the user receiving the notification.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Policies.LoanPolicy">
            <summary>
            Defines the loan policy constraints for the library system.
            Contains constants for maximum concurrent loans, default loan duration, and late fee calculation.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.MaxActiveLoansPerUser">
            <summary>
            Gets the maximum number of active loans a user can have simultaneously.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.DefaultLoanDurationDays">
            <summary>
            Gets the default number of days for a standard loan period.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.LateFeePerDay">
            <summary>
            Gets the fee amount charged per day for each overdue loan.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.MaxExtensionsPerLoan">
            <summary>
            Gets the maximum number of times a loan can be extended.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Recommendation">
            <summary>
            Represents a book recommendation generated for a specific user.
            Links a user to a recommended book in the system.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.RecommendationId">
            <summary>
            Gets or sets the unique identifier of the recommendation.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.UserId">
            <summary>
            Gets or sets the identifier of the user for whom the recommendation is made.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.BookId">
            <summary>
            Gets or sets the identifier of the recommended book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.User">
            <summary>
            Gets or sets the navigation property for the user receiving the recommendation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.Book">
            <summary>
            Gets or sets the navigation property for the recommended book.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Report">
            <summary>
            Represents an analytics or statistics report generated by a user.
            Contains metadata and the generated content of the report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.ReportId">
            <summary>
            Gets or sets the unique identifier of the report.
            </summary>
            <example>8</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.UserId">
            <summary>
            Gets or sets the identifier of the user who generated the report.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.Title">
            <summary>
            Gets or sets the title of the report.
            </summary>
            <remarks>
            Must be between 1 and 255 characters.
            </remarks>
            <example>Monthly Loan Statistics</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.Content">
            <summary>
            Gets or sets the detailed content of the report.
            </summary>
            <remarks>
            Can include statistics, tables, or a textual summary. 
            Must be between 1 and 1000 characters.
            </remarks>
            <example>The number of loans increased by 15% compared to the previous month...</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.GeneratedDate">
            <summary>
            Gets or sets the date and time when the report was generated (UTC).
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.User">
            <summary>
            Gets or sets the navigation property for the user who generated the report.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Reservation">
            <summary>
            Represents a user's reservation for a book, including status and timestamps.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.ReservationId">
            <summary>
            Gets or sets the unique identifier of the reservation.
            </summary>
            <example>23</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.BookId">
            <summary>
            Gets or sets the identifier of the reserved book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.UserId">
            <summary>
            Gets or sets the identifier of the user who made the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.CreatedAt">
            <summary>
            Gets or sets the UTC timestamp when the reservation record was created.
            </summary>
            <example>2025-06-20T12:45:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.ReservationDate">
            <summary>
            Gets or sets the effective date of the reservation (when the reservation becomes active).
            </summary>
            <example>2025-06-21T09:00:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.Status">
            <summary>
            Gets or sets the current status of the reservation.
            </summary>
            <remarks>
            Possible values: Pending, Completed, Cancelled, Expired.
            </remarks>
            <example>Pending</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.AssignedStockId">
            <summary>
            Gets or sets the identifier of the stock entry assigned to this reservation (if available).
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.AvailableAt">
            <summary>
            Gets or sets the UTC timestamp when the reserved book became available for pickup.
            </summary>
            <example>2025-06-22T08:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.Book">
            <summary>
            Navigation property for the reserved book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.User">
            <summary>
            Navigation property for the user who made the reservation.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Shelf">
            <summary>
            Represents a shelf in a specific zone and genre section of the library.
            Organizes books by location and genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.ShelfId">
            <summary>
            Gets the unique identifier of the shelf.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.ZoneId">
            <summary>
            Gets or sets the identifier of the zone where this shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.GenreId">
            <summary>
            Gets or sets the identifier of the genre associated with this shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Name">
            <summary>
            Gets or sets the human-readable name of the shelf.
            </summary>
            <remarks>
            Maximum length: 100 characters.
            </remarks>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Capacity">
            <summary>
            Gets or sets the maximum number of books the shelf can hold.
            </summary>
            <remarks>
            Zero indicates unlimited capacity.
            </remarks>
            <example>50</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.CurrentLoad">
            <summary>
            Gets or sets the current number of books stored on the shelf.
            </summary>
            <example>34</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Zone">
            <summary>
            Navigation property for the zone containing this shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Genre">
            <summary>
            Navigation property for the genre assigned to this shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.ShelfLevels">
            <summary>
            Gets the collection of levels within this shelf.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.ShelfLevel">
            <summary>
            Represents a specific level within a shelf, containing books.
            Defines capacity and current load constraints for each level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.ShelfLevelId">
            <summary>
            Gets the unique identifier of the shelf level.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.ShelfId">
            <summary>
            Gets or sets the identifier of the parent shelf.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.LevelNumber">
            <summary>
            Gets or sets the numeric level on the shelf.
            </summary>
            <remarks>
            1 corresponds to the bottom level, increasing upwards.
            </remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.MaxHeight">
            <summary>
            Gets or sets the maximum book height in centimeters that this level can accommodate.
            </summary>
            <remarks>
            Zero indicates no height limit.
            </remarks>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.Capacity">
            <summary>
            Gets or sets the maximum number of books this level can hold.
            </summary>
            <remarks>
            Zero indicates unlimited capacity.
            </remarks>
            <example>20</example>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.CurrentLoad">
            <summary>
            Gets or sets the current number of books stored on this level.
            </summary>
            <example>12</example>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.Shelf">
            <summary>
            Navigation property for the parent shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.Books">
            <summary>
            Gets the collection of books placed on this shelf level.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Stock">
            <summary>
            Represents the stock information for a specific book (physical copies).
            Tracks available quantity and related loans.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.StockId">
            <summary>
            Gets the unique identifier of the stock entry.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.BookId">
            <summary>
            Gets or sets the identifier of the associated book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.Quantity">
            <summary>
            Gets or sets the current number of copies available for this book.
            </summary>
            <remarks>
            Must be zero or a positive integer.
            </remarks>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.IsAvailable">
            <summary>
            Gets a value indicating whether at least one copy is available for loan.
            </summary>
            <remarks>
            This is a computed property and is not mapped to the database.
            </remarks>
            <example>true</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.Book">
            <summary>
            Navigation property for the related book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.Loans">
            <summary>
            Gets the collection of loan records associated with this stock entry.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Tag">
            <summary>
            Represents a tag that can be associated with multiple books.
            Used for categorization and search filtering.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Tag.TagId">
            <summary>
            Gets the unique identifier of the tag.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Tag.Name">
            <summary>
            Gets or sets the name of the tag.
            </summary>
            <remarks>
            Must be between 1 and 50 characters.
            </remarks>
            <example>Classic</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Tag.BookTags">
            <summary>
            Navigation property for the many-to-many relationship with books.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.User">
            <summary>
            Represents an application user with authentication, profile data, and related records.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.UserId">
            <summary>
            Gets the primary key of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.FirstName">
            <summary>
            Gets or sets the given name of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.LastName">
            <summary>
            Gets or sets the family name of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Email">
            <summary>
            Gets or sets the email address, used for login and notifications.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Password">
            <summary>
            Gets or sets the hashed password for authentication.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Address1">
            <summary>
            Gets or sets the primary postal address of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Address2">
            <summary>
            Gets or sets the secondary postal address of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Phone">
            <summary>
            Gets or sets the phone number of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.DateOfBirth">
            <summary>
            Gets or sets the date of birth of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.ProfileImagePath">
            <summary>
            Gets or sets the profile image path or URL of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Role">
            <summary>
            Gets or sets the role of the user (User, Librarian, Admin).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.IsEmailConfirmed">
            <summary>
            Gets a value indicating whether the user's email address has been confirmed.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.EmailConfirmationToken">
            <summary>
            Gets or sets the token sent to confirm the user's email, if pending.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.PasswordResetToken">
            <summary>
            Gets or sets the token sent to reset the user's password, if requested.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.PasswordResetTokenExpires">
            <summary>
            Gets or sets the expiration date and time for the password reset token.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.IsApproved">
            <summary>
            Gets a value indicating whether the user account has been approved by an administrator.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.SecurityStamp">
            <summary>
            Gets or sets the security stamp used to invalidate existing tokens on critical changes.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Loans">
            <summary>
            Gets the collection of loan records associated with the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Reservations">
            <summary>
            Gets the collection of reservation records associated with the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Reports">
            <summary>
            Gets the collection of reports generated by the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Recommendations">
            <summary>
            Gets the collection of recommendations generated for the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Notifications">
            <summary>
            Gets the collection of notifications sent to the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.UserGenres">
            <summary>
            Gets the preferred genres of the user for personalized recommendations.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.UserGenre">
            <summary>
            Junction entity linking users and their preferred genres for personalized recommendations.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.UserId">
            <summary>
            Gets or sets the foreign key referencing the user.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.User">
            <summary>
            Navigation property for the user who selected this genre as a preference.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.GenreId">
            <summary>
            Gets or sets the foreign key referencing the preferred genre.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.Genre">
            <summary>
            Navigation property for the genre chosen by the user as a favorite.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Zone">
            <summary>
            Represents a physical zone in the library (e.g., floor and aisle),
            grouping shelves by location and thematic area.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.ZoneId">
            <summary>
            Gets or sets the primary key of the zone.
            </summary>
            <example>4</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.Name">
            <summary>
            Gets or sets the human-readable name of the zone.
            </summary>
            <example>Main Hall</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.FloorNumber">
            <summary>
            Gets or sets the floor number where the zone is located.
            </summary>
            <remarks>
            Zero can be used to indicate the ground floor.
            </remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.AisleCode">
            <summary>
            Gets or sets the code of the aisle for quick identification.
            </summary>
            <example>A</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.Description">
            <summary>
            Gets or sets an optional description of the zone (e.g., thematic sections).
            </summary>
            <example>Children’s literature and picture books</example>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.Shelves">
            <summary>
            Gets the collection of shelves contained within this zone.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.AuthorService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Author"/> entities.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.AuthorService"/> class
            </summary>
            <param name="db">Database context for BiblioMate.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all authors from the data store.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all authors.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single author by its identifier.
            </summary>
            <param name="id">Identifier of the author to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
            <item>The <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> if found, otherwise null.</item>
            <item>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> <c>NotFound</c> when missing, otherwise null.</item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.CreateAsync(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new author in the data store.
            </summary>
            <param name="dto">Data transfer object containing author creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing the created <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> and a <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing author in the data store.
            </summary>
            <param name="id">Identifier of the author to update.</param>
            <param name="dto">Data transfer object containing updated author data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an author from the data store.
            </summary>
            <param name="id">Identifier of the author to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.MapToReadDto(BackendBiblioMate.Models.Author)">
            <summary>
            Maps an <see cref="T:BackendBiblioMate.Models.Author"/> entity to an <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/>.
            </summary>
            <param name="author">The author entity to map.</param>
            <returns>A new <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> instance.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.BookService">
            <summary>
            Provides services for managing books, including CRUD operations,
            searching, paging, and availability management.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.ISearchActivityLogService,BackendBiblioMate.Interfaces.ILocationService,BackendBiblioMate.Interfaces.IStockService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.BookService"/> class.
            </summary>
            <param name="db">The EF Core database context.</param>
            <param name="searchLog">Optional service for logging search activity.</param>
            <param name="location">Optional service for handling book locations.</param>
            <param name="stockSvc">Optional service for stock management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="db"/> is null.</exception>
        </member>
        <member name="P:BackendBiblioMate.Services.Catalog.BookService.ReadProjection">
            <summary>
            Defines the mapping from <see cref="T:BackendBiblioMate.Models.Book"/> entities to <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>.
            Includes availability, stock, tags, and flattened location details.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.GetPagedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paginated list of books with sorting support.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single book by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.SearchAsync(BackendBiblioMate.DTOs.BookSearchDto,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Searches for books based on a set of criteria (title, author, genre, etc.).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.GetAllGenresAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of all genres in alphabetical order.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.CreateAsync(BackendBiblioMate.DTOs.BookCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new book, its stock entry, and associated tags.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.BookUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing book and its related tags/stock.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.BookService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a book, its tags, and its stock record.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.EditorService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Editor"/> entities
            using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.EditorService"/> class.
            </summary>
            <param name="db">Database context for BiblioMate.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all editors from the data store.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all editors.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single editor by its identifier.
            </summary>
            <param name="id">Identifier of the editor to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
              <item>The <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> if found, otherwise null.</item>
              <item>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> <c>NotFound</c> when missing, otherwise null.</item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.CreateAsync(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new editor in the data store.
            </summary>
            <param name="dto">Data transfer object containing editor creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing the created <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> and a <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.EditorUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing editor in the data store.
            </summary>
            <param name="id">Identifier of the editor to update.</param>
            <param name="dto">Data transfer object containing updated editor data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the editor was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an editor from the data store.
            </summary>
            <param name="id">Identifier of the editor to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the editor was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.EditorService.MapToReadDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Editor"/> into <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.GenreService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Genre"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.GenreService"/> class.
            </summary>
            <param name="db">The EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all genres from the data store.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single genre by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.CreateAsync(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new genre in the data store.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.GenreUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing genre in the data store.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a genre from the data store.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.GenreService.MapToReadDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Genre"/> into <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.LocationService">
            <summary>
            Provides hierarchical access to library locations (floors, aisles, shelves, levels).
            Also supports "ensure" semantics: creates missing Zone/Shelf/Level entries on demand.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.LocationService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.LocationService"/> class.
            </summary>
            <param name="db">EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.LocationService.GetFloorsAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.LocationService.GetAislesAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.LocationService.GetShelvesAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.LocationService.GetLevelsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.LocationService.EnsureAsync(BackendBiblioMate.DTOs.LocationEnsureDto,System.Threading.CancellationToken)">
            <summary>
            Ensures that a Zone, Shelf, and ShelfLevel exist for the given parameters.
            Creates missing entries as needed and returns the fully resolved location.
            </summary>
            <param name="dto">
            The input data specifying floor number, aisle code, shelf name, and level number.
            </param>
            <param name="ct">Cancellation token.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.DTOs.LocationReadDto"/> containing identifiers and descriptive info
            for the ensured Zone, Shelf, and ShelfLevel.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.ShelfLevelService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.ShelfLevel"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.ShelfLevelService"/> class.
            </summary>
            <param name="context">The EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.CreateAsync(BackendBiblioMate.DTOs.ShelfLevelCreateDto,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.UpdateAsync(BackendBiblioMate.DTOs.ShelfLevelUpdateDto,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.ShelfLevelService.MapToReadDto">
            <summary>
            Projection expression mapping <see cref="T:BackendBiblioMate.Models.ShelfLevel"/> to <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.
            Used to keep EF queries translatable.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.ShelfService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Shelf"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.ShelfService"/> class.
            </summary>
            <param name="context">EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves, optionally filtered by zone ID, with pagination.
            </summary>
            <param name="zoneId">Optional zone ID to filter by.</param>
            <param name="page">Page number (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the paginated results.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf by its identifier.
            </summary>
            <param name="id">Identifier of the shelf to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.CreateAsync(BackendBiblioMate.DTOs.ShelfCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf in the data store.
            </summary>
            <param name="dto">Data transfer object containing shelf creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.UpdateAsync(BackendBiblioMate.DTOs.ShelfUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf in the data store.
            </summary>
            <param name="dto">Data transfer object containing updated shelf data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the shelf was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf from the data store.
            </summary>
            <param name="id">Identifier of the shelf to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the shelf was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.ShelfService.MapToDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Shelf"/> into <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.StockService">
            <summary>
            Provides operations for managing stock quantities and availability.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.StockService"/> class
            without a database context.
            Useful for unit tests where persistence is not required.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.StockService"/> class
            with an EF Core database context.
            </summary>
            <param name="context">EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.UpdateAvailability(BackendBiblioMate.Models.Stock)">
            <summary>
            Updates the <see cref="P:BackendBiblioMate.Models.Stock.IsAvailable"/> flag based on the current quantity.
            </summary>
            <param name="stock">The stock entry to update.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.AdjustQuantity(BackendBiblioMate.Models.Stock,System.Int32)">
            <summary>
            Adjusts the stock quantity by a given delta, ensuring it never drops below zero.
            Also updates the availability flag.  
            If a database context is provided, the change is persisted immediately.
            </summary>
            <param name="stock">The stock entry to modify.</param>
            <param name="delta">The amount to adjust (positive to increase, negative to decrease).</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.Increase(BackendBiblioMate.Models.Stock)">
            <summary>
            Increases the stock quantity by 1 and updates availability.
            </summary>
            <param name="stock">The stock entry to increment.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.Decrease(BackendBiblioMate.Models.Stock)">
            <summary>
            Decreases the stock quantity by 1 and updates availability.
            </summary>
            <param name="stock">The stock entry to decrement.</param>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.TagService">
            <summary>
            Provides CRUD and query operations for <see cref="T:BackendBiblioMate.Models.Tag"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.TagService"/> class.
            </summary>
            <param name="context">The EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all tags.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all tags.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single tag by its identifier.
            </summary>
            <param name="id">Identifier of the tag to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.CreateAsync(BackendBiblioMate.DTOs.TagCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new tag in the data store.
            </summary>
            <param name="dto">Data transfer object containing tag creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.UpdateAsync(BackendBiblioMate.DTOs.TagUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing tag in the data store.
            </summary>
            <param name="dto">Data transfer object containing updated tag data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the tag was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a tag from the data store.
            </summary>
            <param name="id">Identifier of the tag to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the tag was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.TagService.MapToDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Tag"/> into <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches for tags by name, returning up to <paramref name="take"/> results.
            </summary>
            <param name="search">Optional search term; if <c>null</c> or empty, returns all.</param>
            <param name="take">Maximum number of results to return (1–100).</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A list of matching <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> results.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.TagService.EnsureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Ensures that a tag with the given name exists.
            Creates it if missing and returns whether it was newly created.
            </summary>
            <param name="name">The tag name to ensure.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing the <see cref="T:BackendBiblioMate.DTOs.TagReadDto"/> and a boolean indicating if it was newly created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.ZoneService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Zone"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.ZoneService"/> class.
            </summary>
            <param name="context">The EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.GetAllAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all zones with pagination.
            </summary>
            <param name="page">Page index (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the requested page of zones.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single zone by its identifier.
            </summary>
            <param name="id">Identifier of the zone to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.CreateAsync(BackendBiblioMate.DTOs.ZoneCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new zone in the data store.
            </summary>
            <param name="dto">Data transfer object containing zone creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The created <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.ZoneUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing zone in the data store.
            </summary>
            <param name="id">Identifier of the zone to update.</param>
            <param name="dto">Data transfer object containing updated zone data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; otherwise <c>false</c> if the zone was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a zone from the data store.
            </summary>
            <param name="id">Identifier of the zone to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; otherwise <c>false</c> if the zone was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.ZoneService.MapToDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Zone"/> into <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.External.IGoogleBooksService">
            <summary>
            Defines methods to fetch book metadata from the Google Books API.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.IGoogleBooksService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches Google Books for the specified term and returns a list of <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.
            </summary>
            <param name="term">The search term (e.g., title, author, ISBN).</param>
            <param name="maxResults">Maximum number of results to retrieve. Default is 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing book data.
            If no items were found, returns an empty list.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService">
            <summary>
            Service implementation to fetch book metadata from the Google Books API.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService"/>.
            </summary>
            <param name="httpClient">Configured <see cref="T:System.Net.Http.HttpClient"/> for Google Books API.</param>
            <param name="configuration">Application configuration to retrieve the API key.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.BuildRequestUrl(System.String,System.Int32)">
            <summary>
            Builds the Google Books API request URL with query parameters.
            </summary>
            <param name="term">Search term.</param>
            <param name="maxResults">Maximum results to fetch.</param>
            <returns>Full request URL string.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.MapVolumeToDto(System.Text.Json.JsonElement)">
            <summary>
            Maps a single JSON volume element to a <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.
            </summary>
            <param name="item">The JSON element representing a volume.</param>
            <returns>A populated <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.External.SmtpEmailService">
            <summary>
            Provides an SMTP-based implementation of <see cref="T:BackendBiblioMate.Interfaces.IEmailService"/>.
            Sends emails using the MailKit library and SMTP credentials configured in appsettings.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.SmtpEmailService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Infrastructure.External.SmtpEmailService})">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Infrastructure.External.SmtpEmailService"/> class.
            </summary>
            <param name="cfg">Application configuration containing SMTP settings.</param>
            <param name="log">Logger for diagnostic and audit purposes.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.SmtpEmailService.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            Sends an email asynchronously via the configured SMTP server.
            </summary>
            <param name="toEmail">Recipient email address.</param>
            <param name="subject">Email subject line.</param>
            <param name="htmlContent">HTML content of the message body.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous send operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if required SMTP configuration values are missing.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService">
            <summary>
            Provides low-level CRUD operations for notification logs stored in MongoDB.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.#ctor(BackendBiblioMate.Interfaces.INotificationLogCollection,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService"/>.
            </summary>
            <param name="collection">Abstraction over the MongoDB notification log collection.</param>
            <param name="logger">Logger instance for diagnostics.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="collection"/> or <paramref name="logger"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.AddAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log entry into the MongoDB collection.
            </summary>
            <param name="log">The notification log document to insert.</param>
            <param name="cancellationToken">Token to observe for cancellation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="log"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification logs, sorted in descending order by their sent date.
            </summary>
            <param name="cancellationToken">Token to observe for cancellation.</param>
            <returns>
            A list of <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> objects representing the log history.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific notification log entry by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the log document.</param>
            <param name="cancellationToken">Token to observe for cancellation.</param>
            <returns>
            The matching <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> if found; otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="id"/> is <c>null</c>, empty, or whitespace.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection">
            <summary>
            MongoDB-backed implementation of <see cref="T:BackendBiblioMate.Interfaces.INotificationLogCollection"/>.
            Provides CRUD-like access to notification log documents for auditing purposes.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection.#ctor(MongoDB.Driver.IMongoClient,Microsoft.Extensions.Options.IOptions{BackendBiblioMate.Configuration.MongoSettings})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection"/>.
            </summary>
            <param name="mongoClient">The MongoDB client instance.</param>
            <param name="settings">Application MongoDB configuration (database and collection names).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if required settings are missing.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection.InsertOneAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a single <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> into the collection.
            </summary>
            <param name="doc">The document to insert.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection.GetAllSortedAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log documents, sorted by <see cref="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt"/> in descending order.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A list of notification logs, most recent first.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single notification log document by its identifier.
            </summary>
            <param name="id">The MongoDB identifier (string).</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The matching document, or <c>null</c> if not found.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService">
            <summary>
            Provides AES-256-CBC encryption and decryption for sensitive string data.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService"/> class.
            </summary>
            <param name="config">
            Application configuration; must contain a Base64-encoded 32-byte key under <c>Encryption:Key</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="config"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the key is missing, not valid Base64, or not exactly 32 bytes when decoded.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts the specified plaintext using AES-256-CBC.
            </summary>
            <param name="plain">
            The plaintext string to encrypt. If <c>null</c> or empty, returns an empty string.
            </param>
            <returns>
            A Base64-encoded string containing the IV concatenated with the ciphertext.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.Decrypt(System.String)">
            <summary>
            Decrypts the specified Base64-encoded IV+ciphertext string using AES-256-CBC.
            </summary>
            <param name="cipher">
            The Base64-encoded payload (IV + ciphertext). If <c>null</c> or empty, returns an empty string.
            </param>
            <returns>The decrypted plaintext string.</returns>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="cipher"/> is not valid Base64.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            Thrown if decryption fails (e.g. tampered or invalid data).
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.CreateAes">
            <summary>
            Creates and configures a new <see cref="T:System.Security.Cryptography.Aes"/> instance for AES-256-CBC.
            </summary>
            <returns>A configured <see cref="T:System.Security.Cryptography.Aes"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            Thrown if the AES algorithm cannot be instantiated.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService">
            <summary>
            Background service that runs on a fixed interval to send loan return reminders
            and overdue notifications to users with active loans.
            </summary>
            <remarks>
            This service creates a new scoped DI context on each run,
            ensuring proper disposal of scoped dependencies such as DbContext.
            </remarks>
        </member>
        <member name="F:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.Interval">
            <summary>
            Defines the interval between reminder executions.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Loans.LoanReminderBackgroundService})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService"/>.
            </summary>
            <param name="serviceProvider">The root DI container used to create scoped services.</param>
            <param name="logger">Logger for operational messages and error tracking.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if dependencies are not provided.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Executes the background service loop. On each iteration:
            <list type="bullet">
            <item>Creates a scoped <see cref="T:BackendBiblioMate.Services.Loans.LoanReminderService"/>.</item>
            <item>Sends loan return reminders.</item>
            <item>Sends overdue notifications.</item>
            <item>Waits <see cref="F:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.Interval"/> before repeating, until cancellation.</item>
            </list>
            </summary>
            <param name="stoppingToken">Cancellation token for graceful shutdown.</param>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.LoanReminderService">
            <summary>
            Service responsible for analyzing loan records and sending user notifications
            about upcoming due dates and overdue items.
            </summary>
            <remarks>
            This service is typically invoked on a scheduled basis by
            <see cref="T:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService"/>.
            </remarks>
        </member>
        <member name="F:BackendBiblioMate.Services.Loans.LoanReminderService.ReminderWindowHours">
            <summary>
            Number of hours before the due date to trigger a reminder notification.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Services.Notifications.NotificationService,BackendBiblioMate.Interfaces.INotificationLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Loans.LoanReminderService"/>.
            </summary>
            <param name="context">EF Core database context for accessing loan and user data.</param>
            <param name="notificationService">Service for sending notifications to users.</param>
            <param name="logService">Service for persisting notification log entries.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any dependency is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.SendReturnRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Sends reminder notifications to users with loans that are due
            within the <see cref="F:BackendBiblioMate.Services.Loans.LoanReminderService.ReminderWindowHours"/> window.
            </summary>
            <param name="cancellationToken">Token used to cancel the operation.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.SendOverdueNotificationsAsync(System.Threading.CancellationToken)">
            <summary>
            Sends overdue notifications to users with loans that are past their due date.
            </summary>
            <param name="cancellationToken">Token used to cancel the operation.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.GetUnreturnedLoans">
            <summary>
            Retrieves all active loans that have not yet been returned,
            including the associated <see cref="T:BackendBiblioMate.Models.User"/> and <see cref="T:BackendBiblioMate.Models.Book"/>.
            </summary>
            <returns>Queryable for further filtering.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.SendNotificationAndLogAsync(System.Int32,BackendBiblioMate.Models.Enums.NotificationType,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to the specified user and writes a corresponding log entry.
            </summary>
            <param name="userId">User identifier to notify.</param>
            <param name="type">Classification of the notification.</param>
            <param name="message">Content of the notification.</param>
            <param name="cancellationToken">Token used to cancel the operation.</param>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.LoanService">
            <summary>
            Provides business logic for managing book loans,
            including creation, return handling, updating, deletion,
            and reservation processing.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IStockService,BackendBiblioMate.Interfaces.INotificationService,BackendBiblioMate.Interfaces.IHistoryService,BackendBiblioMate.Interfaces.IUserActivityLogService,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Loans.LoanService})">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Loans.LoanService"/> class.
            </summary>
            <param name="context">Database context for persistence.</param>
            <param name="stockService">Service for adjusting stock availability.</param>
            <param name="notificationService">Service for sending user notifications.</param>
            <param name="historyService">Service for recording historical events.</param>
            <param name="activityLogService">Service for recording user activities.</param>
            <param name="logger">Logger for diagnostics and error tracking.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.CreateAsync(BackendBiblioMate.DTOs.LoanCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new loan for a book if the user and stock meet policy requirements.
            </summary>
            <param name="dto">DTO containing the user and book identifiers.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> with loan due date if successful,
            or an error message if creation fails.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.ReturnAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks a loan as returned, applies late fines, updates stock,
            and notifies the next reservation if applicable.
            </summary>
            <param name="loanId">Identifier of the loan to return.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:BackendBiblioMate.Interfaces.Result`2"/> with return details if successful,
            or an error message if not.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all loans from the system.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a loan by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.LoanUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates loan details (e.g., due date).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a loan from the system by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.ProcessNextReservationAsync(BackendBiblioMate.Models.Stock,System.Threading.CancellationToken)">
            <summary>
            Processes the next pending reservation for a book,
            marks it as available, and notifies the user.
            </summary>
            <param name="stock">The stock associated with the returned book.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>true</c> if a reservation was processed and notified; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.ReservationCleanupService">
            <summary>
            Service that periodically cleans up expired reservations:
            - Removes reservations in <see cref="F:BackendBiblioMate.Models.Enums.ReservationStatus.Available"/> state
              that exceeded the pickup window.
            - Restores the associated stock availability.
            - Logs each expiration event to the history system.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Services.Loans.ReservationCleanupService.ExpirationWindowHours">
            <summary>
            Number of hours after which a reservation becomes expired
            if the reserved copy has not been collected.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationCleanupService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IHistoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Loans.ReservationCleanupService"/> class.
            </summary>
            <param name="context">EF Core database context for reservations and stock.</param>
            <param name="historyService">Service for logging reservation expiration events.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a dependency is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationCleanupService.CleanupExpiredReservationsAsync(System.Threading.CancellationToken)">
            <summary>
            Scans for expired reservations, restores related stock availability,
            logs each expiration event, and removes the reservation records.
            </summary>
            <param name="cancellationToken">Token used to cancel the operation.</param>
            <returns>Total number of expired reservations removed.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationCleanupService.RestoreStockAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks the specified stock record as available again.
            </summary>
            <param name="stockId">Identifier of the stock to restore.</param>
            <param name="cancellationToken">Token used to cancel the operation.</param>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.ReservationService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.IReservationService"/>.
            Handles reservations using EF Core data access and coordinates history and audit logging.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IHistoryService,BackendBiblioMate.Interfaces.IUserActivityLogService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Loans.ReservationService"/> class.
            </summary>
            <param name="context">The EF Core database context.</param>
            <param name="historyService">The service used to log historical reservation events.</param>
            <param name="activityLogService">The service used to log user activity for auditing.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reservations, including their associated user and book details.
            </summary>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns>A collection of <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> objects representing all reservations.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all active or available reservations for a specific user.
            </summary>
            <param name="userId">The identifier of the user.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns>A collection of <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> for the given user.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetPendingForBookAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all pending reservations for a specific book, ordered by creation date.
            </summary>
            <param name="bookId">The identifier of the book.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns>A collection of pending <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> for the specified book.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single reservation by its identifier.
            </summary>
            <param name="id">The reservation identifier.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.CreateAsync(BackendBiblioMate.DTOs.ReservationCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new reservation if the user is authorized and no copies are currently available.
            </summary>
            <param name="dto">The reservation creation data transfer object.</param>
            <param name="currentUserId">The identifier of the currently authenticated user.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns>The newly created <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the user ID in the request does not match the authenticated user.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the user already has an active reservation or if copies are available.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.UpdateAsync(BackendBiblioMate.DTOs.ReservationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing reservation’s details.
            </summary>
            <param name="dto">The reservation update data transfer object.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns><c>true</c> if the reservation was updated successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a reservation by its identifier.
            </summary>
            <param name="id">The reservation identifier.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
            <returns><c>true</c> if the reservation was deleted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.LogHistoryAndAuditAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Logs both a history event and a user activity audit entry.
            </summary>
            <param name="userId">The user who performed the action.</param>
            <param name="action">The action performed (e.g., CreateReservation).</param>
            <param name="reservationId">The identifier of the reservation affected.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.LogAuditAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs a user activity audit entry only (without creating a history event).
            </summary>
            <param name="userId">The user who performed the action.</param>
            <param name="action">The action performed.</param>
            <param name="details">Additional details for the log entry.</param>
            <param name="cancellationToken">Token used to cancel the asynchronous operation.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.MapToDto(BackendBiblioMate.Models.Reservation)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.Reservation"/> entity to its <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.
            </summary>
            <param name="r">The reservation entity to map.</param>
            <returns>A corresponding <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Notifications.NotificationLogService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.INotificationLogService"/>.
            Responsible for persisting notification log entries in MongoDB
            and retrieving them for a specific user.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationLogService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Notifications.NotificationLogService"/> class.
            Establishes a MongoDB connection and retrieves the notification log collection.
            </summary>
            <param name="config">The application configuration containing MongoDB connection settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="config"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if required MongoDB settings (<c>MongoDb:ConnectionString</c> or <c>MongoDb:DatabaseName</c>) are missing.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationLogService.LogAsync(System.Int32,BackendBiblioMate.Models.Enums.NotificationType,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates and inserts a new notification log entry into MongoDB.
            </summary>
            <param name="userId">The identifier of the user who received the notification.</param>
            <param name="type">The type of the notification (e.g., reminder, overdue, system alert).</param>
            <param name="message">The message content of the notification.</param>
            <param name="cancellationToken">Token to monitor cancellation of the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous insert operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="message"/> is null or whitespace.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification logs for a specific user, ordered by most recent first.
            </summary>
            <param name="userId">The identifier of the user whose logs should be retrieved.</param>
            <param name="cancellationToken">Token to monitor cancellation of the asynchronous operation.</param>
            <returns>
            A list of <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> objects corresponding to the user,
            sorted in descending order by <see cref="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt"/>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Notifications.NotificationService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.INotificationService"/>.
            Sends notifications to users through real-time SignalR messages
            and fallback email delivery.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationService.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{BackendBiblioMate.Hubs.NotificationHub},BackendBiblioMate.Interfaces.IEmailService,BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Notifications.NotificationService"/> class.
            </summary>
            <param name="hubContext">The SignalR hub context used for pushing real-time notifications.</param>
            <param name="emailService">The service responsible for sending email notifications.</param>
            <param name="context">The database context used to retrieve user details.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any injected dependency is <c>null</c>.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationService.NotifyUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to a user by:
            <list type="number">
              <item>Looking up the user in the database.</item>
              <item>Sending a real-time SignalR message if the user is connected.</item>
              <item>Dispatching a fallback email notification.</item>
            </list>
            </summary>
            <param name="userId">The identifier of the user to notify.</param>
            <param name="message">The notification message to send.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> used to observe cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of sending the notification.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="message"/> is <c>null</c>, empty, or whitespace.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Services.Notifications.SendGridEmailService">
            <summary>
            Email service implementation that uses <see cref="T:SendGrid.SendGridClient"/>
            to send transactional and notification emails.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.SendGridEmailService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Notifications.SendGridEmailService"/> class.
            </summary>
            <param name="config">
            Application configuration containing SendGrid settings:
            <list type="bullet">
              <item><c>SendGrid:ApiKey</c> – API key for authenticating with SendGrid.</item>
              <item><c>SendGrid:FromEmail</c> – Default sender email address.</item>
              <item><c>SendGrid:FromName</c> – Optional display name for the sender.</item>
            </list>
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="config"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if any required SendGrid setting is missing or invalid.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.SendGridEmailService.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            Sends an email asynchronously using the SendGrid API.
            </summary>
            <param name="toEmail">The recipient's email address.</param>
            <param name="subject">The subject line of the email.</param>
            <param name="htmlContent">The HTML-formatted content of the email body.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes once the SendGrid API responds to the request.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="toEmail"/> or <paramref name="htmlContent"/> is <c>null</c>, empty, or whitespace.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Services.Recommendations.RecommendationService">
            <summary>
            Service implementation of <see cref="T:BackendBiblioMate.Interfaces.IRecommendationService"/> 
            that generates book recommendations for users based on their preferred genres.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Recommendations.RecommendationService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Recommendations.RecommendationService"/> class.
            </summary>
            <param name="context">The EF Core database context used to access user preferences and book data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Recommendations.RecommendationService.GetRecommendationsForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves up to 10 book recommendations for the specified user, 
            based on the genres the user has marked as preferred.
            </summary>
            <param name="userId">The identifier of the user to recommend books for.</param>
            <param name="cancellationToken">Token used to observe cancellation requests.</param>
            <returns>
            A list of <see cref="T:BackendBiblioMate.DTOs.RecommendationReadDto"/> objects representing recommended books.  
            Results are ordered by <c>BookId</c> to ensure deterministic output.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Reports.ReportService">
            <summary>
            Provides CRUD operations and analytical report generation for user activity.
            Uses EF Core for data access and computes basic loan statistics.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Reports.ReportService"/> class.
            </summary>
            <param name="context">The EF Core database context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports in the system, ordered by generation date (most recent first).
            </summary>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>List of <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.GetAllForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports generated by a specific user, ordered by generation date (most recent first).
            </summary>
            <param name="userId">The identifier of the user.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>List of <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single report by its identifier.
            </summary>
            <param name="reportId">The identifier of the report.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.CreateAsync(BackendBiblioMate.DTOs.ReportCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates a new monthly report with statistics such as loan counts and top books.
            Saves the report to the database and returns the result as a DTO.
            </summary>
            <param name="dto">The creation parameters containing the report title.</param>
            <param name="userId">The identifier of the user creating the report.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.UpdateAsync(BackendBiblioMate.DTOs.ReportUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing report’s title and content.
            </summary>
            <param name="dto">The update parameters containing new title and content.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns><c>true</c> if updated; <c>false</c> if not found.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a report by its identifier.
            </summary>
            <param name="reportId">The identifier of the report to delete.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns><c>true</c> if deleted; <c>false</c> if not found.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.ToDto(BackendBiblioMate.Models.Report)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.Report"/> entity to a <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.
            </summary>
            <param name="r">The entity to map.</param>
            <returns>A corresponding <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Reports.SearchActivityLogService">
            <summary>
            Provides persistence and retrieval of search activity logs in MongoDB.
            Each log entry captures details of a user’s search query for auditing and analytics.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.SearchActivityLogService.#ctor(Microsoft.Extensions.Options.IOptions{BackendBiblioMate.Configuration.MongoSettings},MongoDB.Driver.IMongoClient)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Reports.SearchActivityLogService"/> class.
            Creates a TTL (time-to-live) index so logs expire automatically after 90 days.
            </summary>
            <param name="opts">Strongly typed MongoDB connection settings.</param>
            <param name="client">MongoDB client instance used to access the database.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="opts"/> or <paramref name="client"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.SearchActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.SearchActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Persists a new search activity log document.
            </summary>
            <param name="doc">The document containing search details (user ID, query, timestamp).</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>A task representing the asynchronous insert operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="doc"/> is <c>null</c>.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.SearchActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all search activity logs for a given user,
            ordered from most recent to oldest.
            </summary>
            <param name="userId">The identifier of the user whose search logs are retrieved.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>
            A list of <see cref="T:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument"/> representing the user’s search history.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.AuthService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.IAuthService"/>.
            Handles user registration, authentication, email confirmation,
            password reset, and administrator approval.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,Microsoft.Extensions.Configuration.IConfiguration,BackendBiblioMate.Interfaces.IEmailService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Users.AuthService"/>.
            </summary>
            <param name="db">EF Core database context for user management.</param>
            <param name="config">Application configuration containing JWT and frontend settings.</param>
            <param name="emailService">Service for sending confirmation and reset emails.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.RegisterAsync(BackendBiblioMate.DTOs.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Registers a new user, saves it to the database, and sends a confirmation email.
            </summary>
            <param name="dto">Registration data provided by the frontend.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>
            A tuple containing a success flag and an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> response:
            <list type="bullet">
            <item><description>409 Conflict if email already exists.</description></item>
            <item><description>200 OK with a confirmation message otherwise.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.LoginAsync(BackendBiblioMate.DTOs.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user against stored credentials and returns a signed JWT.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ConfirmEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Confirms a user's email address using a unique token sent at registration.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.RequestPasswordResetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Requests a password reset. Generates a reset token, stores it, and sends an email if the account exists.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ResetPasswordAsync(BackendBiblioMate.DTOs.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets a user’s password using a valid reset token.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ApproveUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks a user as approved by an administrator.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ResendConfirmationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resends the confirmation email if needed.
            Does not disclose whether the user exists for security reasons.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.GenerateJwtToken(BackendBiblioMate.Models.User)">
            <summary>
            Generates a signed JWT token for an authenticated user.
            Includes claims for identity, email, role, and security stamp.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.SplitName(System.String,System.String@,System.String@)">
            <summary>
            Splits a full name into first and last name parts.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.RejectUserAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Rejects a pending user account.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.HistoryService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.IHistoryService"/> that uses EF Core
            to log and retrieve user history events (loans, returns, reservations, etc.).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.HistoryService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Users.HistoryService"/> class.
            </summary>
            <param name="context">EF Core database context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.HistoryService.LogEventAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Logs a new user history event in the database.
            </summary>
            <param name="userId">Identifier of the user who triggered the event.</param>
            <param name="eventType">Type of event (e.g., "LoanCreated", "ReservationExpired").</param>
            <param name="loanId">Optional loan ID linked to the event.</param>
            <param name="reservationId">Optional reservation ID linked to the event.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.HistoryService.GetHistoryForUserAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves paginated user history, sorted by most recent first.
            </summary>
            <param name="userId">The user identifier whose history to retrieve.</param>
            <param name="page">Page number (1-based index).</param>
            <param name="pageSize">Number of entries per page.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.HistoryReadDto"/> entries for the given user.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.UserActivityLogService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.IUserActivityLogService"/> that records
            and retrieves user activity logs stored in MongoDB.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserActivityLogService.#ctor(Microsoft.Extensions.Options.IOptions{BackendBiblioMate.Configuration.MongoSettings},MongoDB.Driver.IMongoClient)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Users.UserActivityLogService"/> class.
            </summary>
            <param name="opts">Strongly typed MongoDB settings injected via <see cref="T:Microsoft.Extensions.Options.IOptions`1"/>.</param>
            <param name="client">MongoDB client instance.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="opts"/> or <paramref name="client"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the configured <c>DatabaseName</c> is missing or empty.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.UserActivityLogDocument,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Persists a new user activity log entry into the MongoDB collection.
            </summary>
            <param name="doc">The <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> to insert.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="doc"/> is <c>null</c>.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves all user activity logs for a given user,
            sorted by <see cref="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Timestamp"/> in descending order.
            </summary>
            <param name="userId">The identifier of the user whose activity logs are retrieved.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> entries for the user.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.UserService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.IUserService"/> that provides
            CRUD operations and role management for <see cref="T:BackendBiblioMate.Models.User"/> entities,
            using EF Core as the persistence layer.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Users.UserService"/> class.
            </summary>
            <param name="context">EF Core database context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves all users with their associated genres.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves a user by their identifier, including favorite genres.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.CreateAsync(BackendBiblioMate.DTOs.UserCreateDto,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Creates a new user with basic details and hashed password.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.UserUpdateDto,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Updates an existing user's profile information.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.UpdateRoleAsync(System.Int32,BackendBiblioMate.DTOs.UserRoleUpdateDto,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Updates the role of a user if the new role is valid.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Deletes a user by their identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.GetCurrentUserAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves the currently logged-in user's details.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.UpdateCurrentUserAsync(System.Int32,BackendBiblioMate.DTOs.UserUpdateDto,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Updates the currently logged-in user's profile information.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserService.MapToDto(BackendBiblioMate.Models.User)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.User"/> entity to a <see cref="T:BackendBiblioMate.DTOs.UserReadDto"/>.
            </summary>
        </member>
    </members>
</doc>
