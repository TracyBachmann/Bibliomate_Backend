<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BackendBiblioMate</name>
    </assembly>
    <members>
        <member name="T:BackendBiblioMate.Configuration.MappingProfile">
            <summary>
            Defines AutoMapper configuration profiles for mapping 
            between domain entities and Data Transfer Objects (DTOs).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Configuration.MappingProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Configuration.MappingProfile"/> class
            and configures all mappings used in the application.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Configuration.MongoSettings">
            <summary>
            Represents the configuration settings required to connect to MongoDB.
            </summary>
            <remarks>
            These settings are typically bound from the "Mongo" section of <c>appsettings.json</c>.
            They can be injected into services via <c>IOptions&lt;MongoSettings&gt;</c>.
            </remarks>
        </member>
        <member name="P:BackendBiblioMate.Configuration.MongoSettings.ConnectionString">
            <summary>
            Gets or sets the MongoDB connection string.
            </summary>
            <value>
            A valid MongoDB connection string including credentials and host
            (e.g. <c>mongodb://user:pass@host:27017</c>).
            </value>
        </member>
        <member name="P:BackendBiblioMate.Configuration.MongoSettings.DatabaseName">
            <summary>
            Gets or sets the name of the MongoDB database to use.
            </summary>
            <value>
            The database name where collections are stored.
            </value>
        </member>
        <member name="P:BackendBiblioMate.Configuration.MongoSettings.LogCollectionName">
            <summary>
            Gets or sets the name of the MongoDB collection where notification logs are stored.
            </summary>
            <value>
            The collection name that stores <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> records.
            Defaults to <c>"logEntries"</c> if not explicitly configured.
            </value>
        </member>
        <member name="T:BackendBiblioMate.Controllers.AuditsController">
            <summary>
            API controller for retrieving user activity audit logs.
            </summary>
            <remarks>
            All endpoints in this controller are protected and require the caller
            to be authenticated with either the <see cref="F:BackendBiblioMate.Models.Enums.UserRoles.Admin"/> 
            or <see cref="F:BackendBiblioMate.Models.Enums.UserRoles.Librarian"/> role.
            </remarks>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuditsController.#ctor(BackendBiblioMate.Interfaces.IUserActivityLogService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.AuditsController"/> class.
            </summary>
            <param name="activityLog">
            The service used to query user activity log entries from MongoDB.
            </param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuditsController.GetUserActivityLogs(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all recorded activity logs for a specific user.
            </summary>
            <param name="userId">The unique identifier of the user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            Returns:
            <list type="bullet">
              <item><description><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> objects.</description></item>
              <item><description><c>404 NotFound</c> if no activity logs are available for the given user.</description></item>
            </list>
            </returns>
            <response code="200">Activity logs successfully retrieved.</response>
            <response code="404">No activity logs found for the specified user.</response>
        </member>
        <member name="T:BackendBiblioMate.Controllers.AuthorsController">
            <summary>
            API controller for managing authors.
            Provides CRUD and utility endpoints for author resources.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.#ctor(BackendBiblioMate.Interfaces.IAuthorService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.AuthorsController"/> class.
            </summary>
            <param name="service">The service used to handle business logic for authors.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.GetAuthors(System.Threading.CancellationToken)">
            <summary>
            Retrieves all authors.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of authors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.GetAuthor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single author by its identifier.
            </summary>
            <param name="id">The author identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the author data,  
            <c>404 NotFound</c> if the author does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.CreateAuthor(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new author.
            </summary>
            <param name="dto">The data required to create the author.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with a location header pointing to the new author,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if the caller lacks permissions.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.UpdateAuthor(System.Int32,BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing author.
            </summary>
            <param name="id">The author identifier.</param>
            <param name="dto">The updated author data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success,  
            <c>404 NotFound</c> if the author does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.DeleteAuthor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an author.
            </summary>
            <param name="id">The author identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success,  
            <c>404 NotFound</c> if the author does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.SearchAuthors(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches authors by a query string.
            </summary>
            <param name="search">Optional search term to filter authors by name.</param>
            <param name="take">Maximum number of results to return. Defaults to 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a filtered list of authors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthorsController.EnsureAuthor(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures an author exists by name.
            </summary>
            <param name="dto">The data required to check or create the author.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the existing author if found,  
            <c>201 Created</c> with the new author if it was created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.AuthsController">
            <summary>
            Provides API endpoints for user authentication and account management,
            including registration, login, email confirmation, password reset, and admin approval.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.#ctor(BackendBiblioMate.Interfaces.IAuthService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.AuthsController"/> class.
            </summary>
            <param name="authService">The authentication service handling all user-related auth logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.Register(BackendBiblioMate.DTOs.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Registers a new user account.
            </summary>
            <param name="dto">The registration data including name, email, password, address, and phone.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> on success,  
            <c>400 Bad Request</c> if validation fails.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.Login(BackendBiblioMate.DTOs.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user and returns a JWT token if credentials are valid.
            </summary>
            <param name="dto">The login data including email and password.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with JWT and user info on success,  
            <c>401 Unauthorized</c> if credentials are invalid.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ConfirmEmail(System.String,System.Threading.CancellationToken)">
            <summary>
            Confirms the user's email address using a confirmation token.
            </summary>
            <param name="token">The email confirmation token provided in the verification link.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if the email is confirmed,  
            <c>400 Bad Request</c> if the token is invalid or expired.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.RequestPasswordReset(BackendBiblioMate.DTOs.RequestPasswordResetDto,System.Threading.CancellationToken)">
            <summary>
            Sends a password reset email to the specified address.
            </summary>
            <param name="dto">Contains the email address of the user requesting a password reset.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if the email was sent,  
            <c>404 Not Found</c> if the email is not associated with any account.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ResetPassword(BackendBiblioMate.DTOs.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets the user's password using a reset token and new password.
            </summary>
            <param name="dto">Contains the reset token and new password information.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> on successful reset,  
            <c>400 Bad Request</c> if the token is invalid or expired.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ApproveUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Approves a pending user account. Only accessible to administrators.
            </summary>
            <param name="id">The identifier of the user account to approve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> if the user is approved,  
            <c>404 Not Found</c> if the user is not found or not pending,  
            <c>403 Forbidden</c> if the caller is not an administrator.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.AuthsController.ResendConfirmation(BackendBiblioMate.DTOs.ResendEmailConfirmationDto,System.Threading.CancellationToken)">
            <summary>
            Resends the email confirmation link to the given email address.
            </summary>
            <param name="dto">The email of the user requesting confirmation.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> if the confirmation email was successfully sent.</returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.BooksController">
            <summary>
            API controller for managing books.
            Provides endpoints for retrieval, creation, update, deletion, and search with filters.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.#ctor(BackendBiblioMate.Interfaces.IBookService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.BooksController"/> class.
            </summary>
            <param name="service">The service used to manage book entities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="service"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.GetBooks(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged and sorted list of books.
            Supports ETag-based conditional requests to optimize performance.
            </summary>
            <param name="pageNumber">The current page number. Defaults to 1.</param>
            <param name="pageSize">The number of items per page. Defaults to 20.</param>
            <param name="sortBy">The property name used for sorting. Defaults to "Title".</param>
            <param name="ascending">Whether the sorting order is ascending. Defaults to true.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a paged result of <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>,  
            <c>304 Not Modified</c> if the ETag matches and the data has not changed.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.GetBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single book by its unique identifier.
            </summary>
            <param name="id">The book identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> if found,  
            <c>404 Not Found</c> if the book does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.CreateBook(BackendBiblioMate.DTOs.BookCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new book entry. Requires Librarian or Admin role.
            </summary>
            <param name="dto">The data required to create the book.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> and its location.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.UpdateBook(System.Int32,BackendBiblioMate.DTOs.BookUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing book entry. Requires Librarian or Admin role.
            </summary>
            <param name="id">The identifier of the book to update.</param>
            <param name="dto">The updated book data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if the update was successful,  
            <c>404 Not Found</c> if the book does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.DeleteBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a book entry by its unique identifier. Requires Librarian or Admin role.
            </summary>
            <param name="id">The identifier of the book to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if the deletion was successful,  
            <c>404 Not Found</c> if the book does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.SearchBooks(BackendBiblioMate.DTOs.BookSearchDto,System.Threading.CancellationToken)">
            <summary>
            Searches books with multiple optional filters.
            If the user is authenticated, the user ID is included for personalized results.
            </summary>
            <param name="dto">The search criteria (title, author, genre, etc.).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with the list of matching books.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.BooksController.GetGenres(System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of all available genre names.
            </summary>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of genre names.</returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.EditorsController">
            <summary>
            API controller for managing editors (publishers).
            Provides CRUD operations and utility endpoints for editor resources.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.#ctor(BackendBiblioMate.Interfaces.IEditorService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.EditorsController"/> class.
            </summary>
            <param name="service">The service used to encapsulate business logic for editors.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.GetEditors(System.Threading.CancellationToken)">
            <summary>
            Retrieves all editors.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of editors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.GetEditor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single editor by its unique identifier.
            </summary>
            <param name="id">The editor identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the editor,  
            <c>404 Not Found</c> if the editor does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.CreateEditor(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new editor. Requires Admin or Librarian role.
            </summary>
            <param name="dto">The data required to create the editor.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created editor,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.UpdateEditor(System.Int32,BackendBiblioMate.DTOs.EditorUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing editor. Requires Admin or Librarian role.
            </summary>
            <param name="id">The editor identifier.</param>
            <param name="dto">The updated editor data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if update was successful,  
            <c>404 Not Found</c> if the editor does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.DeleteEditor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an editor by its unique identifier. Requires Admin or Librarian role.
            </summary>
            <param name="id">The editor identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if deletion was successful,  
            <c>404 Not Found</c> if the editor does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.SearchEditors(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches editors by a query string.
            </summary>
            <param name="search">Optional search term to filter editors by name.</param>
            <param name="take">Maximum number of results to return. Defaults to 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a filtered list of editors.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.EditorsController.EnsureEditor(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures an editor exists by name. If not, creates a new one. Requires Admin or Librarian role.
            </summary>
            <param name="dto">The data used to check or create the editor.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the existing editor,  
            <c>201 Created</c> with the new editor if it was created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.GenresController">
            <summary>
            API controller for managing genres.
            Provides CRUD operations and utility endpoints for genres.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.#ctor(BackendBiblioMate.Interfaces.IGenreService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.GenresController"/> class.
            </summary>
            <param name="service">The service encapsulating genre-related business logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.GetGenres(System.Threading.CancellationToken)">
            <summary>
            Retrieves all genres.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of genres.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.GetGenre(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single genre by its unique identifier.
            </summary>
            <param name="id">The genre identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the genre,  
            <c>404 Not Found</c> if the genre does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.CreateGenre(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new genre. Requires Librarian or Admin role.
            </summary>
            <param name="dto">The data required to create the genre.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created genre,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.UpdateGenre(System.Int32,BackendBiblioMate.DTOs.GenreUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing genre. Requires Librarian or Admin role.
            </summary>
            <param name="id">The genre identifier.</param>
            <param name="dto">The updated genre data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if update was successful,  
            <c>404 Not Found</c> if the genre does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.DeleteGenre(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a genre by its unique identifier. Requires Librarian or Admin role.
            </summary>
            <param name="id">The genre identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if deletion was successful,  
            <c>404 Not Found</c> if the genre does not exist,  
            <c>401 Unauthorized</c> or <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.Search(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches genres by a query string. Supports autocomplete scenarios.
            </summary>
            <param name="search">Optional search term to filter genres by name.</param>
            <param name="take">Maximum number of results to return. Defaults to 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with the filtered list of genres.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.GenresController.Ensure(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Ensures a genre exists by name. If not, creates a new one. Requires Librarian or Admin role.
            </summary>
            <param name="dto">The data used to check or create the genre.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the existing genre,  
            <c>201 Created</c> with the new genre if it was created.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.HistoriesController">
            <summary>
            API controller for retrieving a user’s history of domain events.
            Accessible only to authenticated users.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.HistoriesController.#ctor(BackendBiblioMate.Interfaces.IHistoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.HistoriesController"/> class.
            </summary>
            <param name="historyService">The service responsible for logging and retrieving history events.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.HistoriesController.GetUserHistory(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged list of history events for a specific user.
            </summary>
            <param name="userId">The identifier of the user whose history is requested.</param>
            <param name="page">The page number (1-based). Default is <c>1</c>.</param>
            <param name="pageSize">The number of items per page. Default is <c>20</c>.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.HistoryReadDto"/>,  
            <c>403 Forbidden</c> if the current user is neither the owner nor has Librarian/Admin role.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.LoanActiveRowDto">
            <summary>
            Represents a simplified row of an active loan returned by <c>GET /api/v1/loans/active/me</c>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.LoansController">
            <summary>
            API controller for managing book loans.
            Provides endpoints for creating, retrieving, updating, returning, extending, and deleting loans.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.LocationsController">
            <summary>
            Controller for managing library locations such as floors, aisles, shelves, and levels.
            Provides endpoints for retrieving and ensuring complete location hierarchies.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.#ctor(BackendBiblioMate.Interfaces.ILocationService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Controllers.LocationsController"/>.
            </summary>
            <param name="svc">The location service handling location logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetFloors(System.Threading.CancellationToken)">
            <summary>
            Retrieves all floors.
            </summary>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.FloorReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetAisles(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all aisles for a given floor.
            </summary>
            <param name="floor">The floor number.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.AisleReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetShelves(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves for a given floor and aisle.
            </summary>
            <param name="floor">The floor number.</param>
            <param name="aisle">The aisle code or name.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.ShelfMiniReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.GetLevels(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all levels for a given shelf.
            </summary>
            <param name="shelfId">The shelf identifier.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>A list of <see cref="T:BackendBiblioMate.DTOs.LevelReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.LocationsController.Ensure(BackendBiblioMate.DTOs.LocationEnsureDto,System.Threading.CancellationToken)">
            <summary>
            Ensures a complete location exists (floor, aisle, shelf, and level).
            If missing, creates it atomically.
            </summary>
            <param name="dto">The location details.</param>
            <param name="ct">Token to monitor for cancellation requests.</param>
            <returns>The ensured <see cref="T:BackendBiblioMate.DTOs.LocationReadDto"/>.</returns>
            <remarks>Only accessible to Admins and Librarians.</remarks>
        </member>
        <member name="T:BackendBiblioMate.Controllers.NotificationsController">
            <summary>
            API controller for managing user notifications.
            Provides CRUD operations on <see cref="T:BackendBiblioMate.Models.Notification"/> entities,
            dispatches real-time SignalR notifications, and logs each dispatch.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Controllers.NotificationsController.CurrentUserId">
            <summary>Gets the current authenticated user's identifier.</summary>
        </member>
        <member name="P:BackendBiblioMate.Controllers.NotificationsController.IsPrivileged">
            <summary>Indicates whether the current user has librarian or admin rights.</summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.FindNotificationAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>Finds a notification entity by its primary key.</summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.GetNotifications(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notifications visible to the current user.
            </summary>
            <remarks>
            - Admins/Librarians see all notifications.  
            - Regular users only see their own notifications.
            </remarks>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.NotificationReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.GetNotification(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific notification by its identifier.
            </summary>
            <remarks>
            - Only the owner of the notification, Librarians, or Admins may access this endpoint.
            </remarks>
            <param name="id">The notification identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the notification;  
            <c>404 Not Found</c> if not found;  
            <c>403 Forbidden</c> if access is denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.CreateNotification(BackendBiblioMate.DTOs.NotificationCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new notification, dispatches it in real time via SignalR, and logs the event.
            </summary>
            <remarks>
            - Only Librarians and Admins may call this endpoint.  
            - Automatically logs the notification dispatch and sends a real-time message.
            </remarks>
            <param name="dto">Notification data to create.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns><c>201 Created</c> with the created notification.</returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.UpdateNotification(System.Int32,BackendBiblioMate.DTOs.NotificationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing notification’s title, message, and owner.
            </summary>
            <remarks>
            - Only Librarians and Admins may call this endpoint.  
            - The <paramref name="id"/> must match <see cref="P:BackendBiblioMate.DTOs.NotificationUpdateDto.NotificationId"/>.
            </remarks>
            <param name="id">The identifier of the notification to update.</param>
            <param name="dto">The updated notification data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if updated;  
            <c>400 Bad Request</c> if IDs mismatch;  
            <c>404 Not Found</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.DeleteNotification(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a notification record.
            </summary>
            <remarks>
            - Only Librarians and Admins may call this endpoint.  
            - Removes the notification permanently from the database.
            </remarks>
            <param name="id">The identifier of the notification to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 No Content</c> if deleted;  
            <c>404 Not Found</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsController.ToDto(BackendBiblioMate.Models.Notification)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.Notification"/> entity to its DTO.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.NotificationsLogsController">
            <summary>
            API controller for managing notification log entries.
            Provides endpoints to retrieve and create <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> entries
            stored in the MongoDB collection.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.#ctor(BackendBiblioMate.Interfaces.IMongoLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.NotificationsLogsController"/>.
            </summary>
            <param name="mongoLogService">Service for handling notification log persistence.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.GetAll(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log entries.
            </summary>
            <param name="cancellationToken">Cancellation token for request abortion.</param>
            <returns>
            <c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.GetById(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a notification log entry by its identifier.
            </summary>
            <param name="id">The ObjectId of the log entry as a string.</param>
            <param name="cancellationToken">Cancellation token for request abortion.</param>
            <returns>
            <c>200 OK</c> with the <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>,
            or <c>404 Not Found</c> if no matching document exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.NotificationsLogsController.Create(BackendBiblioMate.DTOs.NotificationLogCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new notification log entry.
            </summary>
            <param name="dto">The data transfer object containing log details.</param>
            <param name="cancellationToken">Cancellation token for request abortion.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>
            and a Location header pointing to <see cref="M:BackendBiblioMate.Controllers.NotificationsLogsController.GetById(System.String,System.Threading.CancellationToken)"/>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.RecommendationsController">
            <summary>
            Controller for managing book recommendations for users.
            Provides endpoints to retrieve personalized book suggestions.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.RecommendationsController.#ctor(BackendBiblioMate.Interfaces.IRecommendationService)">
            <summary>
            Constructs a new <see cref="T:BackendBiblioMate.Controllers.RecommendationsController"/>.
            </summary>
            <param name="service">Service providing recommendation logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.RecommendationsController.GetRecommendations(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves up to 10 recommended books for the specified user based on their preferred genres.
            </summary>
            <param name="userId">Identifier of the user to get recommendations for.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.RecommendationReadDto"/>;
            <c>403 Forbidden</c> if a non-admin attempts to access another user's recommendations.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ReportsController">
            <summary>
            Controller for managing analytical reports.
            Provides CRUD endpoints for <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/> and enforces ownership.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.#ctor(BackendBiblioMate.Interfaces.IReportService)">
            <summary>
            Constructs a new <see cref="T:BackendBiblioMate.Controllers.ReportsController"/>.
            </summary>
            <param name="service">Service for report operations.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.GetReports(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports (Admins &amp; Librarians only).
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a list of <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.GetReport(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific report by its identifier.
            </summary>
            <param name="id">The report identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>,
            <c>404 NotFound</c> if missing,
            <c>403 Forbidden</c> if access denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.CreateReport(BackendBiblioMate.DTOs.ReportCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new report for the current user.
            </summary>
            <param name="dto">The report creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.UpdateReport(System.Int32,BackendBiblioMate.DTOs.ReportUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing report.
            </summary>
            <param name="id">The report identifier.</param>
            <param name="dto">The updated report data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success,
            <c>400 BadRequest</c> if IDs mismatch,
            <c>404 NotFound</c>,
            <c>403 Forbidden</c> if access denied.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReportsController.DeleteReport(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a specific report.
            </summary>
            <param name="id">The report identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success,
            <c>404 NotFound</c>,
            <c>403 Forbidden</c> if access denied.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ReservationsController">
            <summary>
            Controller for managing book reservations.
            Users may create and manage their own reservations,
            while Librarians and Admins have broader access.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BackendBiblioMate.Controllers.ReservationsController.GetReservations(System.Threading.CancellationToken)" -->
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetUserReservations(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves active reservations for a specific user.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetPendingForBook(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves pending reservations for a specific book.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.GetReservation(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single reservation by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.CreateReservation(BackendBiblioMate.DTOs.ReservationCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new reservation.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.UpdateReservation(System.Int32,BackendBiblioMate.DTOs.ReservationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing reservation.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.DeleteReservation(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a reservation.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ReservationsController.CleanupExpiredReservations(System.Threading.CancellationToken)">
            <summary>
            Purges expired reservations (>48h after availability), restores stock, and logs each removal.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ShelfLevelsController">
            <summary>
            Controller for managing shelf levels.
            Provides CRUD operations and paginated queries.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.#ctor(BackendBiblioMate.Interfaces.IShelfLevelService)">
            <summary>
            Constructs a new <see cref="T:BackendBiblioMate.Controllers.ShelfLevelsController"/>.
            </summary>
            <param name="svc">Service for shelf level operations.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.GetShelfLevels(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelf levels with optional shelf filtering and pagination.
            </summary>
            <param name="shelfId">Optional shelf identifier used to filter results.</param>
            <param name="page">Page index (1-based). Default is <c>1</c>.</param>
            <param name="pageSize">Number of items per page. Default is <c>10</c>.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with a collection of <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.GetShelfLevel(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific shelf level by its identifier.
            </summary>
            <param name="id">The shelf-level identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>200 OK</c> with the requested <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>,
            or <c>404 NotFound</c> if it does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.CreateShelfLevel(BackendBiblioMate.DTOs.ShelfLevelCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf level.
            Accessible to Librarians and Admins only.
            </summary>
            <param name="dto">The shelf-level DTO to create.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>201 Created</c> with the created entity and its URI.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.UpdateShelfLevel(System.Int32,BackendBiblioMate.DTOs.ShelfLevelUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf level.
            Accessible to Librarians and Admins only.
            </summary>
            <param name="id">The identifier of the shelf level to update.</param>
            <param name="dto">The modified shelf-level DTO.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> on success;
            <c>400 BadRequest</c> if the IDs do not match;
            <c>404 NotFound</c> if the shelf level does not exist.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelfLevelsController.DeleteShelfLevel(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf level.
            Accessible to Librarians and Admins only.
            </summary>
            <param name="id">The identifier of the shelf level to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>204 NoContent</c> when deletion succeeds;
            <c>404 NotFound</c> if the shelf level is not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ShelvesController">
            <summary>
            Controller for managing shelves.
            Provides CRUD and paginated, zone-filtered endpoints for <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.#ctor(BackendBiblioMate.Interfaces.IShelfService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.ShelvesController"/>.
            </summary>
            <param name="service">Service encapsulating shelf logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.GetShelves(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves with optional zone filtering and pagination.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.GetShelf(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific shelf by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.CreateShelf(BackendBiblioMate.DTOs.ShelfCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.UpdateShelf(System.Int32,BackendBiblioMate.DTOs.ShelfUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ShelvesController.DeleteShelf(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.StocksController">
            <summary>
            Controller for managing stock entries (inventory).
            Provides CRUD operations and quantity adjustments for <see cref="T:BackendBiblioMate.DTOs.StockReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IStockService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.StocksController"/>.
            </summary>
            <param name="context">EF Core database context.</param>
            <param name="stockService">Service encapsulating stock domain logic.</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.GetStocks(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all stock entries with optional pagination.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.GetStock(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific stock entry by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.CreateStock(BackendBiblioMate.DTOs.StockCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new stock entry.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.UpdateStock(System.Int32,BackendBiblioMate.DTOs.StockUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing stock entry.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.AdjustStockQuantity(System.Int32,BackendBiblioMate.DTOs.StockAdjustmentDto,System.Threading.CancellationToken)">
            <summary>
            Adjusts the quantity of a stock entry.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.StocksController.DeleteStock(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a stock entry.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.TagsController">
            <summary>
            Controller for managing tags.
            Provides CRUD endpoints that support catalog-wide tagging.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.Search(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Quick search endpoint for autocomplete (by name).
            </summary>
            <param name="search">Optional search term.</param>
            <param name="take">Max number of results (1..100).</param>
        </member>
        <member name="M:BackendBiblioMate.Controllers.TagsController.Ensure(BackendBiblioMate.DTOs.TagCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates the tag if it does not exist (idempotent).
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.UsersController">
            <summary>
            Controller for managing application users.
            All administration endpoints are restricted to the <c>Admin</c> role,
            while authenticated users may access and update their own profile via <c>/me</c> routes.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.#ctor(BackendBiblioMate.Interfaces.IUserService,BackendBiblioMate.Interfaces.IUserActivityLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.UsersController"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.GetUsers(System.Threading.CancellationToken)">
            <summary>
            Retrieves all users (admin only).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.GetUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a user by its identifier (admin only).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.PostUser(BackendBiblioMate.DTOs.UserCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new user via the admin panel.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.UpdateUser(System.Int32,UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates basic info of an existing user (admin only).
            Does <b>not</b> allow changing password or role.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.UpdateCurrentUser(UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the currently authenticated user’s personal data.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.GetCurrentUser(System.Threading.CancellationToken)">
            <summary>
            Retrieves the profile of the currently authenticated user.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.UpdateUserRole(System.Int32,BackendBiblioMate.DTOs.UserRoleUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates a user’s role (admin only).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.DeleteUser(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a user account (admin only). Cannot delete your own account.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.UsersController.DeleteCurrentUser(System.Threading.CancellationToken)">
            <summary>
            Deletes the currently authenticated user's account.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Controllers.ZonesController">
            <summary>
            Controller for managing library zones (physical areas in which shelves are organized).
            Supports paginated queries and full CRUD operations for <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.#ctor(BackendBiblioMate.Interfaces.IZoneService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Controllers.ZonesController"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.GetZones(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all zones with optional pagination.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.GetZone(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific zone by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.CreateZone(BackendBiblioMate.DTOs.ZoneCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new zone.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.UpdateZone(System.Int32,BackendBiblioMate.DTOs.ZoneUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing zone.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Controllers.ZonesController.DeleteZone(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a zone.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Data.BiblioMateDbContext">
            <summary>
            Entity Framework Core database context for BiblioMate.
            Configures entity sets, indexes, relationships, and
            encryption of sensitive fields.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BackendBiblioMate.Data.BiblioMateDbContext},BackendBiblioMate.Services.Infrastructure.Security.EncryptionService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Data.BiblioMateDbContext"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the EF Core model.
            Defines indexes, relationships, precision, and encryption.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.ConfigureIndexes(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures unique constraints and indexes for entities.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.CreateEncryptionConverter">
            <summary>
            Builds a value converter that encrypts/decrypts non-null string properties.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Data.BiblioMateDbContext.CreateNullableEncryptionConverter">
            <summary>
            Builds a value converter that encrypts/decrypts nullable string properties.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.AuthorCreateDto">
            <summary>
            DTO used to create a new author.
            Contains the minimal required information for author creation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AuthorCreateDto.Name">
            <summary>
            Gets the full name of the author.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>J.K. Rowling</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.AuthorReadDto">
            <summary>
            DTO returned when retrieving author information.
            Contains the identifier and full name of the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AuthorReadDto.AuthorId">
            <summary>
            Gets the unique identifier of the author.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.AuthorReadDto.Name">
            <summary>
            Gets the full name of the author.
            </summary>
            <example>J.K. Rowling</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoginDto">
            <summary>
            DTO used for user authentication during login.
            Contains the user’s credentials for obtaining a token.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoginDto.Email">
            <summary>
            Gets the registered email address of the user.
            </summary>
            <example>user@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoginDto.Password">
            <summary>
            Gets the password of the user.
            </summary>
            <remarks>
            Must be at least 6 characters long.
            </remarks>
            <example>P@ssw0rd!</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RegisterDto">
            <summary>
            DTO used to register a new user.
            Contains all fields required by the multi-step signup form.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.FirstName">
            <summary>
            Gets the user's given name.
            </summary>
            <remarks>
            Must be between 2 and 60 characters.
            </remarks>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.LastName">
            <summary>
            Gets the user's family name.
            </summary>
            <remarks>
            Must be between 2 and 60 characters.
            </remarks>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Email">
            <summary>
            Gets the email address of the user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Phone">
            <summary>
            Gets the phone number of the user.
            </summary>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Address1">
            <summary>
            Gets the primary address line of the user.
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Address2">
            <summary>
            Gets the secondary address line of the user (optional).
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.DateOfBirth">
            <summary>
            Gets the user's date of birth (optional).
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.Password">
            <summary>
            Gets the password for the user account.
            </summary>
            <remarks>
            Must be between 6 and 100 characters.
            </remarks>
            <example>P@ssw0rd!</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.ProfileImage">
            <summary>
            Gets the profile image payload or path (optional).
            </summary>
            <remarks>
            Can be a URL/path or a Base64-encoded string depending on the chosen storage strategy.
            </remarks>
            <example>https://cdn.example.com/u/42/profile.png</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RegisterDto.FavoriteGenreIds">
            <summary>
            Gets the list of preferred genre identifiers (optional).
            </summary>
            <example>[1, 3, 7]</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RequestPasswordResetDto">
            <summary>
            DTO used to initiate a password reset request.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RequestPasswordResetDto.Email">
            <summary>
            Email address of the user requesting password reset.
            </summary>
            <example>user@example.com</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ResetPasswordDto">
            <summary>
            DTO used to reset a user's password using a valid reset token.
            Contains the reset token and the new password to apply.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ResetPasswordDto.Token">
            <summary>
            Gets the password reset token sent to the user's email.
            </summary>
            <example>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ResetPasswordDto.NewPassword">
            <summary>
            Gets the new password for the user's account.
            </summary>
            <remarks>
            Must be between 6 and 100 characters.
            </remarks>
            <example>NewP@ssw0rd!</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookCreateDto">
            <summary>
            DTO used to create a new book entry.
            You can either provide an existing <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.ShelfLevelId"/> or a semantic <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.Location"/>
            (Floor + Aisle + ShelfName + LevelNumber) which will be ensured/created server-side.
            Optionally, an initial <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.StockQuantity"/> can be provided and a stock row will be created.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Title">
            <summary>Gets the title of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Isbn">
            <summary>Gets the International Standard Book Number (ISBN).</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Description">
            <summary>Gets the description or synopsis of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.PublicationDate">
            <summary>Gets the publication date of the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.AuthorId">
            <summary>Gets the identifier of the author.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.GenreId">
            <summary>Gets the identifier of the genre.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.EditorId">
            <summary>Gets the identifier of the editor.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.ShelfLevelId">
            <summary>
            If provided, the book will be placed on that existing shelf level.
            If not provided, the server will try to <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.Location"/>-ensure and use the created level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.Location">
            <summary>
            Optional semantic location to ensure (Zone/Shelf/ShelfLevel). Used when <see cref="P:BackendBiblioMate.DTOs.BookCreateDto.ShelfLevelId"/> is not set.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.CoverUrl">
            <summary>Gets the URL of the book’s cover image.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.TagIds">
            <summary>Gets the list of tag identifiers associated with the book.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.BookCreateDto.StockQuantity">
            <summary>
            Optional initial stock quantity for the book. If provided, a stock entry will be created/updated.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookSearchDto">
            <summary>
            DTO used for advanced filtering when searching for books.
            All fields optional.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.BookUpdateDto">
            <summary>
            DTO used to update an existing book.
            Contains fields that can be modified on a book record.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.EditorCreateDto">
            <summary>
            DTO used to create or update an editor (publisher).
            Contains the minimal information required for editor operations.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorCreateDto.Name">
            <summary>
            Gets the name of the editor or publisher.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>Penguin Random House</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.EditorReadDto">
            <summary>
            DTO returned when retrieving editor (publisher) data.
            Contains the identifier and name of the editor.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorReadDto.EditorId">
            <summary>
            Gets the unique identifier of the editor.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorReadDto.Name">
            <summary>
            Gets the name of the editor or publisher.
            </summary>
            <example>Penguin Random House</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.EditorUpdateDto">
            <summary>
            DTO used to update an existing editor (publisher).
            Contains the minimal information that can be modified for an editor.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.EditorUpdateDto.Name">
            <summary>
            Gets the new name of the editor or publisher.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>HarperCollins</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.GenreCreateDto">
            <summary>
            DTO used to create or update a genre.
            Contains the minimal information required for genre operations.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreCreateDto.Name">
            <summary>
            Gets the name of the genre.
            </summary>
            <remarks>
            Must be between 2 and 50 characters.
            </remarks>
            <example>Science Fiction</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.GenreReadDto">
            <summary>
            DTO returned when retrieving genre information.
            Contains the identifier and name of the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreReadDto.GenreId">
            <summary>
            Gets the unique identifier of the genre.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreReadDto.Name">
            <summary>
            Gets the name of the genre.
            </summary>
            <example>Science Fiction</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.GenreUpdateDto">
            <summary>
            DTO used to update an existing genre.
            Contains the minimal information that can be modified for a genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.GenreUpdateDto.Name">
            <summary>
            Gets the new name of the genre.
            </summary>
            <remarks>
            Must be between 2 and 100 characters.
            </remarks>
            <example>Science Fiction</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.HistoryReadDto">
            <summary>
            DTO returned when querying a user's history of events.
            Contains details about each historical action related to a user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.HistoryId">
            <summary>
            Gets the unique identifier of the history record.
            </summary>
            <example>123</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.EventType">
            <summary>
            Gets the type of event that occurred.
            </summary>
            <remarks>
            Examples: “Loan”, “Return”, “Reservation”, “Cancel”.
            </remarks>
            <example>Loan</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.EventDate">
            <summary>
            Gets the date and time when the event occurred (UTC).
            </summary>
            <example>2025-06-23T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.LoanId">
            <summary>
            Gets the identifier of the related loan, if applicable; otherwise null.
            </summary>
            <example>45</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.HistoryReadDto.ReservationId">
            <summary>
            Gets the identifier of the related reservation, if applicable; otherwise null.
            </summary>
            <example>78</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanCreateDto">
            <summary>Payload pour créer un prêt.</summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanCreateDto.UserId">
            <summary>
            Identifiant de l’utilisateur emprunteur. Optionnel : si non fourni,
            on le déduit du token (utilisateur standard). Requis seulement pour le staff.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanCreateDto.BookId">
            <summary>Identifiant du livre à emprunter.</summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanReadDto">
            <summary>
            DTO returned when retrieving loan information, including user and book details.
            Contains all fields relevant to the loan lifecycle and its status.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.LoanId">
            <summary>
            Gets the unique identifier of the loan.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.UserId">
            <summary>
            Gets the identifier of the user who borrowed the book.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.UserName">
            <summary>
            Gets the full name of the user who borrowed the book.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.BookId">
            <summary>
            Gets the identifier of the borrowed book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.BookTitle">
            <summary>
            Gets the title of the borrowed book.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.LoanDate">
            <summary>
            Gets the date when the loan started (UTC).
            </summary>
            <example>2025-06-01T10:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.DueDate">
            <summary>
            Gets the date when the book is due to be returned (UTC).
            </summary>
            <example>2025-06-15T10:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.ReturnDate">
            <summary>
            Gets the date when the book was actually returned, if applicable (UTC).
            </summary>
            <example>2025-06-14T16:45:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReadDto.Fine">
            <summary>
            Gets the fine amount charged for late return, if any.
            </summary>
            <example>0.00</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanReturnedResult">
            <summary>
            DTO returned when a loan is returned, including fine and notification flag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReturnedResult.ReservationNotified">
            <summary>
            Gets or sets whether a reservation notification was sent.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanReturnedResult.Fine">
            <summary>
            Gets or sets the fine amount charged for late return, if any.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.DTOs.LoanUpdateDto">
            <summary>
            DTO used to update the due date of an existing loan.
            Contains the new due date to apply to the loan record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.LoanUpdateDto.DueDate">
            <summary>
            Gets the new due date for the loan (UTC).
            </summary>
            <example>2025-07-15T10:30:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.FloorReadDto">
            Suggestion pour les listes (UI)
        </member>
        <member name="M:BackendBiblioMate.DTOs.FloorReadDto.#ctor(System.Int32)">
            Suggestion pour les listes (UI)
        </member>
        <member name="T:BackendBiblioMate.DTOs.LocationEnsureDto">
            Demande d’ensure: valeurs “métier” saisies côté UI
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationEnsureDto.ShelfName">
            Rayon = Shelf.Name
        </member>
        <member name="P:BackendBiblioMate.DTOs.LocationEnsureDto.LevelNumber">
            Étagère = ShelfLevel.LevelNumber (1 = bas)
        </member>
        <member name="T:BackendBiblioMate.DTOs.LocationReadDto">
            Réponse d’ensure: IDs et rappel des valeurs
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationCreateDto">
            <summary>
            DTO used to request the creation of a new notification.
            Contains details needed to send a notification to a user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationCreateDto.UserId">
            <summary>
            Gets the identifier of the user who will receive the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationCreateDto.Title">
            <summary>
            Gets the title of the notification.
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationCreateDto.Message">
            <summary>
            Gets the body message of the notification.
            </summary>
            <remarks>
            Maximum length of 1000 characters.
            </remarks>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationLogCreateDto">
            <summary>
            DTO used to create a new notification log entry.
            Contains all necessary information to log a notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.UserId">
            <summary>
            Gets the identifier of the user who received the notification.
            </summary>
            <example>123</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.Type">
            <summary>
            Gets the type of notification.
            </summary>
            <remarks>
            Examples: LoanReminder, ReservationAvailable, OverdueAlert.
            </remarks>
            <example>LoanReminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.Message">
            <summary>
            Gets the content of the notification message.
            </summary>
            <example>Your loan for “The Hobbit” is due tomorrow.</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationLogCreateDto.SentAt">
            <summary>
            Gets the UTC timestamp when the notification was sent.
            </summary>
            <remarks>
            Defaults to the current UTC time if not provided.
            </remarks>
            <example>2025-06-30T14:25:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationReadDto">
            <summary>
            DTO returned when retrieving notification information.
            Contains details of a sent notification and recipient.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.NotificationId">
            <summary>
            Gets the unique identifier of the notification.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.UserId">
            <summary>
            Gets the identifier of the user who received the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.UserName">
            <summary>
            Gets the full name of the user who received the notification.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.Title">
            <summary>
            Gets the title of the notification.
            </summary>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.Message">
            <summary>
            Gets the body message of the notification.
            </summary>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationReadDto.Timestamp">
            <summary>
            Gets the UTC timestamp when the notification was created.
            </summary>
            <example>2025-07-04T15:30:00Z</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.NotificationUpdateDto">
            <summary>
            DTO used to update an existing notification.
            Contains fields that can be modified on a notification record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.NotificationId">
            <summary>
            Gets the unique identifier of the notification to update.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.UserId">
            <summary>
            Gets the identifier of the user who will receive the notification.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.Title">
            <summary>
            Gets the updated title of the notification.
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Overdue Book Reminder</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.NotificationUpdateDto.Message">
            <summary>
            Gets the updated body message of the notification.
            </summary>
            <remarks>
            Maximum length of 1000 characters.
            </remarks>
            <example>Your loan for “The Hobbit” is overdue by 3 days.</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.RecommendationReadDto">
            <summary>
            DTO returned when retrieving recommended books for a user.
            Contains key details for display in recommendation lists.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.BookId">
            <summary>
            Gets the unique identifier of the recommended book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.Title">
            <summary>
            Gets the title of the recommended book.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.Genre">
            <summary>
            Gets the name of the genre of the recommended book.
            </summary>
            <example>Fantasy</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.Author">
            <summary>
            Gets the name of the author of the recommended book.
            </summary>
            <example>J.R.R. Tolkien</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.RecommendationReadDto.CoverUrl">
            <summary>
            Gets the URL of the recommended book’s cover image.
            </summary>
            <example>https://example.com/covers/the-hobbit.jpg</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReportCreateDto">
            <summary>
            DTO used to request the creation of a new analytical report.
            Only the Title is provided by the client; the Content is generated on the server.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportCreateDto.Title">
            <summary>
            Gets the title for the new report.
            </summary>
            <remarks>
            Must be between 1 and 200 characters.
            </remarks>
            <example>Monthly Loan Statistics</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReportReadDto">
            <summary>
            DTO returned when retrieving report information.
            Contains metadata and generated content of an analytical report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.ReportId">
            <summary>
            Gets the unique identifier of the report.
            </summary>
            <example>8</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.Title">
            <summary>
            Gets the title of the report.
            </summary>
            <example>Monthly Usage Statistics</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.Content">
            <summary>
            Gets the detailed content of the report.
            </summary>
            <remarks>
            This may include paragraphs, tables, or summary points generated by the system.
            </remarks>
            <example>The number of loans increased by 15% compared to the previous month...</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.GeneratedDate">
            <summary>
            Gets the date and time when the report was generated (UTC).
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.UserId">
            <summary>
            Gets the identifier of the user who generated the report.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportReadDto.UserName">
            <summary>
            Gets the full name of the user who generated the report.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReportUpdateDto">
            <summary>
            DTO used to update an existing report.
            Contains the fields that can be modified on a report record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportUpdateDto.ReportId">
            <summary>
            Gets the unique identifier of the report to update.
            </summary>
            <example>8</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportUpdateDto.Title">
            <summary>
            Gets the updated title of the report.
            </summary>
            <remarks>
            Maximum length of 100 characters.
            </remarks>
            <example>Monthly Usage Summary</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReportUpdateDto.Content">
            <summary>
            Gets the updated detailed content of the report.
            </summary>
            <remarks>
            Maximum length of 1000 characters.
            </remarks>
            <example>The number of loans increased by 20% compared to the previous month...</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReservationCreateDto">
            <summary>
            DTO used to request the creation of a new reservation.
            Contains identifiers of the user and the book to reserve.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationCreateDto.BookId">
            <summary>
            Gets the identifier of the book to reserve.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationCreateDto.UserId">
            <summary>
            Gets the identifier of the user making the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReservationReadDto">
            <summary>
            DTO returned when retrieving reservation information, including book and user details.
            Contains all relevant fields to display reservation status and metadata.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.ReservationId">
            <summary>
            Gets the unique identifier of the reservation.
            </summary>
            <example>23</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.UserId">
            <summary>
            Gets the identifier of the user who made the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.UserName">
            <summary>
            Gets the full name of the user who made the reservation.
            </summary>
            <example>Jane Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.BookId">
            <summary>
            Gets the identifier of the reserved book.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.BookTitle">
            <summary>
            Gets the title of the reserved book.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.ReservationDate">
            <summary>
            Gets the date and time when the reservation was created (UTC).
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationReadDto.Status">
            <summary>
            Gets the current status of the reservation.
            </summary>
            <remarks>
            Possible values include Pending, Completed, Cancelled.
            </remarks>
            <example>Pending</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ReservationUpdateDto">
            <summary>
            DTO used to update an existing reservation.
            Contains all fields that can be modified on a reservation record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.ReservationId">
            <summary>
            Gets the unique identifier of the reservation to update.
            </summary>
            <example>23</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.BookId">
            <summary>
            Gets the identifier of the book associated with the reservation.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.UserId">
            <summary>
            Gets the identifier of the user who made the reservation.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.ReservationDate">
            <summary>
            Gets the date and time when the reservation was created (UTC).
            </summary>
            <example>2025-06-20T14:30:00Z</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ReservationUpdateDto.Status">
            <summary>
            Gets the updated status of the reservation.
            </summary>
            <remarks>
            Must be one of the defined <see cref="T:BackendBiblioMate.Models.Enums.ReservationStatus"/> values.
            </remarks>
            <example>Available</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfLevelCreateDto">
            <summary>
            DTO used to create a new shelf level.
            Contains the level details and optional capacity constraints.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.LevelNumber">
            <summary>
            Gets the level number on the shelf.
            </summary>
            <remarks>
            1 corresponds to the bottom level, increasing upwards.
            </remarks>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.ShelfId">
            <summary>
            Gets the identifier of the shelf to which this level belongs.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.MaxHeight">
            <summary>
            Gets the optional maximum height capacity in centimeters.
            </summary>
            <remarks>
            If unspecified, there is no height constraint.
            </remarks>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.Capacity">
            <summary>
            Gets the optional maximum number of books this level can hold.
            </summary>
            <remarks>
            If unspecified, capacity is considered unlimited.
            </remarks>
            <example>50</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelCreateDto.CurrentLoad">
            <summary>
            Gets the optional current number of books on this level.
            </summary>
            <remarks>
            Used to track real-time occupancy.
            </remarks>
            <example>12</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfLevelReadDto">
            <summary>
            DTO returned when retrieving shelf level information.
            Contains details about a specific level within a shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.ShelfLevelId">
            <summary>
            Gets the unique identifier of the shelf level.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.LevelNumber">
            <summary>
            Gets the numeric level on the shelf (e.g., 1 for bottom).
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.ShelfId">
            <summary>
            Gets the identifier of the parent shelf.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.ShelfName">
            <summary>
            Gets the name of the parent shelf.
            </summary>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.MaxHeight">
            <summary>
            Gets the maximum height in centimeters of books that can fit on this level.
            </summary>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.Capacity">
            <summary>
            Gets the maximum number of books this level can hold.
            </summary>
            <example>20</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelReadDto.CurrentLoad">
            <summary>
            Gets the current number of books stored on this level.
            </summary>
            <example>12</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfLevelUpdateDto">
            <summary>
            DTO used to update an existing shelf level.
            Contains the fields that can be modified on a shelf level record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.ShelfLevelId">
            <summary>
            Gets the unique identifier of the shelf level to update.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.LevelNumber">
            <summary>
            Gets the updated numeric level on the shelf (e.g., 1 for bottom).
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.ShelfId">
            <summary>
            Gets the identifier of the shelf to which this level belongs.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.MaxHeight">
            <summary>
            Gets the maximum height in centimeters of books that can fit on this level.
            </summary>
            <remarks>
            If unspecified, there is no height constraint.
            </remarks>
            <example>30</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.Capacity">
            <summary>/// Gets the maximum number of books this level can hold.
            </summary>
            <remarks>
            If unspecified, capacity is considered unlimited.
            </remarks>
            <example>20</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfLevelUpdateDto.CurrentLoad">
            <summary>
            Gets the current number of books stored on this level.
            </summary>
            <remarks>
            Used to track real-time occupancy.
            </remarks>
            <example>12</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfCreateDto">
            <summary>
            DTO used to create a new shelf.
            Contains required zone and genre identifiers, shelf name, and optional capacity.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.ZoneId">
            <summary>
            Gets the identifier of the zone where the shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.GenreId">
            <summary>
            Gets the identifier of the genre associated with the shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.Name">
            <summary>
            Gets the name of the shelf.
            </summary>
            <remarks>
            Maximum length of 100 characters.
            </remarks>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfCreateDto.Capacity">
            <summary>
            Gets the maximum number of books the shelf can hold.
            </summary>
            <remarks>
            If not specified, defaults to 0 (no capacity limit).
            </remarks>
            <example>50</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfReadDto">
            <summary>
            DTO returned when retrieving shelf information, including related zone and genre data.
            Contains all fields necessary to display shelf details and status.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.ShelfId">
            <summary>
            Gets the unique identifier of the shelf.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.Name">
            <summary>
            Gets the name of the shelf.
            </summary>
            <example>Fantasy Shelf A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.ZoneId">
            <summary>
            Gets the identifier of the zone where the shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.ZoneName">
            <summary>
            Gets the name of the zone where the shelf is located.
            </summary>
            <example>Main Hall</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.GenreId">
            <summary>
            Gets the identifier of the genre associated with the shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.GenreName">
            <summary>
            Gets the name of the genre associated with the shelf.
            </summary>
            <example>Science Fiction</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.Capacity">
            <summary>
            Gets the maximum number of books the shelf can hold.
            </summary>
            <example>50</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfReadDto.CurrentLoad">
            <summary>
            Gets the current number of books stored on the shelf.
            </summary>
            <example>34</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ShelfUpdateDto">
            <summary>
            DTO used to update an existing shelf.
            Contains the fields that can be modified on a shelf record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.ShelfId">
            <summary>
            Gets the unique identifier of the shelf to update.
            </summary>
            <example>3</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.ZoneId">
            <summary>
            Gets the identifier of the zone where the shelf is located.
            </summary>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.GenreId">
            <summary>
            Gets the identifier of the genre associated with the shelf.
            </summary>
            <example>5</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.Name">
            <summary>
            Gets the updated name of the shelf.
            </summary>
            <remarks>
            Maximum length of 100 characters.
            </remarks>
            <example>Fantasy Shelf A - Updated</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ShelfUpdateDto.Capacity">
            <summary>
            Gets the updated maximum number of books the shelf can hold.
            </summary>
            <remarks>
            Zero or positive integer.
            </remarks>
            <example>60</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockAdjustmentDto">
            <summary>
            DTO used to adjust the quantity of a specific stock entry.
            Contains the delta to apply to the current stock level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockAdjustmentDto.Adjustment">
            <summary>
            Gets the number of units to adjust the stock by.
            </summary>
            <remarks>
            Positive values increase stock; negative values decrease stock.
            </remarks>
            <example>-1</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockCreateDto">
            <summary>
            DTO used to initialize stock for a book.
            Contains the book identifier and the initial quantity to set.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockCreateDto.BookId">
            <summary>
            Gets the identifier of the book for which stock is being created.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockCreateDto.Quantity">
            <summary>
            Gets the initial quantity of the book to add to stock.
            </summary>
            <remarks>
            Must be zero or a positive integer.
            </remarks>
            <example>10</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockReadDto">
            <summary>
            DTO returned when retrieving stock details, including the related book title.
            Contains the current quantity and availability status.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.StockId">
            <summary>
            Gets the unique identifier of the stock entry.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.BookId">
            <summary>
            Gets the identifier of the book associated with this stock entry.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.BookTitle">
            <summary>
            Gets the title of the book associated with this stock entry.
            </summary>
            <example>The Hobbit</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.Quantity">
            <summary>
            Gets the current quantity available in stock.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockReadDto.IsAvailable">
            <summary>
            Gets a value indicating whether at least one copy is currently available.
            </summary>
            <example>true</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.StockUpdateDto">
            <summary>
            DTO used to update existing stock information.
            Contains all fields that can be modified on a stock record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.StockId">
            <summary>
            Gets the unique identifier of the stock entry to update.
            </summary>
            <example>15</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.BookId">
            <summary>
            Gets the identifier of the book associated with this stock entry.
            </summary>
            <example>42</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.Quantity">
            <summary>
            Gets the updated quantity available in stock.
            </summary>
            <remarks>
            Must be zero or a positive integer.
            </remarks>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.StockUpdateDto.IsAvailable">
            <summary>
            Gets a value indicating whether at least one copy is currently available.
            </summary>
            <example>true</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.TagCreateDto">
            <summary>
            DTO used to create a new tag.
            Contains the name of the tag to be added to the system.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagCreateDto.Name">
            <summary>
            Gets the name of the tag.
            </summary>
            <remarks>
            Must be between 1 and 50 characters.
            </remarks>
            <example>Classic</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.TagReadDto">
            <summary>
            DTO returned when retrieving tag information.
            Contains the unique identifier and name of the tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagReadDto.TagId">
            <summary>
            Gets the unique identifier of the tag.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagReadDto.Name">
            <summary>
            Gets the name of the tag.
            </summary>
            <example>Classic</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.TagUpdateDto">
            <summary>
            DTO used to update an existing tag.
            Contains the identifier and the new name for the tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagUpdateDto.TagId">
            <summary>
            Gets the unique identifier of the tag to update.
            </summary>
            <example>10</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.TagUpdateDto.Name">
            <summary>
            Gets the updated name of the tag.
            </summary>
            <remarks>
            Must be between 1 and 50 characters.
            </remarks>
            <example>Classic</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserCreateDto">
            <summary>
            DTO used by administrators or librarians to manually create a new user account.
            Contains all fields required for user creation, with optional address and phone.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.FirstName">
            <summary>
            Gets the given name of the user.
            </summary>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.LastName">
            <summary>
            Gets the family name of the user.
            </summary>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Email">
            <summary>
            Gets the email address for the new user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Password">
            <summary>
            Gets the initial password for the new user account.
            </summary>
            <remarks>
            Must be between 6 and 100 characters.
            </remarks>
            <example>P@ssw0rd!</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Address1">
            <summary>
            Gets the primary address line of the user.
            </summary>
            <remarks>
            Optional. Maximum length of 200 characters.
            </remarks>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Address2">
            <summary>
            Gets the secondary address line of the user, if any.
            </summary>
            <remarks>
            Optional. Maximum length of 200 characters.
            </remarks>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Phone">
            <summary>
            Gets the phone number of the user.
            </summary>
            <remarks>
            Optional. Must be a valid phone number.
            </remarks>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.DateOfBirth">
            <summary>
            Gets the date of birth of the user.
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserCreateDto.Role">
            <summary>
            Gets the role assigned to the new user.
            </summary>
            <remarks>
            Must be one of the defined roles: User, Librarian, Admin.
            </remarks>
            <example>User</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserReadDto">
            <summary>
            DTO returned when retrieving user account information.
            Contains identifier, personal details, assigned role, and profile data.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.UserId">
            <summary>
            Gets the unique identifier of the user.
            </summary>
            <example>7</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.FirstName">
            <summary>
            Gets the given name of the user.
            </summary>
            <example>Jane</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.LastName">
            <summary>
            Gets the family name of the user.
            </summary>
            <example>Doe</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Email">
            <summary>
            Gets the email address of the user.
            </summary>
            <example>jane.doe@example.com</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Role">
            <summary>
            Gets the role assigned to the user.
            </summary>
            <remarks>
            Possible values: User, Librarian, Admin.
            </remarks>
            <example>User</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Address1">
            <summary>
            Gets the primary address line of the user.
            </summary>
            <example>123 Main St</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Address2">
            <summary>
            Gets the secondary address line of the user, if any.
            </summary>
            <example>Apartment 4B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.Phone">
            <summary>
            Gets the phone number of the user.
            </summary>
            <example>+33 6 12 34 56 78</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.DateOfBirth">
            <summary>
            Gets the date of birth of the user, if provided.
            </summary>
            <example>1995-04-21</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.ProfileImagePath">
            <summary>
            Gets the profile image path or URL of the user, if provided.
            </summary>
            <example>https://cdn.example.com/u/42/profile.png</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserReadDto.FavoriteGenreIds">
            <summary>
            Gets the list of preferred genre identifiers for the user.
            </summary>
            <example>[1, 3, 7]</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.UserRoleUpdateDto">
            <summary>
            DTO used to update a user's role.
            Contains the new role assignment for an existing user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.UserRoleUpdateDto.Role">
            <summary>
            Gets the new role to assign to the user.
            </summary>
            <remarks>
            Must be one of the defined roles: User, Librarian, Admin.
            </remarks>
            <example>Admin</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ZoneCreateDto">
            <summary>
            DTO used to create a new library zone.
            Contains the zone name, floor number, aisle code, and optional description.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.Name">
            <summary>
            Gets the human-readable name of the zone.
            </summary>
            <example>Archives</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.FloorNumber">
            <summary>
            Gets the floor number where the zone is located.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.AisleCode">
            <summary>
            Gets the code of the aisle for quick identification.
            </summary>
            <remarks>
            Must be between 1 and 5 characters.
            </remarks>
            <example>A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneCreateDto.Description">
            <summary>
            Gets the optional description of the zone (e.g., thematic section).
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Children’s literature and picture books</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ZoneReadDto">
            <summary>
            DTO returned when retrieving library zone information.
            Contains the ID, name, floor, aisle, and optional description details.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.ZoneId">
            <summary>
            Gets the unique identifier of the zone.
            </summary>
            <example>4</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.Name">
            <summary>
            Gets the human-readable name of the zone.
            </summary>
            <example>Archives</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.FloorNumber">
            <summary>
            Gets the floor number where the zone is located.
            </summary>
            <example>1</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.AisleCode">
            <summary>
            Gets the code of the aisle for quick identification.
            </summary>
            <example>A</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneReadDto.Description">
            <summary>
            Gets the optional description of the zone (e.g., thematic section).
            </summary>
            <remarks>
            May be null if no description was provided.
            </remarks>
            <example>Children’s literature and picture books</example>
        </member>
        <member name="T:BackendBiblioMate.DTOs.ZoneUpdateDto">
            <summary>
            DTO used to update an existing library zone.
            Contains the fields that can be modified on a zone record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.ZoneId">
            <summary>
            Gets the unique identifier of the zone to update.
            </summary>
            <example>4</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.Name">
            <summary>
            Gets the updated human-readable name of the zone.
            </summary>
            <remarks>
            Must be between 1 and 100 characters.
            </remarks>
            <example>Main Hall</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.FloorNumber">
            <summary>
            Gets the updated floor number where the zone is located.
            </summary>
            <remarks>
            Must be between 0 and 100.
            </remarks>
            <example>2</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.AisleCode">
            <summary>
            Gets the updated code of the aisle for quick identification.
            </summary>
            <remarks>
            Must be between 1 and 5 characters.
            </remarks>
            <example>B</example>
        </member>
        <member name="P:BackendBiblioMate.DTOs.ZoneUpdateDto.Description">
            <summary>
            Gets the updated optional description of the zone (e.g., thematic section).
            </summary>
            <remarks>
            Maximum length of 200 characters.
            </remarks>
            <example>Historical archives section</example>
        </member>
        <member name="T:BackendBiblioMate.Helpers.PagedResult`1">
            <summary>
            Represents a paged result set, including items and pagination metadata.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Helpers.PagedResult`1.Create(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int64)">
            <summary>
            Factory method to create a new <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Helpers.PagedResultExtensions.ToPagedResultAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/> from the given queryable source.
            Falls back to synchronous LINQ when the provider does not support IAsyncQueryProvider.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Helpers.SwaggerDefaultValues">
            <summary>
            Fills in default values for versioned routes so that {version} is replaced
            and each operationId is unique.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Helpers.TokenHelper">
            <summary>
            Helper methods to extract information from a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> (e.g. JWT token).
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Helpers.TokenHelper.TryGetUserId(System.Security.Claims.ClaimsPrincipal,System.Int32@)">
            <summary>
            Attempts to parse the user identifier from the claims principal.
            </summary>
            <param name="user">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> containing the claims.</param>
            <param name="userId">
            When this method returns, contains the parsed user identifier if the operation succeeded;
            otherwise, 0.</param>
            <returns>
            <c>true</c> if the claim was present and valid; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Helpers.TokenHelper.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Retrieves the user identifier from the claims principal.
            </summary>
            <param name="user">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> containing the claims.</param>
            <returns>The user identifier parsed from the <c>NameIdentifier</c> claim.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="user"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <c>NameIdentifier</c> claim is missing.
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the claim value cannot be parsed to an integer.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Hubs.NotificationHub">
            <summary>
            SignalR Hub for sending real-time notifications to connected clients.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Hubs.NotificationHub.ReceiveMethod">
            <summary>
            Name of the client method to invoke when a notification is received.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.SendNotificationToAll(System.String)">
            <summary>
            Broadcasts a notification message to all connected clients.
            </summary>
            <param name="message">The notification payload to send.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.SendNotificationToUser(System.String,System.String)">
            <summary>
            Sends a notification message to a single user.
            </summary>
            <param name="userId">
            The target user's identifier (as returned by <c>Context.UserIdentifier</c>).
            </param>
            <param name="message">The notification payload to send.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.SendNotificationToGroup(System.String,System.String)">
            <summary>
            Sends a notification message to all clients in a specific group.
            </summary>
            <param name="groupName">The name of the target group.</param>
            <param name="message">The notification payload to send.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.JoinGroup(System.String)">
            <summary>
            (Optional) Adds the current connection to a specified group.
            </summary>
            <param name="groupName">The name of the group to join.</param>
            <returns>A task that represents the asynchronous group-add operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Hubs.NotificationHub.LeaveGroup(System.String)">
            <summary>
            (Optional) Removes the current connection from a specified group.
            </summary>
            <param name="groupName">The name of the group to leave.</param>
            <returns>A task that represents the asynchronous group-remove operation.</returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IAuthorService">
            <summary>
            Encapsulates business logic for managing authors.
            Provides methods for CRUD operations on author data.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all authors.
            </summary>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed successfully,
            yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all authors.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single author by its identifier.
            </summary>
            <param name="id">The identifier of the author to retrieve.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed,
            yields a tuple containing:
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> if found;
                  otherwise <c>null</c>.
                </description>
              </item>
              <item>
                <description>
                  An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> representing an error response
                  (e.g. <c>NotFound</c>), or <c>null</c> on success.
                </description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.CreateAsync(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new author.
            </summary>
            <param name="dto">Data for the author to create.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed,
            yields a tuple containing:
            <list type="bullet">
              <item>
                <description>
                  The created <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/>.
                </description>
              </item>
              <item>
                <description>
                  A <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> with
                  the location header set to the new resource.
                </description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing author.
            </summary>
            <param name="id">Identifier of the author to update.</param>
            <param name="dto">New values for the author.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed,
            returns <c>true</c> if the update succeeded; <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an author by its identifier.
            </summary>
            <param name="id">Identifier of the author to delete.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed,
            returns <c>true</c> if the deletion succeeded; <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IAuthService">
            <summary>
            Provides user-related operations such as registration, authentication,
            email confirmation, password reset, and administrative approval.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.RegisterAsync(BackendBiblioMate.DTOs.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Registers a new user.
            </summary>
            <param name="dto">Registration data transfer object containing user details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields a tuple:
            <list type="bullet">
              <item>
                <description><c>Success</c>: <c>true</c> if registration succeeded; <c>false</c> otherwise.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response to return (e.g. <c>BadRequest</c>, <c>Created</c>).</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.LoginAsync(BackendBiblioMate.DTOs.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user and issues a token.
            </summary>
            <param name="dto">Login data transfer object with credentials.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding:
            <list type="bullet">
              <item>
                <description><c>Success</c>: <c>true</c> if credentials are valid; <c>false</c> otherwise.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>Unauthorized</c>, <c>Ok</c> with token).</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ConfirmEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Confirms a user’s email address using a token.
            </summary>
            <param name="token">The email confirmation token.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding:
            <list type="bullet">
              <item>
                <description><c>Success</c>: <c>true</c> if email was confirmed; <c>false</c> otherwise.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>BadRequest</c>, <c>Ok</c>).</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.RequestPasswordResetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a password reset by sending a reset link to the user’s email.
            </summary>
            <param name="email">The user’s email address.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding:
            <list type="bullet">
              <item>
                <description><c>Success</c>: <c>true</c> if the reset email was sent; <c>false</c> otherwise.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>NotFound</c>, <c>Ok</c>).</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ResetPasswordAsync(BackendBiblioMate.DTOs.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets the user’s password using the provided token and new password.
            </summary>
            <param name="dto">Data transfer object containing the reset token and new password.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding:
            <list type="bullet">
              <item>
                <description><c>Success</c>: <c>true</c> if the password was reset; <c>false</c> otherwise.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>BadRequest</c>, <c>Ok</c>).</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IAuthService.ApproveUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Approves a newly registered user, granting them access.
            </summary>
            <param name="userId">Identifier of the user to approve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> yielding:
            <list type="bullet">
              <item>
                <description><c>Success</c>: <c>true</c> if the user was approved; <c>false</c> if not found.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/>: The HTTP response (e.g. <c>NotFound</c>, <c>NoContent</c>).</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IBookService">
            <summary>
            Defines operations for querying, retrieving and mutating book data,
            including paging, sorting, ETag support and search activity logging.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.GetPagedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a paged list of books, sorted and projected to <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>,
            including an ETag value and an optional 304 Not Modified result.
            </summary>
            <param name="pageNumber">Page number (1-based) to retrieve.</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="sortBy">Field name to sort by (e.g. "Title", "PublicationYear").</param>
            <param name="ascending"><c>true</c> for ascending order; <c>false</c> for descending.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields a tuple containing:
            <list type="bullet">
              <item>
                <description><see cref="T:BackendBiblioMate.Helpers.PagedResult`1"/> with the requested page.</description>
              </item>
              <item>
                <description><c>string</c> ETag value for the page.</description>
              </item>
              <item>
                <description><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> with <c>Status304NotModified</c> if the data was not modified; otherwise <c>null</c>.</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a single book by its identifier.
            </summary>
            <param name="id">Identifier of the book to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.CreateAsync(BackendBiblioMate.DTOs.BookCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new book record.
            </summary>
            <param name="dto">Data transfer object containing book properties.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.BookUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing book.
            </summary>
            <param name="id">Identifier of the book to update.</param>
            <param name="dto">Data transfer object with updated values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded; <c>false</c> if the book was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a book by its identifier.
            </summary>
            <param name="id">Identifier of the book to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if deletion succeeded; <c>false</c> if the book was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IBookService.SearchAsync(BackendBiblioMate.DTOs.BookSearchDto,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Performs a filtered search overbooks based on optional criteria.
            </summary>
            <param name="dto">Search criteria DTO (title, author, genre, etc.).</param>
            <param name="userId">Optional identifier of the performing user for logging purposes.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{BackendBiblioMate.DTOs.BookReadDto}}"/>
            yielding matching <see cref="T:BackendBiblioMate.DTOs.BookReadDto"/> items.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IEditorService">
            <summary>
            Defines CRUD operations for <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> entities
            with detailed service responses.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all editors.
            </summary>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed successfully,
            yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all editors.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves an editor by its identifier.
            </summary>
            <param name="id">The identifier of the editor to retrieve.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields a tuple containing:
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> if found; otherwise <c>null</c>.
                </description>
              </item>
              <item>
                <description>
                  An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> representing an error response
                  (e.g. <c>NotFound</c>), or <c>null</c> on success.
                </description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.CreateAsync(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new editor.
            </summary>
            <param name="dto">Data transfer object containing new editor details.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields a tuple containing:
            <list type="bullet">
              <item>
                <description>The created <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/>.</description>
              </item>
              <item>
                <description>
                  A <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> with the location header
                  pointing to the newly created resource.
                </description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.EditorUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing editor.
            </summary>
            <param name="id">Identifier of the editor to update.</param>
            <param name="dto">Data transfer object with updated editor values.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no editor with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEditorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an editor by its identifier.
            </summary>
            <param name="id">Identifier of the editor to delete.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no editor with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IEmailService">
            <summary>
            Contract for sending email messages.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IEmailService.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            Sends an email message asynchronously.
            </summary>
            <param name="toEmail">
            The recipient’s email address.
            </param>
            <param name="subject">
            The subject line of the email.
            </param>
            <param name="htmlContent">
            The HTML body content of the email.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the email has been sent.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IGenreService">
            <summary>
            Defines CRUD operations for <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/> entities
            with detailed service responses.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IHistoryService">
            <summary>
            Defines operations to log and retrieve user history events.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IHistoryService.LogEventAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Records a new history event for a user.
            </summary>
            <param name="userId">Identifier of the user who generated the event.</param>
            <param name="eventType">
            Type or name of the event (e.g., "Loan", "Return").
            </param>
            <param name="loanId">
            Optional associated loan identifier.
            </param>
            <param name="reservationId">
            Optional associated reservation identifier.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the event has been logged.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IHistoryService.GetHistoryForUserAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of history events for a given user.
            </summary>
            <param name="userId">Identifier of the user whose history is requested.</param>
            <param name="page">Page number (1-based). Default is <c>1</c>.</param>
            <param name="pageSize">Number of items per page. Default is <c>20</c>.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields a 
            <see cref="T:System.Collections.Generic.List`1"/> containing the requested page of history events.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ILoanService">
            <summary>
            Defines business operations related to book loans.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.CreateAsync(BackendBiblioMate.DTOs.LoanCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new loan.
            </summary>
            <param name="dto">Data transfer object containing loan details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{BackendBiblioMate.Interfaces.Result{LoanCreatedResult,string}}"/>
            that yields a <see cref="T:BackendBiblioMate.Interfaces.Result{LoanCreatedResult,string}"/>.
            On success, <c>Value</c> contains a <see cref="T:BackendBiblioMate.Interfaces.LoanCreatedResult"/>; on failure, <c>Error</c> contains an error message.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.ReturnAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks a loan as returned.
            </summary>
            <param name="loanId">Identifier of the loan to return.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{BackendBiblioMate.Interfaces.Result{LoanReturnedResult,string}}"/>
            that yields a <see cref="T:BackendBiblioMate.Interfaces.Result{LoanReturnedResult,string}"/>.
            On success, <c>Value</c> contains a <see cref="T:BackendBiblioMate.Interfaces.LoanReturnedResult"/>; on failure, <c>Error</c> contains an error message.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all loans.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{BackendBiblioMate.Interfaces.Result{System.Collections.Generic.IEnumerable{BackendBiblioMate.Models.Loan},string}}"/>
            that yields a <see cref="T:BackendBiblioMate.Interfaces.Result{System.Collections.Generic.IEnumerable{BackendBiblioMate.Models.Loan},string}"/>.
            On success, <c>Value</c> contains the collection of <see cref="T:BackendBiblioMate.Models.Loan"/>; on failure, <c>Error</c> contains an error message.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a loan by its identifier.
            </summary>
            <param name="loanId">Identifier of the loan to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{BackendBiblioMate.Interfaces.Result{BackendBiblioMate.Models.Loan,string}}"/>
            that yields a <see cref="T:BackendBiblioMate.Interfaces.Result{BackendBiblioMate.Models.Loan,string}"/>.
            On success, <c>Value</c> contains the <see cref="T:BackendBiblioMate.Models.Loan"/>; on failure, <c>Error</c> contains an error message.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.LoanUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing loan.
            </summary>
            <param name="loanId">Identifier of the loan to update.</param>
            <param name="dto">Data transfer object with updated loan details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{BackendBiblioMate.Interfaces.Result{BackendBiblioMate.Models.Loan,string}}"/>
            yielding a <see cref="T:BackendBiblioMate.Interfaces.Result{BackendBiblioMate.Models.Loan,string}"/>.
            On success, <c>Value</c> contains the updated <see cref="T:BackendBiblioMate.Models.Loan"/>; on failure, <c>Error</c> contains an error message.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILoanService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a loan by its identifier.
            </summary>
            <param name="loanId">Identifier of the loan to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{BackendBiblioMate.Interfaces.Result{bool,string}}"/>
            yielding a <see cref="T:BackendBiblioMate.Interfaces.Result{System.Boolean,string}"/>.
            On success, <c>Value</c> is <c>true</c>; on failure, <c>Error</c> contains an error message.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.LoanCreatedResult">
            <summary>
            Holds the result data for a successfully created loan.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.LoanCreatedResult.DueDate">
            <summary>
            Due date of the loan.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.LoanReturnedResult">
            <summary>
            Holds the result data for a successfully returned loan.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.LoanReturnedResult.ReservationNotified">
            <summary>
            Indicates whether reservation notification was sent.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.Result`2">
            <summary>
            Represents either a success (<typeparamref name="TSuccess"/>) or an error (<typeparamref name="TError"/>).
            </summary>
            <typeparam name="TSuccess">Type of the success value.</typeparam>
            <typeparam name="TError">Type of the error value.</typeparam>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.Result`2.Value">
            <summary>
            Gets the success value, or <c>default</c> if an error occurred.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.Result`2.Error">
            <summary>
            Gets the error value, or <c>default</c> if the operation was successful.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Interfaces.Result`2.IsError">
            <summary>
            Gets a value indicating whether the result represents an error.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.Result`2.Ok(`0)">
            <summary>
            Creates a successful result.
            </summary>
            <param name="value">The success value.</param>
            <returns>A <see cref="T:BackendBiblioMate.Interfaces.Result{TSuccess,TError}"/> representing success.</returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.Result`2.Fail(`1)">
            <summary>
            Creates an error result.
            </summary>
            <param name="error">The error value.</param>
            <returns>A <see cref="T:BackendBiblioMate.Interfaces.Result{TSuccess,TError}"/> representing an error.</returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ILocationService.EnsureAsync(BackendBiblioMate.DTOs.LocationEnsureDto,System.Threading.CancellationToken)">
            Crée Zone/Shelf/ShelfLevel si manquants et renvoie tout
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IMongoLogService">
            <summary>
            Contract for CRUD operations on notification log documents.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IMongoLogService.AddAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log document.
            </summary>
            <param name="log">The <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> to insert.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IMongoLogService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log documents, sorted by sent date descending.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A list of <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>, newest first.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IMongoLogService.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a notification log document by its identifier.
            </summary>
            <param name="id">The identifier of the log document to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The matching <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/>, or <c>null</c> if not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.INotificationLogCollection">
            <summary>
            Abstraction over the underlying MongoDB collection for notification logs.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogCollection.InsertOneAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log document.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogCollection.GetAllSortedAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification logs, sorted descending by SentAt.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogCollection.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a notification log document by its ID.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.INotificationLogService">
            <summary>
            Defines contract for logging and retrieving notification events.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogService.LogAsync(System.Int32,BackendBiblioMate.Models.Enums.NotificationType,System.String,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log entry.
            </summary>
            <param name="userId">The identifier of the user who received the notification.</param>
            <param name="type">The type of notification event.</param>
            <param name="message">The content of the notification message.</param>
            <param name="cancellationToken">Token to observe cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the log entry has been persisted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification logs for a given user, sorted most recent first.
            </summary>
            <param name="userId">The identifier of the user whose logs are to be retrieved.</param>
            <param name="cancellationToken">Token to observe cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that, when completed, yields a
            <see cref="T:System.Collections.Generic.List`1"/> containing the user's notification history.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.INotificationService">
            <summary>
            Defines contract for sending notifications to users.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.INotificationService.NotifyUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification message to the specified user.
            </summary>
            <param name="userId">The identifier of the user to notify.</param>
            <param name="message">The content of the notification message.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the notification has been sent.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IRecommendationService">
            <summary>
            Defines operations to generate book recommendations for users.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IRecommendationService.GetRecommendationsForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of recommended books for the specified user,
            selecting up to 10 titles that match the user's preferred genres.
            </summary>
            <param name="userId">The identifier of the user to get recommendations for.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that returns a <see cref="T:System.Collections.Generic.List`1"/>
            containing up to ten recommended books for the user.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IReportService">
            <summary>
            Defines operations for managing analytical reports, including creation,
            retrieval, update, and deletion.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports (across all users).
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task{System.Collections.Generic.List{ReportReadDto}}"/>
            containing all reports.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.GetAllForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports for a given user.
            </summary>
            <param name="userId">The identifier of the user whose reports to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a <see cref="T:System.Collections.Generic.List`1"/>
            containing all reports owned by the user.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single report by its identifier.
            </summary>
            <param name="reportId">The identifier of the report to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>,
            or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.CreateAsync(BackendBiblioMate.DTOs.ReportCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates and persists a new analytical report for the specified user.
            </summary>
            <param name="dto">
            The <see cref="T:BackendBiblioMate.DTOs.ReportCreateDto"/> containing the <c>Title</c> of the report.
            Content is computed automatically from loan and book data.
            </param>
            <param name="userId">The identifier of the user who requested the report.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>
            including computed statistics.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.UpdateAsync(BackendBiblioMate.DTOs.ReportUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing report's title and content.
            </summary>
            <param name="dto">The <see cref="T:BackendBiblioMate.DTOs.ReportUpdateDto"/> containing updated data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if the report was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReportService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a report by its identifier.
            </summary>
            <param name="reportId">The identifier of the report to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if the report was not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IReservationCleanupService">
            <summary>
            Defines an abstraction for cleaning up expired reservations.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationCleanupService.CleanupExpiredReservationsAsync(System.Threading.CancellationToken)">
            <summary>
            Removes all reservations that have been available for more than the expiration window,
            restores stock, logs each expiration, and returns the number removed.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation.</param>
            <returns>The number of expired reservations that were removed.</returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IReservationService">
            <summary>
            Defines operations for managing book reservations.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reservations (for librarians and admins).
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields all <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves active reservations for a given user.
            </summary>
            <param name="userId">The user’s identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the user’s active <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetPendingForBookAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves pending reservations for a given book.
            </summary>
            <param name="bookId">The book’s identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields pending <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/> for the book.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single reservation by its identifier.
            </summary>
            <param name="reservationId">The reservation identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>,
            or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.CreateAsync(BackendBiblioMate.DTOs.ReservationCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new reservation.
            </summary>
            <param name="dto">The creation data transfer object.</param>
            <param name="userId">The identifier of the reserving user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.UpdateAsync(BackendBiblioMate.DTOs.ReservationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing reservation’s data.
            </summary>
            <param name="dto">The updated reservation data transfer object.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no reservation with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IReservationService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a reservation by its identifier.
            </summary>
            <param name="reservationId">The reservation identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no reservation with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ISearchActivityLogService">
            <summary>
            Defines operations to record and retrieve search activity logs.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ISearchActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.SearchActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new search activity log document into the data store.
            </summary>
            <param name="doc">
            The <see cref="T:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument"/> containing UserId, QueryText and Timestamp.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the log entry has been persisted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.ISearchActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all search log documents for a specific user, ordered from newest to oldest.
            </summary>
            <param name="userId">The identifier of the user whose search logs are requested.</param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields a
            <see cref="T:System.Collections.Generic.List`1"/> containing the user's search history.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IShelfLevelService">
            <summary>
            Defines CRUD and query operations for shelf levels.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged list of shelf levels, optionally filtered by shelf.
            </summary>
            <param name="shelfId">Optional shelf identifier to filter by.</param>
            <param name="page">Page index (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing the matching shelf levels.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf level by its identifier.
            </summary>
            <param name="id">Identifier of the shelf level to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>,
            or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.CreateAsync(BackendBiblioMate.DTOs.ShelfLevelCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf level.
            </summary>
            <param name="dto">Data transfer object containing new shelf level details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.UpdateAsync(BackendBiblioMate.DTOs.ShelfLevelUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf level.
            </summary>
            <param name="dto">Data transfer object containing updated shelf level values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no shelf level with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfLevelService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf level by its identifier.
            </summary>
            <param name="id">Identifier of the shelf level to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no shelf level with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IShelfService">
            <summary>
            Defines CRUD and query operations for shelves.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged list of shelves, optionally filtered by zone.
            </summary>
            <param name="zoneId">Optional zone identifier to filter by.</param>
            <param name="page">Page index (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing the matching shelves.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf by its identifier.
            </summary>
            <param name="id">Identifier of the shelf to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>,
            or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.CreateAsync(BackendBiblioMate.DTOs.ShelfCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf.
            </summary>
            <param name="dto">Data transfer object containing new shelf details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.UpdateAsync(BackendBiblioMate.DTOs.ShelfUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf.
            </summary>
            <param name="dto">Data transfer object containing updated shelf values.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no shelf with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IShelfService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf by its identifier.
            </summary>
            <param name="id">Identifier of the shelf to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the deletion succeeded;
            <c>false</c> if no shelf with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IStockService">
            <summary>
            Defines domain operations for managing book stock levels and availability flags.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.UpdateAvailability(BackendBiblioMate.Models.Stock)">
            <summary>
            Sets the <see cref="P:BackendBiblioMate.Models.Stock.IsAvailable"/> flag based on whether any copies remain.
            </summary>
            <param name="stock">The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to update.</param>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.AdjustQuantity(BackendBiblioMate.Models.Stock,System.Int32)">
            <summary>
            Adjusts the stock <see cref="P:BackendBiblioMate.Models.Stock.Quantity"/> by a given amount and recalculates availability.
            </summary>
            <param name="stock">The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to adjust.</param>
            <param name="adjustment">
            The amount to change the quantity by (positive to add, negative to remove).
            </param>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.Decrease(BackendBiblioMate.Models.Stock)">
            <summary>
            Decreases the stock quantity by one and updates availability.
            </summary>
            <param name="stock">The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to decrement.</param>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IStockService.Increase(BackendBiblioMate.Models.Stock)">
            <summary>
            Increases the stock quantity by one and updates availability.
            </summary>
            <param name="stock">The <see cref="T:BackendBiblioMate.Models.Stock"/> entry to increment.</param>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.ITagService">
            <summary>
            Defines CRUD operations for tags.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IUserActivityLogService">
            <summary>
            Defines operations to record and retrieve user activity logs.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.UserActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new user activity log document into the data store.
            </summary>
            <param name="doc">
            The <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> containing UserId, Action, Details and Timestamp.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the document has been inserted.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all activity log documents for a specific user, ordered from newest to oldest.
            </summary>
            <param name="userId">
            The identifier of the user whose logs are requested.
            </param>
            <param name="cancellationToken">
            Token to monitor for cancellation requests.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> producing a <see cref="T:System.Collections.Generic.List`1"/>
            sorted by descending <c>Timestamp</c>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IUserService">
            <summary>
            Defines operations for managing application users.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all users.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:Task{IEnumerable{UserReadDto}}"/>
            that yields all <see cref="T:UserReadDto"/> items.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a user by its identifier.
            </summary>
            <param name="id">The user identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching user, or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.CreateAsync(BackendBiblioMate.DTOs.UserCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new user.
            </summary>
            <param name="dto">The data to create the user.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created user.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.UpdateAsync(System.Int32,UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates basic information of an existing user (excluding password and role).
            </summary>
            <param name="id">The user identifier.</param>
            <param name="dto">The updated data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if update succeeded; <c>false</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.UpdateRoleAsync(System.Int32,BackendBiblioMate.DTOs.UserRoleUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the role of an existing user.
            </summary>
            <param name="id">The user identifier.</param>
            <param name="dto">The new role data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if role update succeeded; <c>false</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a user.
            </summary>
            <param name="id">The user identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if deletion succeeded; <c>false</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.GetCurrentUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the profile of the current user.
            </summary>
            <param name="currentUserId">The current user's identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the current user's profile, or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IUserService.UpdateCurrentUserAsync(System.Int32,UserUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the profile of the current user.
            </summary>
            <param name="currentUserId">The current user's identifier.</param>
            <param name="dto">The updated profile data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if profile update succeeded; <c>false</c> if not found.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Interfaces.IZoneService">
            <summary>
            Defines operations for managing library zones.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.GetAllAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paginated list of zones.
            </summary>
            <param name="page">1-based page index.</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing the requested page of zones.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a zone by its identifier.
            </summary>
            <param name="id">The zone identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the matching <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>,
            or <c>null</c> if none exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.CreateAsync(BackendBiblioMate.DTOs.ZoneCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new zone.
            </summary>
            <param name="dto">The data transfer object containing new zone details.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields the created <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.ZoneUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing zone.
            </summary>
            <param name="id">The zone identifier.</param>
            <param name="dto">The updated zone data transfer object.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if the update succeeded;
            <c>false</c> if no zone with the given identifier exists.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Interfaces.IZoneService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a zone.
            </summary>
            <param name="id">The zone identifier.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that yields <c>true</c> if deletion succeeded;
            <c>false</c> if no zone with the given identifier exists.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            Middleware to handle exceptions globally and produce standardized JSON error responses.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware"/>.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
            <param name="logger">The logger for recording exception details.</param>
        </member>
        <member name="M:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to process HTTP context and catch exceptions.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Middlewares.ExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Handles exceptions by logging and writing a JSON response with appropriate status code.
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="exception">The exception that occurred.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:BackendBiblioMate.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.AddSecurityStampToUser">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddSecurityStampToUser.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddSecurityStampToUser.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddSecurityStampToUser.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.AddBookDescriptionToBook">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddBookDescriptionToBook.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddBookDescriptionToBook.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddBookDescriptionToBook.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.UpdateUserEntity">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.UpdateUserEntity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.UpdateUserEntity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.UpdateUserEntity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.AddExtensionsCountToLoan">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddExtensionsCountToLoan.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddExtensionsCountToLoan.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.AddExtensionsCountToLoan.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Migrations.CheckNoChanges">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.CheckNoChanges.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.CheckNoChanges.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendBiblioMate.Migrations.CheckNoChanges.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendBiblioMate.Models.Author">
            <summary>
            Represents an author of a book in the system.
            Contains basic identification and navigation to related books.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Author.AuthorId">
            <summary>
            Gets or sets the primary key of the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Author.Name">
            <summary>
            Gets or sets the full name of the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Author.Books">
            <summary>
            Gets the collection of books written by this author.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Book">
            <summary>
            Represents a book in the library catalog, including its metadata,
            relationships to other entities, and availability information.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.BookId">
            <summary>
            Gets or sets the primary key of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Title">
            <summary>
            Gets or sets the title of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Isbn">
            <summary>
            Gets or sets the International Standard Book Number (ISBN).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Description">
            <summary>
            Gets or sets the description or synopsis of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.PublicationDate">
            <summary>
            Gets or sets the date when the book was published.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.AuthorId">
            <summary>
            Gets or sets the foreign key referencing the author of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Author">
            <summary>
            Gets or sets the navigation property for the author.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.GenreId">
            <summary>
            Gets or sets the foreign key referencing the genre of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Genre">
            <summary>
            Gets or sets the navigation property for the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.EditorId">
            <summary>
            Gets or sets the foreign key referencing the editor/publisher.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Editor">
            <summary>
            Gets or sets the navigation property for the editor/publisher.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.ShelfLevelId">
            <summary>
            Gets or sets the foreign key referencing the shelf level where the book is located.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.ShelfLevel">
            <summary>
            Gets or sets the navigation property for the shelf level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.CoverUrl">
            <summary>
            Gets or sets the URL of the book’s cover image.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Loans">
            <summary>
            Gets the collection of loan records associated with this book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Reservations">
            <summary>
            Gets the collection of reservation records associated with this book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.BookTags">
            <summary>
            Gets the junction table entries linking this book to its tags.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Book.Stock">
            <summary>
            Gets or sets the stock entry associated with this book (nullable if not yet initialized).
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.BookTag">
            <summary>
            Junction entity linking books and tags (many-to-many relationship).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.BookId">
            <summary>
            Gets or sets the foreign key of the associated book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.Book">
            <summary>
            Gets or sets the navigation property for the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.TagId">
            <summary>
            Gets or sets the foreign key of the associated tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.BookTag.Tag">
            <summary>
            Gets or sets the navigation property for the tag.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Editor">
            <summary>
            Represents a publisher or editor of books within the system.
            Contains identification and navigation to associated books.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Editor.EditorId">
            <summary>
            Gets or sets the primary key of the editor.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Editor.Name">
            <summary>
            Gets or sets the name of the editor or publishing house.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Editor.Books">
            <summary>
            Gets the collection of books published by this editor.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Enums.NotificationType">
            <summary>
            Defines the categories of notifications that can be issued to users,
            such as reservation updates, reminders, penalties, and custom messages.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.ReservationAvailable">
            <summary>
            Indicates that a reserved item has become available for pickup.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.ReturnReminder">
            <summary>
            A reminder that an item is due to be returned soon.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.OverduePenalty">
            <summary>
            Notification that a penalty has been applied for an overdue item.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.OverdueNotice">
            <summary>
            Notice that an item is currently overdue.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Custom">
            <summary>
            A custom, application-defined notification.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Error">
            <summary>
            Indicates an error occurred in the system or process.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Warning">
            <summary>
            A warning about a non-critical issue or potential problem.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.NotificationType.Info">
            <summary>
            General informational message to the user.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Enums.ReservationStatus">
            <summary>
            Defines the possible states of a reservation in the library system.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Pending">
            <summary>
            Reservation has been created and is awaiting availability of the item.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Available">
            <summary>
            The reserved item is available for the user to collect.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Completed">
            <summary>
            The reservation process is completed; the user has collected and returned the item.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.ReservationStatus.Cancelled">
            <summary>
            The reservation has been cancelled either by the user or due to expiration.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Enums.UserRoles">
            <summary>
            Defines application roles used for authorization checks.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.UserRoles.Admin">
            <summary>
            Role for administrators with full access.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.UserRoles.Librarian">
            <summary>
            Role for librarians with permissions to manage library resources.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Enums.UserRoles.User">
            <summary>
            Role for general users with standard borrowing privileges.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Genre">
            <summary>
            Represents a literary genre (e.g., Science Fiction, Romance) in the system.
            Contains identification and navigation to related books and shelves.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.GenreId">
            <summary>
            Gets or sets the primary key of the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.Name">
            <summary>
            Gets or sets the name of the genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.Books">
            <summary>
            Gets the collection of books that belong to this genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Genre.Shelves">
            <summary>
            Gets the collection of shelves designated for this genre.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.History">
            <summary>
            Records a user-centric event (loan, return, reservation, etc.) for audit and history purposes.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.HistoryId">
            <summary>
            Gets or sets the primary key of the history record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.UserId">
            <summary>
            Gets or sets the identifier of the user associated with this event.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.LoanId">
            <summary>
            Gets or sets the optional identifier of the related loan.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.ReservationId">
            <summary>
            Gets or sets the optional identifier of the related reservation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.EventDate">
            <summary>
            Gets or sets the exact date and time when the event occurred.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.EventType">
            <summary>
            Gets or sets the type of event: "Loan", "Return", "Reservation", "Cancel", etc.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.User">
            <summary>
            Gets or sets the navigation property to the user who triggered the event.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.Loan">
            <summary>
            Gets or sets the navigation property to the related loan, if applicable.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.History.Reservation">
            <summary>
            Gets or sets the navigation property to the related reservation, if applicable.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Loan">
            <summary>
            Represents a loan of a book by a user, including dates and any applicable penalties.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Loan.ExtensionsCount">
            <summary>
            Nombre de fois que ce prêt a déjà été prolongé.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument">
            <summary>
            Represents a MongoDB document logging each notification event sent to users.
            Provides details about the notification type, recipient, message content, and timestamp.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.Id">
            <summary>
            Gets or sets the MongoDB ObjectId string that uniquely identifies this document.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.UserId">
            <summary>
            Gets or sets the identifier of the user who received the notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.Type">
            <summary>
            Gets or sets the type of notification sent (e.g., ReservationAvailable, ReturnReminder).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.Message">
            <summary>
            Gets or sets the content text of the notification message.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt">
            <summary>
            Gets or sets the UTC timestamp indicating when the notification was sent.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument">
            <summary>
            Represents a MongoDB document logging user search activities within the application.
            Captures information about who performed the search, the query text, and when it occurred.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.Id">
            <summary>
            Gets the MongoDB ObjectId string that uniquely identifies this document.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.UserId">
            <summary>
            Gets the identifier of the user who executed the search query.
            Null indicates an anonymous search.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.QueryText">
            <summary>
            Gets the text of the search query entered by the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument.Timestamp">
            <summary>
            Gets the UTC timestamp indicating when the search query was executed.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument">
            <summary>
            Represents a MongoDB document logging various user activities within the application.
            Captures the user, action performed, optional details, and timestamp of the activity.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Id">
            <summary>
            Gets the MongoDB ObjectId string that uniquely identifies this document.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.UserId">
            <summary>
            Gets the identifier of the user who performed the logged action.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Action">
            <summary>
            Gets the action type performed by the user (e.g., "CreateUser", "DeleteLoan").
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Details">
            <summary>
            Gets optional metadata or details about the action. Null if none provided.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Timestamp">
            <summary>
            Gets the UTC timestamp indicating when the action was performed.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Notification">
            <summary>
            Represents a notification sent to a user, either via email or real-time push.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.NotificationId">
            <summary>
            Gets the primary key of the notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.UserId">
            <summary>
            Gets or sets the identifier of the user who will receive the notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.Message">
            <summary>
            Gets or sets the body message of the notification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.Timestamp">
            <summary>
            Gets or sets the UTC timestamp when the notification was created.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Notification.User">
            <summary>
            Navigation property for the user receiving the notification.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Policies.LoanPolicy">
            <summary>
            Defines the loan policy constraints for the library system.
            Contains constants for maximum concurrent loans, default loan duration, and late fee calculation.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.MaxActiveLoansPerUser">
            <summary>
            Gets the maximum number of active loans a user can have simultaneously.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.DefaultLoanDurationDays">
            <summary>
            Gets the default number of days for a standard loan period.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.LateFeePerDay">
            <summary>
            Gets the fee amount charged per day for each overdue loan.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Models.Policies.LoanPolicy.MaxExtensionsPerLoan">
            <summary>
            Gets the maximum number of times a loan can be extended.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Recommendation">
            <summary>
            Represents a book recommendation generated for a specific user.
            Links a user to a recommended book in the system.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.RecommendationId">
            <summary>
            Gets the primary key of the recommendation record.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.UserId">
            <summary>
            Gets or sets the identifier of the user for whom the recommendation is made.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.RecommendationBookId">
            <summary>
            Gets or sets the identifier of the recommended book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.User">
            <summary>
            Navigation property for the user receiving the recommendation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Recommendation.RecommendationBook">
            <summary>
            Navigation property for the book being recommended.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Report">
            <summary>
            Represents an analytics or statistics report generated by a user.
            Contains metadata and content for the report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.ReportId">
            <summary>
            Gets the primary key of the report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.UserId">
            <summary>
            Gets or sets the identifier of the user who generated the report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.Title">
            <summary>
            Gets or sets the title of the report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.Content">
            <summary>
            Gets or sets the detailed content of the report.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.GeneratedDate">
            <summary>
            Gets or sets the date and time when the report was generated.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Report.User">
            <summary>
            Navigation property for the user who generated the report.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Reservation">
            <summary>
            Represents a user's reservation for a book, including status and timestamps.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.ReservationId">
            <summary>
            Gets the primary key of the reservation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.BookId">
            <summary>
            Gets or sets the identifier of the reserved book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.UserId">
            <summary>
            Gets or sets the identifier of the user who made the reservation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.CreatedAt">
            <summary>
            Gets or sets the date and time when the reservation was created.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.ReservationDate">
            <summary>
            Gets or sets the date and time when the reservation becomes effective.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.Status">
            <summary>
            Gets or sets the current status of the reservation.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.AssignedStockId">
            <summary>
            Gets or sets the identifier of the assigned stock entry, when available.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.AvailableAt">
            <summary>
            Gets or sets the date and time when the reserved book became available for pickup.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.Book">
            <summary>
            Navigation property for the reserved book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Reservation.User">
            <summary>
            Navigation property for the user who made the reservation.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Shelf">
            <summary>
            Represents a shelf in a specific zone and genre section of the library.
            Organizes books by location and genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.ShelfId">
            <summary>
            Gets the primary key of the shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.ZoneId">
            <summary>
            Gets or sets the identifier of the zone where this shelf is located.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.GenreId">
            <summary>
            Gets or sets the identifier of the genre associated with this shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Name">
            <summary>
            Gets or sets the name of the shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Capacity">
            <summary>
            Gets or sets the maximum number of books the shelf can hold.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.CurrentLoad">
            <summary>
            Gets or sets the current number of books stored on the shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Zone">
            <summary>
            Navigation property for the zone containing this shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.Genre">
            <summary>
            Navigation property for the genre assigned to this shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Shelf.ShelfLevels">
            <summary>
            Gets the collection of levels within this shelf.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.ShelfLevel">
            <summary>
            Represents a specific level within a shelf, containing books.
            Defines capacity and current load constraints for each level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.ShelfLevelId">
            <summary>
            Gets the primary key of the shelf level.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.ShelfId">
            <summary>
            Gets or sets the identifier of the parent shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.LevelNumber">
            <summary>
            Gets or sets the numeric level on the shelf (e.g., 1 for the bottom level).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.MaxHeight">
            <summary>
            Gets or sets the maximum height capacity in centimeters (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.Capacity">
            <summary>
            Gets or sets the maximum number of books this level can hold (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.CurrentLoad">
            <summary>
            Gets or sets the current number of books on this level (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.Shelf">
            <summary>
            Navigation property for the parent shelf.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.ShelfLevel.Books">
            <summary>
            Gets the collection of books placed on this shelf level.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Stock">
            <summary>
            Represents the stock information for a specific book (physical copies).
            Tracks available quantity and related loans.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.StockId">
            <summary>
            Gets the primary key of the stock entry.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.BookId">
            <summary>
            Gets or sets the identifier of the book associated with this stock.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.Quantity">
            <summary>
            Gets or sets the number of available copies of the book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.IsAvailable">
            <summary>
            Gets a value indicating whether at least one copy is available for loan.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.Book">
            <summary>
            Navigation property for the related book.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Stock.Loans">
            <summary>
            Gets the collection of loans associated with this stock entry.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Tag">
            <summary>
            Represents a tag that can be associated with multiple books.
            Used for categorization and search filtering.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Tag.TagId">
            <summary>
            Gets the primary key of the tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Tag.Name">
            <summary>
            Gets or sets the name of the tag.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Tag.BookTags">
            <summary>
            Gets the junction collection linking this tag to books.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.User">
            <summary>
            Represents an application user with authentication, profile data, and related records.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.UserId">
            <summary>
            Gets the primary key of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.FirstName">
            <summary>
            Gets or sets the given name of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.LastName">
            <summary>
            Gets or sets the family name of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Email">
            <summary>
            Gets or sets the email address, used for login and notifications.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Password">
            <summary>
            Gets or sets the hashed password for authentication.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Address1">
            <summary>
            Gets or sets the primary postal address of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Address2">
            <summary>
            Gets or sets the secondary postal address of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Phone">
            <summary>
            Gets or sets the phone number of the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.DateOfBirth">
            <summary>
            Gets or sets the date of birth of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.ProfileImagePath">
            <summary>
            Gets or sets the profile image path or URL of the user (optional).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Role">
            <summary>
            Gets or sets the role of the user (User, Librarian, Admin).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.IsEmailConfirmed">
            <summary>
            Gets a value indicating whether the user's email address has been confirmed.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.EmailConfirmationToken">
            <summary>
            Gets or sets the token sent to confirm the user's email, if pending.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.PasswordResetToken">
            <summary>
            Gets or sets the token sent to reset the user's password, if requested.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.PasswordResetTokenExpires">
            <summary>
            Gets or sets the expiration date and time for the password reset token.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.IsApproved">
            <summary>
            Gets a value indicating whether the user account has been approved by an administrator.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.SecurityStamp">
            <summary>
            Gets or sets the security stamp used to invalidate existing tokens on critical changes.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Loans">
            <summary>
            Gets the collection of loan records associated with the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Reservations">
            <summary>
            Gets the collection of reservation records associated with the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Reports">
            <summary>
            Gets the collection of reports generated by the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Recommendations">
            <summary>
            Gets the collection of recommendations generated for the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.Notifications">
            <summary>
            Gets the collection of notifications sent to the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.User.UserGenres">
            <summary>
            Gets the preferred genres of the user for personalized recommendations.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.UserGenre">
            <summary>
            Junction entity linking users and their preferred genres for personalized recommendations.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.UserId">
            <summary>
            Gets or sets the foreign key referencing the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.User">
            <summary>
            Navigation property for the user.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.GenreId">
            <summary>
            Gets or sets the foreign key referencing the preferred genre.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.UserGenre.Genre">
            <summary>
            Navigation property for the genre.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Models.Zone">
            <summary>
            Represents a physical zone in the library (e.g., floor and aisle),
            grouping shelves by location and thematic area.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.ZoneId">
            <summary>
            Gets the primary key of the zone.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.Name">
            <summary>
            Gets or sets the human-readable name of the zone.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.FloorNumber">
            <summary>
            Gets or sets the floor number where the zone is located.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.AisleCode">
            <summary>
            Gets or sets the code of the aisle for quick identification.
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.Description">
            <summary>
            Gets or sets an optional description of the zone (e.g., thematic sections).
            </summary>
        </member>
        <member name="P:BackendBiblioMate.Models.Zone.Shelves">
            <summary>
            Gets the collection of shelves contained within this zone.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.AuthorService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Author"/> entities.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.AuthorService"/> class.
            </summary>
            <param name="db">Database context for BiblioMate.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all authors from the data store.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all authors.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single author by its identifier.
            </summary>
            <param name="id">Identifier of the author to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
            <item>The <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> if found, otherwise null.</item>
            <item>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> <c>NotFound</c> when missing, otherwise null.</item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.CreateAsync(BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new author in the data store.
            </summary>
            <param name="dto">Data transfer object containing author creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing the created <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> and a <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.AuthorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing author in the data store.
            </summary>
            <param name="id">Identifier of the author to update.</param>
            <param name="dto">Data transfer object containing updated author data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an author from the data store.
            </summary>
            <param name="id">Identifier of the author to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the author was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.AuthorService.MapToReadDto(BackendBiblioMate.Models.Author)">
            <summary>
            Maps an <see cref="T:BackendBiblioMate.Models.Author"/> entity to an <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/>.
            </summary>
            <param name="author">The author entity to map.</param>
            <returns>A new <see cref="T:BackendBiblioMate.DTOs.AuthorReadDto"/> instance.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.EditorService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Editor"/> entities
            using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.EditorService"/> class.
            </summary>
            <param name="db">Database context for BiblioMate.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all editors from the data store.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all editors.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single editor by its identifier.
            </summary>
            <param name="id">Identifier of the editor to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing:
            <list type="bullet">
              <item>The <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> if found, otherwise null.</item>
              <item>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> <c>NotFound</c> when missing, otherwise null.</item>
            </list>
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.CreateAsync(BackendBiblioMate.DTOs.EditorCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new editor in the data store.
            </summary>
            <param name="dto">Data transfer object containing editor creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A tuple containing the created <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/> and a <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.EditorUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing editor in the data store.
            </summary>
            <param name="id">Identifier of the editor to update.</param>
            <param name="dto">Data transfer object containing updated editor data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the editor was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.EditorService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes an editor from the data store.
            </summary>
            <param name="id">Identifier of the editor to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the editor was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.EditorService.MapToReadDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Editor"/> into <see cref="T:BackendBiblioMate.DTOs.EditorReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.GenreService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Genre"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.GenreService"/> class.
            </summary>
            <param name="db">The EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all genres from the data store.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single genre by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.CreateAsync(BackendBiblioMate.DTOs.GenreCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new genre in the data store.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.GenreUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing genre in the data store.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.GenreService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a genre from the data store.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.GenreService.MapToReadDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Genre"/> into <see cref="T:BackendBiblioMate.DTOs.GenreReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.ShelfLevelService">
            <summary>
            Provides CRUD operations for ShelfLevel entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.ShelfLevelService"/> class.
            </summary>
            <param name="context">The EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelf levels, optionally filtered by shelf ID, with pagination.
            </summary>
            <param name="shelfId">Optional shelf ID to filter by.</param>
            <param name="page">Page number (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the paginated results.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf level by its identifier.
            </summary>
            <param name="id">Identifier of the shelf level to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.CreateAsync(BackendBiblioMate.DTOs.ShelfLevelCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf level in the data store.
            </summary>
            <param name="dto">Data transfer object containing shelf level creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.UpdateAsync(BackendBiblioMate.DTOs.ShelfLevelUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf level in the data store.
            </summary>
            <param name="dto">Data transfer object containing updated shelf level data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the shelf level was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfLevelService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf level from the data store.
            </summary>
            <param name="id">Identifier of the shelf level to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the shelf level was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.ShelfLevelService.MapToReadDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.ShelfLevel"/> into <see cref="T:BackendBiblioMate.DTOs.ShelfLevelReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.ShelfService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Shelf"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.ShelfService"/> class.
            </summary>
            <param name="context">EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.GetAllAsync(System.Nullable{System.Int32},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all shelves, optionally filtered by zone ID, with pagination.
            </summary>
            <param name="zoneId">Optional zone ID to filter by.</param>
            <param name="page">Page number (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the paginated results.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single shelf by its identifier.
            </summary>
            <param name="id">Identifier of the shelf to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.CreateAsync(BackendBiblioMate.DTOs.ShelfCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new shelf in the data store.
            </summary>
            <param name="dto">Data transfer object containing shelf creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.UpdateAsync(BackendBiblioMate.DTOs.ShelfUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing shelf in the data store.
            </summary>
            <param name="dto">Data transfer object containing updated shelf data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the shelf was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ShelfService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a shelf from the data store.
            </summary>
            <param name="id">Identifier of the shelf to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the shelf was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.ShelfService.MapToDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Shelf"/> into <see cref="T:BackendBiblioMate.DTOs.ShelfReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.StockService">
            <summary>
            Provides operations for managing stock quantities and availability.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Catalog.StockService"/> without a database context.
            Useful for unit tests where no EF operations are required.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Catalog.StockService"/> with an EF Core context.
            </summary>
            <param name="context">EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.UpdateAvailability(BackendBiblioMate.Models.Stock)">
            <summary>
            Ensures the stock's availability flag is up to date.
            </summary>
            <param name="stock">The stock entry to refresh.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.AdjustQuantity(BackendBiblioMate.Models.Stock,System.Int32)">
            <summary>
            Adjusts the stock quantity by a given delta, clamping at zero.
            Persists the change if a database context is available.
            </summary>
            <param name="stock">The stock entry to modify.</param>
            <param name="delta">The amount to add (or subtract if negative).</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.Increase(BackendBiblioMate.Models.Stock)">
            <summary>
            Increases the stock quantity by 1.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.StockService.Decrease(BackendBiblioMate.Models.Stock)">
            <summary>
            Decreases the stock quantity by 1.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.TagService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Tag"/> entities using EF Core.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Catalog.ZoneService">
            <summary>
            Provides CRUD operations for <see cref="T:BackendBiblioMate.Models.Zone"/> entities using EF Core.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Catalog.ZoneService"/> class.
            </summary>
            <param name="context">EF Core database context.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.GetAllAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all zones with pagination.
            </summary>
            <param name="page">Page number (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the paginated results.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single zone by its identifier.
            </summary>
            <param name="id">Identifier of the zone to retrieve.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.CreateAsync(BackendBiblioMate.DTOs.ZoneCreateDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new zone in the data store.
            </summary>
            <param name="dto">Data transfer object containing zone creation data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.UpdateAsync(System.Int32,BackendBiblioMate.DTOs.ZoneUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing zone in the data store.
            </summary>
            <param name="id">Identifier of the zone to update.</param>
            <param name="dto">Data transfer object containing updated zone data.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the update was successful; <c>false</c> if the zone was not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Catalog.ZoneService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a zone from the data store.
            </summary>
            <param name="id">Identifier of the zone to delete.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            <c>true</c> if the deletion was successful; <c>false</c> if the zone was not found.
            </returns>
        </member>
        <member name="F:BackendBiblioMate.Services.Catalog.ZoneService.MapToDto">
            <summary>
            Expression to project <see cref="T:BackendBiblioMate.Models.Zone"/> into <see cref="T:BackendBiblioMate.DTOs.ZoneReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.External.IGoogleBooksService">
            <summary>
            Defines methods to fetch book metadata from the Google Books API.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.IGoogleBooksService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches Google Books for the specified term and returns a list of <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.
            </summary>
            <param name="term">The search term (e.g. title, author, ISBN).</param>
            <param name="maxResults">Maximum number of results to retrieve. Default is 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing book data.
            If no items were found, returns an empty list.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService">
            <summary>
            Service implementation to fetch book metadata from the Google Books API.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService"/>.
            </summary>
            <param name="httpClient">Configured <see cref="T:System.Net.Http.HttpClient"/> for Google Books API.</param>
            <param name="configuration">Application configuration to retrieve the API key.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.SearchAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches Google Books for the specified term and returns a list of <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.
            </summary>
            <param name="term">The search term (e.g. title, author, ISBN).</param>
            <param name="maxResults">Maximum number of results to retrieve. Default is 20.</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing book data.
            If no items were found, returns an empty list.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.BuildRequestUrl(System.String,System.Int32)">
            <summary>
            Builds the Google Books API request URL with query parameters.
            </summary>
            <param name="term">Search term.</param>
            <param name="maxResults">Maximum results.</param>
            <returns>Full request URL string.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.External.GoogleBooksService.MapVolumeToDto(System.Text.Json.JsonElement)">
            <summary>
            Maps a single JSON volume element to a <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.
            </summary>
            <param name="item">The JSON element representing a volume.</param>
            <returns>A populated <see cref="T:BackendBiblioMate.DTOs.BookCreateDto"/>.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService">
            <summary>
            Service for raw CRUD operations on notification logs in MongoDB.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.#ctor(BackendBiblioMate.Interfaces.INotificationLogCollection,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.AddAsync(BackendBiblioMate.Models.Mongo.NotificationLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log entry.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log entries, sorted by sent date descending.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Logging.MongoLogService.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a notification log entry by its unique identifier.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.Logging.NotificationLogCollection">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.INotificationLogCollection"/> that wraps the real MongoDB collection.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService">
            <summary>
            Provides AES-256-CBC encryption and decryption for sensitive strings.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService"/> class.
            </summary>
            <param name="config">
            Application configuration; must contain a Base64-encoded 32-byte key under "Encryption:Key".
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="config"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the key is missing, not valid Base64, or not exactly 32 bytes when decoded.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts the specified plaintext using AES-256-CBC.
            </summary>
            <param name="plain">
            The plaintext to encrypt. If null or empty, returns an empty string.
            </param>
            <returns>
            A Base64-encoded string containing the IV concatenated with the ciphertext.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.Decrypt(System.String)">
            <summary>
            Decrypts the specified Base64-encoded IV+ciphertext string using AES-256-CBC.
            </summary>
            <param name="cipher">
            The Base64-encoded payload (IV + ciphertext). If null or empty, returns an empty string.
            </param>
            <returns>The decrypted plaintext string.</returns>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="cipher"/> is not valid Base64.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            Thrown if decryption fails (e.g. tampered data).
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Infrastructure.Security.EncryptionService.CreateAes">
            <summary>
            Creates a pre-configured  Aes instance for AES-256-CBC.
            </summary>
            <returns>
            An Aes object with Aes.Key, Aes.Mode, and Aes.Padding set.
            </returns>
            CryptographicException>
            Thrown if the AES algorithm cannot be instantiated.
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService">
            <summary>
            Hosted background service that periodically triggers
            sending of loan return reminders and overdue notifications.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.Interval">
            <summary>
            Interval between reminder runs.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{BackendBiblioMate.Services.Loans.LoanReminderBackgroundService})">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService"/>.
            </summary>
            <param name="serviceProvider">
            Service provider used to create scopes for scoped services.
            </param>
            <param name="logger">
            Logger for recording operational messages and errors.
            </param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Core execution loop. Runs once per <see cref="F:BackendBiblioMate.Services.Loans.LoanReminderBackgroundService.Interval"/> until cancellation.
            </summary>
            <param name="stoppingToken">
            Token that signals shutdown of the background service.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the service stops.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.LoanReminderService">
            <summary>
            Service responsible for sending loan return reminders and overdue notifications.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Services.Loans.LoanReminderService.ReminderWindowHours">
            <summary>
            Number of hours before due date to send a reminder.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Services.Notifications.NotificationService,BackendBiblioMate.Interfaces.INotificationLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Loans.LoanReminderService"/>.
            </summary>
            <param name="context">Database context for accessing loan data.</param>
            <param name="notificationService">Service for dispatching user notifications.</param>
            <param name="logService">Service for recording notification logs.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.SendReturnRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Sends reminders to users <see cref="F:BackendBiblioMate.Services.Loans.LoanReminderService.ReminderWindowHours"/> hours before their loan due date.
            </summary>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the reminder operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.SendOverdueNotificationsAsync(System.Threading.CancellationToken)">
            <summary>
            Sends overdue notifications to users with loans past their due date.
            </summary>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the overdue notification operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.GetUnreturnedLoans">
            <summary>
            Retrieves all loans that have not yet been returned, including associated user and book details.
            </summary>
            <returns>Queryable collection of unreturned loans with related user and book data.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanReminderService.SendNotificationAndLogAsync(System.Int32,BackendBiblioMate.Models.Enums.NotificationType,System.String,System.Threading.CancellationToken)">
            <summary>
            Dispatches a notification to the user and logs the event.
            </summary>
            <param name="userId">Identifier of the user to notify.</param>
            <param name="type">Type of notification to log.</param>
            <param name="message">Content of the notification message.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the send-and-log operation.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.LoanService">
            <summary>
            Service for managing book loans.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.LoanService.ReturnAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks a loan as returned and calculates any fine for late return.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.ReservationCleanupService">
            <summary>
            Removes expired reservations, restores stock availability, logs each expiration event,
            and returns the total count of removed reservations.
            </summary>
        </member>
        <member name="F:BackendBiblioMate.Services.Loans.ReservationCleanupService.ExpirationWindowHours">
            <summary>
            Number of hours after which an available reservation expires.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationCleanupService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IHistoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:BackendBiblioMate.Services.Loans.ReservationCleanupService"/> class.
            </summary>
            <param name="context">The database context used to access reservations and stock data.</param>
            <param name="historyService">The service used to log history events.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationCleanupService.CleanupExpiredReservationsAsync(System.Threading.CancellationToken)">
            <summary>
            Finds and removes all reservations in the "Available" status that have
            been available for longer than the expiration window, restores any assigned stock,
            logs the expiration to history, and saves the changes.
            </summary>
            <param name="cancellationToken">A token to observe for cancellation requests.</param>
            <returns>The number of reservations that were removed.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationCleanupService.RestoreStockAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Marks the specified stock as available again.
            </summary>
            <param name="stockId">The identifier of the stock record to update.</param>
            <param name="cancellationToken">A token to observe for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Loans.ReservationService">
            <summary>
            Default implementation of <see cref="T:BackendBiblioMate.Interfaces.IReservationService"/>,
            handling EF Core data access, history logging, and audit logging.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext,BackendBiblioMate.Interfaces.IHistoryService,BackendBiblioMate.Interfaces.IUserActivityLogService)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Loans.ReservationService"/>.
            </summary>
            <param name="context">Database context for reservations.</param>
            <param name="historyService">Service for logging history events.</param>
            <param name="activityLogService">Service for logging user activity.</param>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reservations with associated user and book details.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves active or available reservations for a specific user.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetPendingForBookAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves pending reservations for a given book, ordered by creation time.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a reservation by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.CreateAsync(BackendBiblioMate.DTOs.ReservationCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new reservation if the user is authorized and
            no copy is currently available (i.e. stock - active loans &lt;= 0).
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">If the user ID does not match.</exception>
            <exception cref="T:System.InvalidOperationException">If rules are violated.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.UpdateAsync(BackendBiblioMate.DTOs.ReservationUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates an existing reservation’s details.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a reservation by its identifier.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Loans.ReservationService.MapToDto(BackendBiblioMate.Models.Reservation)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.Reservation"/> entity to its <see cref="T:BackendBiblioMate.DTOs.ReservationReadDto"/>.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Notifications.NotificationLogService">
            <summary>
            Service for logging notification events to MongoDB and retrieving them by user.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationLogService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Notifications.NotificationLogService"/>.
            </summary>
            <param name="config">Application configuration containing MongoDB settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="config"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if MongoDB settings are missing.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationLogService.LogAsync(System.Int32,BackendBiblioMate.Models.Enums.NotificationType,System.String,System.Threading.CancellationToken)">
            <summary>
            Inserts a new notification log entry for the specified user.
            </summary>
            <param name="userId">Identifier of the user who received the notification.</param>
            <param name="type">Type of the notification sent.</param>
            <param name="message">Content of the notification message.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the insert operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all notification log entries for the specified user, ordered by most recent first.
            </summary>
            <param name="userId">Identifier of the user whose logs are retrieved.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>
            List of <see cref="T:BackendBiblioMate.Models.Mongo.NotificationLogDocument"/> for the user,
            sorted in descending order by <see cref="P:BackendBiblioMate.Models.Mongo.NotificationLogDocument.SentAt"/>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Notifications.NotificationService">
            <summary>
            Implements <see cref="T:BackendBiblioMate.Interfaces.INotificationService"/> by sending real-time SignalR notifications
            and email messages to users.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationService.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{BackendBiblioMate.Hubs.NotificationHub},BackendBiblioMate.Interfaces.IEmailService,BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Notifications.NotificationService"/>.
            </summary>
            <param name="hubContext">SignalR hub context for pushing real-time notifications.</param>
            <param name="emailService">Service responsible for sending emails.</param>
            <param name="context">Database context for looking up user information.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any dependency is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.NotificationService.NotifyUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification message to the specified user via SignalR and email.
            </summary>
            <param name="userId">Identifier of the user to notify.</param>
            <param name="message">Notification message content.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the notify operation.</returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Notifications.SendGridEmailService">
            <summary>
            Service responsible for sending emails via SendGrid.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.SendGridEmailService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Notifications.SendGridEmailService"/>.
            </summary>
            <param name="config">
            Application configuration containing SendGrid settings:
            <c>SendGrid:ApiKey</c>, <c>SendGrid:FromEmail</c>, <c>SendGrid:FromName</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="config"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if any required SendGrid setting is missing or empty.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Notifications.SendGridEmailService.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            Sends an email asynchronously using SendGrid.
            </summary>
            <param name="toEmail">Recipient email address.</param>
            <param name="subject">Subject line of the email.</param>
            <param name="htmlContent">HTML body content of the email.</param>
            <returns>Asynchronous task that completes once SendGrid responds.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="toEmail"/> or <paramref name="htmlContent"/> is null or empty.
            </exception>
        </member>
        <member name="T:BackendBiblioMate.Services.Recommendations.RecommendationService">
            <summary>
            Service that generates book recommendations for users based on their preferred genres.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Recommendations.RecommendationService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Recommendations.RecommendationService"/>.
            </summary>
            <param name="context">The application's EF Core database context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Recommendations.RecommendationService.GetRecommendationsForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves up to 10 book recommendations for the specified user,
            matching the user's preferred genres.
            </summary>
            <param name="userId">Identifier of the user to recommend books for.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>
            List of <see cref="T:BackendBiblioMate.DTOs.RecommendationReadDto"/> containing recommended books,
            ordered by <c>BookId</c> to ensure deterministic results.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Reports.ReportService">
            <summary>
            Service that provides CRUD operations and analytical report generation.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Reports.ReportService"/>.
            </summary>
            <param name="context">EF Core database context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports, ordered by generation date descending.
            </summary>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>List of <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.GetAllForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all reports for a given user, ordered by generation date descending.
            </summary>
            <param name="userId">Identifier of the user.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>List of <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a single report by its identifier.
            </summary>
            <param name="reportId">Identifier of the report.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>
            The <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/> if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.CreateAsync(BackendBiblioMate.DTOs.ReportCreateDto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates a new monthly report, saves it, and returns its DTO.
            </summary>
            <param name="dto">Report creation parameters (Title).</param>
            <param name="userId">Identifier of the user creating the report.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>The created <see cref="T:BackendBiblioMate.DTOs.ReportReadDto"/>.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.UpdateAsync(BackendBiblioMate.DTOs.ReportUpdateDto,System.Threading.CancellationToken)">
            <summary>
            Updates the title and content of an existing report.
            </summary>
            <param name="dto">Report update parameters.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>
            <c>true</c> if updated; <c>false</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a report by its identifier.
            </summary>
            <param name="reportId">Identifier of the report to delete.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>
            <c>true</c> if deleted; <c>false</c> if not found.
            </returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.ReportService.ToDto(BackendBiblioMate.Models.Report)">
            <summary>
            Maps a <see cref="T:BackendBiblioMate.Models.Report"/> entity to its DTO.
            </summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Reports.SearchActivityLogService">
            <summary>
            Service for recording and retrieving search activity logs in MongoDB.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.SearchActivityLogService.#ctor(Microsoft.Extensions.Options.IOptions{BackendBiblioMate.Configuration.MongoSettings},MongoDB.Driver.IMongoClient)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Reports.SearchActivityLogService"/>.
            </summary>
            <param name="opts">MongoDB connection settings.</param>
            <param name="client">MongoDB client instance.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="opts"/> or <paramref name="client"/> is null.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.SearchActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.SearchActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new search activity log document.
            </summary>
            <param name="doc">Document containing search activity details.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>Asynchronous task representing the insert operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Reports.SearchActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves search activity logs for a user, ordered by timestamp descending.
            </summary>
            <param name="userId">Identifier of the user.</param>
            <param name="cancellationToken">Token to monitor cancellation.</param>
            <returns>
            List of <see cref="T:BackendBiblioMate.Models.Mongo.SearchActivityLogDocument"/> for the user.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.AuthService">
            <summary>
            Implements <see cref="T:BackendBiblioMate.Interfaces.IAuthService"/> to handle user registration,
            authentication, email confirmation, password reset, and approval.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.RegisterAsync(BackendBiblioMate.DTOs.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Registers a new user, sends an email confirmation link.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.LoginAsync(BackendBiblioMate.DTOs.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user and returns a JWT token if successful.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ConfirmEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>Confirms a user's email using the provided token.</summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.RequestPasswordResetAsync(System.String,System.Threading.CancellationToken)">
            <summary>Generates and emails a password reset token if the email exists.</summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ResetPasswordAsync(BackendBiblioMate.DTOs.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>Resets a user's password using a valid reset token.</summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.AuthService.ApproveUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>Approves a pending user account.</summary>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.HistoryService">
            <summary>
            Implements <see cref="T:BackendBiblioMate.Interfaces.IHistoryService"/> using EF Core to persist
            and retrieve history events from the relational database.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.HistoryService.#ctor(BackendBiblioMate.Data.BiblioMateDbContext)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Users.HistoryService"/>.
            </summary>
            <param name="context">EF Core database context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.HistoryService.LogEventAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Logs a user history event with optional loan or reservation reference.
            </summary>
            <param name="userId">Identifier of the user who performed the action.</param>
            <param name="eventType">Type of event (e.g., "Loan", "Return", etc.).</param>
            <param name="loanId">Optional loan identifier related to the event.</param>
            <param name="reservationId">Optional reservation identifier related to the event.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the logging operation.</returns>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.HistoryService.GetHistoryForUserAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paginated list of history entries for a given user,
            ordered by most recent first.
            </summary>
            <param name="userId">Identifier of the user whose history is retrieved.</param>
            <param name="page">Page number (1-based).</param>
            <param name="pageSize">Number of items per page.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>
            List of <see cref="T:BackendBiblioMate.DTOs.HistoryReadDto"/> representing the user's history page.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.UserActivityLogService">
            <summary>
            Service for recording and retrieving user activity logs from MongoDB.
            Implements <see cref="T:BackendBiblioMate.Interfaces.IUserActivityLogService"/>.
            </summary>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserActivityLogService.#ctor(Microsoft.Extensions.Options.IOptions{BackendBiblioMate.Configuration.MongoSettings},MongoDB.Driver.IMongoClient)">
            <summary>
            Initializes a new instance of <see cref="T:BackendBiblioMate.Services.Users.UserActivityLogService"/>.
            </summary>
            <param name="opts">
            MongoDB connection settings (ConnectionString &amp; DatabaseName).
            </param>
            <param name="client">MongoDB client instance.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="opts"/> or <paramref name="client"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the configured database name is null or empty.
            </exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserActivityLogService.LogAsync(BackendBiblioMate.Models.Mongo.UserActivityLogDocument,System.Threading.CancellationToken)">
            <summary>
            Inserts a new user activity log document into MongoDB.
            </summary>
            <param name="doc">The log document to insert.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>Asynchronous task representing the insert operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="doc"/> is null.</exception>
        </member>
        <member name="M:BackendBiblioMate.Services.Users.UserActivityLogService.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all activity log documents for the specified user,
            ordered by most recent first.
            </summary>
            <param name="userId">Identifier of the user whose logs are retrieved.</param>
            <param name="cancellationToken">Token to monitor cancellation of the operation.</param>
            <returns>
            List of <see cref="T:BackendBiblioMate.Models.Mongo.UserActivityLogDocument"/> for the user,
            sorted in descending order by <see cref="P:BackendBiblioMate.Models.Mongo.UserActivityLogDocument.Timestamp"/>.
            </returns>
        </member>
        <member name="T:BackendBiblioMate.Services.Users.UserService">
            <summary>
            Implements <see cref="T:BackendBiblioMate.Interfaces.IUserService"/> using EF Core for CRUD operations on users.
            </summary>
        </member>
    </members>
</doc>
