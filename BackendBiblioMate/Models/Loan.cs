using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace BackendBiblioMate.Models
{
    /// <summary>
    /// Represents a loan of a book by a user, including loan and due dates,
    /// potential return date, applicable fines, and extension count.
    /// </summary>
    public class Loan
    {
        /// <summary>
        /// Gets or sets the unique identifier of the loan.
        /// </summary>
        /// <remarks>
        /// This value is generated by the database as an identity column.
        /// </remarks>
        /// <example>15</example>
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int LoanId { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the borrowed book.
        /// </summary>
        /// <example>42</example>
        [Required(ErrorMessage = "BookId is required.")]
        [Range(1, int.MaxValue, ErrorMessage = "BookId must be a positive integer.")]
        public int BookId { get; set; }

        /// <summary>
        /// Gets or sets the navigation property to the borrowed book.
        /// </summary>
        [ForeignKey(nameof(BookId))]
        public Book Book { get; set; } = null!;

        /// <summary>
        /// Gets or sets the identifier of the user who borrowed the book.
        /// </summary>
        /// <example>7</example>
        [Required(ErrorMessage = "UserId is required.")]
        [Range(1, int.MaxValue, ErrorMessage = "UserId must be a positive integer.")]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the navigation property to the user who borrowed the book.
        /// </summary>
        [ForeignKey(nameof(UserId))]
        public User User { get; set; } = null!;

        /// <summary>
        /// Gets or sets the date and time when the loan started (UTC).
        /// </summary>
        /// <example>2025-06-01T10:30:00Z</example>
        [Required(ErrorMessage = "LoanDate is required.")]
        public DateTime LoanDate { get; set; }

        /// <summary>
        /// Gets or sets the due date for returning the book (UTC).
        /// </summary>
        /// <example>2025-06-15T10:30:00Z</example>
        [Required(ErrorMessage = "DueDate is required.")]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or sets the date when the book was actually returned, if applicable (UTC).
        /// </summary>
        /// <example>2025-06-14T16:45:00Z</example>
        public DateTime? ReturnDate { get; set; }

        /// <summary>
        /// Gets or sets the fine charged for late return.
        /// </summary>
        /// <remarks>
        /// Value is stored as a decimal with precision (10,2).
        /// </remarks>
        /// <example>2.50</example>
        [Column(TypeName = "decimal(10,2)")]
        [Range(0, double.MaxValue, ErrorMessage = "Fine must be zero or positive.")]
        public decimal Fine { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the stock entry associated with this loan.
        /// </summary>
        /// <example>5</example>
        [Required(ErrorMessage = "StockId is required.")]
        [Range(1, int.MaxValue, ErrorMessage = "StockId must be a positive integer.")]
        public int StockId { get; set; }

        /// <summary>
        /// Gets or sets the navigation property to the stock entry.
        /// </summary>
        [ForeignKey(nameof(StockId))]
        public Stock Stock { get; set; } = null!;

        /// <summary>
        /// Gets or sets the number of times this loan has been extended.
        /// </summary>
        /// <remarks>
        /// Maximum allowed extensions is 10. Defaults to 0.
        /// </remarks>
        /// <example>1</example>
        [Required]
        [Range(0, 10, ErrorMessage = "ExtensionsCount must be between 0 and 10.")]
        public int ExtensionsCount { get; set; } = 0;
    }
}
