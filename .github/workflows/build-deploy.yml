name: Backend â€” Build & Push & Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

concurrency:
  group: prod-deploy-backend
  cancel-in-progress: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ secrets.DOCKERHUB_USER }}/backend-backend
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build & Push (Backend)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: BackendBiblioMate/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy backend to VM
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Start SSH agent with private key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Relax SSH host checking
        run: |
          mkdir -p ~/.ssh
          printf "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Pull & restart backend service
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'EOF'
          set -euo pipefail
          cd /opt/bibliomate
          docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_TOKEN"
          docker compose --env-file .env -f deploy/docker-compose.prod.yml pull backend
          docker compose --env-file .env -f deploy/docker-compose.prod.yml up -d backend
          docker compose -f deploy/docker-compose.prod.yml ps
          EOF
