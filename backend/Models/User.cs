using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace backend.Models
{
    /// <summary>
    /// Represents an application user with authentication and profile data.
    /// </summary>
    public class User
    {
        /// <summary>
        /// Primary key of the user.
        /// </summary>
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int UserId { get; set; }

        /// <summary>
        /// Full name of the user.
        /// </summary>
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "Name must be between 2 and 100 characters.")]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Email address, used for login and notifications.
        /// </summary>
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Email must be a valid email address.")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters.")]
        public string Email { get; set; } = string.Empty;

        /// <summary>
        /// Hashed password for authentication.
        /// </summary>
        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters.")]
        public string Password { get; set; } = string.Empty;

        /// <summary>
        /// Postal address of the user.
        /// </summary>
        [Required(ErrorMessage = "Address is required.")]
        [StringLength(200, ErrorMessage = "Address cannot exceed 200 characters.")]
        public string Address { get; set; } = string.Empty;

        /// <summary>
        /// Phone number of the user.
        /// </summary>
        [Required(ErrorMessage = "Phone is required.")]
        [Phone(ErrorMessage = "Phone must be a valid phone number.")]
        public string Phone { get; set; } = string.Empty;

        /// <summary>
        /// Role of the user (User, Librarian, Admin).
        /// </summary>
        [Required(ErrorMessage = "Role is required.")]
        [RegularExpression("^(User|Librarian|Admin)$", ErrorMessage = "Role must be 'User', 'Librarian', or 'Admin'.")]
        public string Role { get; set; } = "User";

        /// <summary>
        /// Indicates if the user’s email address has been confirmed.
        /// </summary>
        public bool IsEmailConfirmed { get; set; } = false;

        /// <summary>
        /// Token sent to confirm the user's email (nullable).
        /// </summary>
        [StringLength(1000)]
        public string? EmailConfirmationToken { get; set; }

        /// <summary>
        /// Token sent to reset the user's password (nullable).
        /// </summary>
        [StringLength(1000)]
        public string? PasswordResetToken { get; set; }

        /// <summary>
        /// Expiration date and time for the password reset token (nullable).
        /// </summary>
        public DateTime? PasswordResetTokenExpires { get; set; }

        /// <summary>
        /// Indicates if the user account has been approved by an administrator.
        /// </summary>
        public bool IsApproved { get; set; } = false;

        /// <summary>
        /// Collection of loan records associated with the user.
        /// </summary>
        public ICollection<Loan> Loans { get; set; } = new List<Loan>();

        /// <summary>
        /// Collection of reservation records associated with the user.
        /// </summary>
        public ICollection<Reservation> Reservations { get; set; } = new List<Reservation>();

        /// <summary>
        /// Collection of reports generated by the user.
        /// </summary>
        public ICollection<Report> Reports { get; set; } = new List<Report>();

        /// <summary>
        /// Collection of recommendations generated for the user.
        /// </summary>
        public ICollection<Recommendation> Recommendations { get; set; } = new List<Recommendation>();

        /// <summary>
        /// Collection of notifications sent to the user.
        /// </summary>
        public ICollection<Notification> Notifications { get; set; } = new List<Notification>();

        /// <summary>
        /// Preferred genres of the user for personalized recommendations.
        /// </summary>
        public ICollection<UserGenre> UserGenres { get; set; } = new List<UserGenre>();
    }
}
